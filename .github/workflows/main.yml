name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Install dependencies
        run:  DEBIAN_FRONTEND=noninteractive sudo apt install -y nasm mtools

      - name: Build
        run: ./build.sh

      - name: Build installer
        run: ./build_installer.sh

      - name: Create disk images
        run: ./create_disk_image.sh

      ## Now store built game as artifact
      #- name: Archive game zip
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: game-zip
      #    path: zip/game.zip
      
      # Store built disk images as artifacts
      #- name: Archive disk images
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: disk-images
      #    path: image*.img

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: rolling_action
          release_name: Release rolling_action
          body: |
            This is a rolling release that always contains the latest changes.
          draft: false
          prerelease: false

      - name: Upload game zip
        id: upload-release-game
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./zip/game.zip
          asset_name: game.zip
          asset_content_type: application/zip
        
      - name: Upload disk images
        id: upload-release-images
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./images.zip
          asset_name: images.zip
          asset_content_type: application/zip
Module: /home/yoshi252/program_source/DosPlatformGame/source/game.cpp
GROUP: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: game_TEXT PARA USE16 000044DA bytes
0000                          far Game::Game( tnd::shared_ptr<VgaGfx far >, tnd::shared_ptr<SoundController far >, tnd::shared_ptr<MusicController far >, tnd::shared_ptr<ImageBase far >, GameAnimations, char const far *, LevelNumber ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    81 EC A0 00               sub         sp,0x00a0 
0009    83 ED 6A                  sub         bp,0x006a 
000C    8E 46 7E                  mov         es,word ptr 0x7e[bp] 
000F    8B B6 80 00               mov         si,word ptr 0x80[bp] 
0013    89 C7                     mov         di,ax 
0015    8E D9                     mov         ds,cx 
0017    8B 4E 7C                  mov         cx,word ptr 0x7c[bp] 
001A    C7 46 2E 00 00            mov         word ptr 0x2e[bp],offset __wcpp_4_fs_handler_rtn__ 
001F    C7 46 30 00 00            mov         word ptr 0x30[bp],seg __wcpp_4_fs_handler_rtn__ 
0024    C7 46 32 00 00            mov         word ptr 0x32[bp],offset L$432 
0029    C7 46 34 00 00            mov         word ptr 0x34[bp],game_DATA1 
002E    C7 46 36 00 00            mov         word ptr 0x36[bp],0x0000 
0033    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0037    C6 46 4A 00               mov         byte ptr 0x4a[bp],0x00 
003B    89 46 2A                  mov         word ptr 0x2a[bp],ax 
003E    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0042    8C 56 62                  mov         word ptr 0x62[bp],ss 
0045    89 46 2C                  mov         word ptr 0x2c[bp],ax 
0048    8D 46 2A                  lea         ax,0x2a[bp] 
004B    89 7E 46                  mov         word ptr 0x46[bp],di 
004E    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
0052    8B 46 62                  mov         ax,word ptr 0x62[bp] 
0055    89 56 48                  mov         word ptr 0x48[bp],dx 
0058    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
005C    8B 07                     mov         ax,word ptr [bx] 
005E    89 46 62                  mov         word ptr 0x62[bp],ax 
0061    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0064    8E DA                     mov         ds,dx 
0066    8B 5E 62                  mov         bx,word ptr 0x62[bp] 
0069    89 5D 04                  mov         word ptr 0x4[di],bx 
006C    89 45 06                  mov         word ptr 0x6[di],ax 
006F    8B 5D 04                  mov         bx,word ptr 0x4[di] 
0072    8E D8                     mov         ds,ax 
0074    FF 07                     inc         word ptr [bx] 
0076    C7 46 36 01 00            mov         word ptr 0x36[bp],0x0001 
007B    89 CB                     mov         bx,cx 
007D    8E DA                     mov         ds,dx 
007F    26 8B 07                  mov         ax,word ptr es:[bx] 
0082    26 8B 5F 02               mov         bx,word ptr es:0x2[bx] 
0086    89 45 08                  mov         word ptr 0x8[di],ax 
0089    89 5D 0A                  mov         word ptr 0xa[di],bx 
008C    C5 5D 08                  lds         bx,dword ptr 0x8[di] 
008F    83 C7 08                  add         di,0x0008 
0092    FF 07                     inc         word ptr [bx] 
0094    C7 46 36 02 00            mov         word ptr 0x36[bp],0x0002 
0099    C6 46 3E 00               mov         byte ptr 0x3e[bp],0x00 
009D    89 FB                     mov         bx,di 
009F    8E 86 82 00               mov         es,word ptr 0x82[bp] 
00A3    83 C3 04                  add         bx,0x0004 
00A6    89 56 3C                  mov         word ptr 0x3c[bp],dx 
00A9    89 5E 3A                  mov         word ptr 0x3a[bp],bx 
00AC    8E DA                     mov         ds,dx 
00AE    26 8B 04                  mov         ax,word ptr es:[si] 
00B1    26 8B 4C 02               mov         cx,word ptr es:0x2[si] 
00B5    89 07                     mov         word ptr [bx],ax 
00B7    89 4F 02                  mov         word ptr 0x2[bx],cx 
00BA    8B 3F                     mov         di,word ptr [bx] 
00BC    8E D9                     mov         ds,cx 
00BE    FF 05                     inc         word ptr [di] 
00C0    C7 46 36 05 00            mov         word ptr 0x36[bp],0x0005 
00C5    89 F7                     mov         di,si 
00C7    8E DA                     mov         ds,dx 
00C9    26 8B 4D 04               mov         cx,word ptr es:0x4[di] 
00CD    26 8B 45 06               mov         ax,word ptr es:0x6[di] 
00D1    89 4F 04                  mov         word ptr 0x4[bx],cx 
00D4    83 C7 04                  add         di,0x0004 
00D7    89 47 06                  mov         word ptr 0x6[bx],ax 
00DA    8B 7F 04                  mov         di,word ptr 0x4[bx] 
00DD    8E D8                     mov         ds,ax 
00DF    FF 05                     inc         word ptr [di] 
00E1    C7 46 36 06 00            mov         word ptr 0x36[bp],0x0006 
00E6    89 F7                     mov         di,si 
00E8    8E DA                     mov         ds,dx 
00EA    26 8B 45 08               mov         ax,word ptr es:0x8[di] 
00EE    26 8B 4D 0A               mov         cx,word ptr es:0xa[di] 
00F2    89 47 08                  mov         word ptr 0x8[bx],ax 
00F5    83 C7 08                  add         di,0x0008 
00F8    89 4F 0A                  mov         word ptr 0xa[bx],cx 
00FB    8B 7F 08                  mov         di,word ptr 0x8[bx] 
00FE    8E D9                     mov         ds,cx 
0100    FF 05                     inc         word ptr [di] 
0102    83 C3 04                  add         bx,0x0004 
0105    C7 46 36 07 00            mov         word ptr 0x36[bp],0x0007 
010A    89 F7                     mov         di,si 
010C    8E DA                     mov         ds,dx 
010E    26 8B 45 0C               mov         ax,word ptr es:0xc[di] 
0112    26 8B 4D 0E               mov         cx,word ptr es:0xe[di] 
0116    89 47 08                  mov         word ptr 0x8[bx],ax 
0119    83 C7 0C                  add         di,0x000c 
011C    89 4F 0A                  mov         word ptr 0xa[bx],cx 
011F    8B 7F 08                  mov         di,word ptr 0x8[bx] 
0122    8E D9                     mov         ds,cx 
0124    83 C3 08                  add         bx,0x0008 
0127    FF 05                     inc         word ptr [di] 
0129    C7 46 36 08 00            mov         word ptr 0x36[bp],0x0008 
012E    89 F7                     mov         di,si 
0130    8E DA                     mov         ds,dx 
0132    26 8B 45 10               mov         ax,word ptr es:0x10[di] 
0136    26 8B 4D 12               mov         cx,word ptr es:0x12[di] 
013A    89 47 04                  mov         word ptr 0x4[bx],ax 
013D    83 C7 10                  add         di,0x0010 
0140    89 4F 06                  mov         word ptr 0x6[bx],cx 
0143    8B 7F 04                  mov         di,word ptr 0x4[bx] 
0146    8E D9                     mov         ds,cx 
0148    83 C3 08                  add         bx,0x0008 
014B    FF 05                     inc         word ptr [di] 
014D    C7 46 36 09 00            mov         word ptr 0x36[bp],0x0009 
0152    89 F7                     mov         di,si 
0154    8E DA                     mov         ds,dx 
0156    83 C7 14                  add         di,0x0014 
0159    26 8B 0D                  mov         cx,word ptr es:[di] 
015C    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
0160    89 0F                     mov         word ptr [bx],cx 
0162    89 47 02                  mov         word ptr 0x2[bx],ax 
0165    8B 3F                     mov         di,word ptr [bx] 
0167    8E D8                     mov         ds,ax 
0169    83 C3 04                  add         bx,0x0004 
016C    FF 05                     inc         word ptr [di] 
016E    8E DA                     mov         ds,dx 
0170    C7 46 36 03 00            mov         word ptr 0x36[bp],0x0003 
0175    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
017A    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
017F    C7 07 00 00               mov         word ptr [bx],0x0000 
0183    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
0188    83 C3 08                  add         bx,0x0008 
018B    C7 46 36 0C 00            mov         word ptr 0x36[bp],0x000c 
0190    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0195    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
019A    C7 07 00 00               mov         word ptr [bx],0x0000 
019E    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
01A3    83 C3 08                  add         bx,0x0008 
01A6    C7 46 36 0D 00            mov         word ptr 0x36[bp],0x000d 
01AB    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
01B0    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
01B5    C7 07 00 00               mov         word ptr [bx],0x0000 
01B9    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
01BE    83 C3 08                  add         bx,0x0008 
01C1    C7 46 36 0E 00            mov         word ptr 0x36[bp],0x000e 
01C6    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
01CB    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
01D0    C7 07 00 00               mov         word ptr [bx],0x0000 
01D4    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
01D9    83 C3 08                  add         bx,0x0008 
01DC    C7 46 36 0F 00            mov         word ptr 0x36[bp],0x000f 
01E1    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
01E6    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
01EB    C7 07 00 00               mov         word ptr [bx],0x0000 
01EF    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
01F4    83 C3 08                  add         bx,0x0008 
01F7    C7 46 36 10 00            mov         word ptr 0x36[bp],0x0010 
01FC    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0201    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
0206    C7 07 00 00               mov         word ptr [bx],0x0000 
020A    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
020F    83 C3 08                  add         bx,0x0008 
0212    C7 46 36 11 00            mov         word ptr 0x36[bp],0x0011 
0217    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
021C    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
0221    C7 07 00 00               mov         word ptr [bx],0x0000 
0225    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
022A    83 C3 08                  add         bx,0x0008 
022D    C7 46 36 12 00            mov         word ptr 0x36[bp],0x0012 
0232    C7 07 00 00               mov         word ptr [bx],0x0000 
0236    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
023B    C7 46 36 13 00            mov         word ptr 0x36[bp],0x0013 
0240    83 EB 5C                  sub         bx,0x005c 
0243    8B 8E 86 00               mov         cx,word ptr 0x86[bp] 
0247    C7 47 60 00 00            mov         word ptr 0x60[bx],0x0000 
024C    89 D8                     mov         ax,bx 
024E    C7 47 62 00 00            mov         word ptr 0x62[bx],0x0000 
0253    8B 9E 84 00               mov         bx,word ptr 0x84[bp] 
0257    05 66 00                  add         ax,0x0066 
025A    9A 00 00 00 00            call        far TinyString::TinyString( char const far * ) 
025F    C5 5E 74                  lds         bx,dword ptr 0x74[bp] 
0262    C7 46 36 14 00            mov         word ptr 0x36[bp],0x0014 
0267    8B 1F                     mov         bx,word ptr [bx] 
0269    89 5E 56                  mov         word ptr 0x56[bp],bx 
026C    8B 5E 74                  mov         bx,word ptr 0x74[bp] 
026F    89 C1                     mov         cx,ax 
0271    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0274    8B 5E 56                  mov         bx,word ptr 0x56[bp] 
0277    8E D8                     mov         ds,ax 
0279    89 46 58                  mov         word ptr 0x58[bp],ax 
027C    FF 07                     inc         word ptr [bx] 
027E    8E 9E 82 00               mov         ds,word ptr 0x82[bp] 
0282    C7 46 36 17 00            mov         word ptr 0x36[bp],0x0017 
0287    8B 1C                     mov         bx,word ptr [si] 
0289    89 5E 52                  mov         word ptr 0x52[bp],bx 
028C    8B 44 02                  mov         ax,word ptr 0x2[si] 
028F    89 46 54                  mov         word ptr 0x54[bp],ax 
0292    8E D8                     mov         ds,ax 
0294    89 CE                     mov         si,cx 
0296    FF 07                     inc         word ptr [bx] 
0298    83 C6 08                  add         si,0x0008 
029B    C7 46 36 18 00            mov         word ptr 0x36[bp],0x0018 
02A0    C6 46 3E 00               mov         byte ptr 0x3e[bp],0x00 
02A4    8B 5E 52                  mov         bx,word ptr 0x52[bp] 
02A7    8E DA                     mov         ds,dx 
02A9    89 76 3A                  mov         word ptr 0x3a[bp],si 
02AC    89 56 3C                  mov         word ptr 0x3c[bp],dx 
02AF    89 1C                     mov         word ptr [si],bx 
02B1    8B 46 54                  mov         ax,word ptr 0x54[bp] 
02B4    8B 1C                     mov         bx,word ptr [si] 
02B6    89 44 02                  mov         word ptr 0x2[si],ax 
02B9    8E C0                     mov         es,ax 
02BB    26 FF 07                  inc         word ptr es:[bx] 
02BE    C7 46 36 19 00            mov         word ptr 0x36[bp],0x0019 
02C3    C7 44 04 00 00            mov         word ptr 0x4[si],0x0000 
02C8    C7 44 06 00 00            mov         word ptr 0x6[si],0x0000 
02CD    C7 44 08 00 01            mov         word ptr 0x8[si],0x0100 
02D2    C6 44 0A 01               mov         byte ptr 0xa[si],0x01 
02D6    C7 44 0C 00 00            mov         word ptr 0xc[si],0x0000 
02DB    8B 5E 56                  mov         bx,word ptr 0x56[bp] 
02DE    89 5C 0E                  mov         word ptr 0xe[si],bx 
02E1    8B 46 58                  mov         ax,word ptr 0x58[bp] 
02E4    8B 5C 0E                  mov         bx,word ptr 0xe[si] 
02E7    89 44 10                  mov         word ptr 0x10[si],ax 
02EA    8E D8                     mov         ds,ax 
02EC    83 C6 0E                  add         si,0x000e 
02EF    FF 07                     inc         word ptr [bx] 
02F1    B8 15 00                  mov         ax,0x0015 
02F4    C7 46 36 18 00            mov         word ptr 0x36[bp],0x0018 
02F9    89 F3                     mov         bx,si 
02FB    9A 00 00 00 00            call        __wcpp_4_destruct__ 
0300    83 EB 7C                  sub         bx,0x007c 
0303    8E DA                     mov         ds,dx 
0305    81 C3 82 00               add         bx,0x0082 
0309    C7 46 36 15 00            mov         word ptr 0x36[bp],0x0015 
030E    C6 47 FE 00               mov         byte ptr -0x2[bx],0x00 
0312    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0317    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
031C    C7 07 00 00               mov         word ptr [bx],0x0000 
0320    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
0325    89 D8                     mov         ax,bx 
0327    C7 46 36 1C 00            mov         word ptr 0x36[bp],0x001c 
032C    05 08 00                  add         ax,0x0008 
032F    8B 7E 74                  mov         di,word ptr 0x74[bp] 
0332    9A 00 00 00 00            call        far TinyString::TinyString() 
0337    05 04 00                  add         ax,0x0004 
033A    C7 46 36 1D 00            mov         word ptr 0x36[bp],0x001d 
033F    9A 00 00 00 00            call        far TinyString::TinyString() 
0344    C7 46 36 1E 00            mov         word ptr 0x36[bp],0x001e 
0349    8E 46 76                  mov         es,word ptr 0x76[bp] 
034C    89 D6                     mov         si,dx 
034E    8E DA                     mov         ds,dx 
0350    89 C3                     mov         bx,ax 
0352    26 8B 15                  mov         dx,word ptr es:[di] 
0355    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
0359    89 57 04                  mov         word ptr 0x4[bx],dx 
035C    89 47 06                  mov         word ptr 0x6[bx],ax 
035F    8B 7F 04                  mov         di,word ptr 0x4[bx] 
0362    8E D8                     mov         ds,ax 
0364    83 C3 08                  add         bx,0x0008 
0367    FF 05                     inc         word ptr [di] 
0369    C7 46 36 1F 00            mov         word ptr 0x36[bp],0x001f 
036E    C4 7E 78                  les         di,dword ptr 0x78[bp] 
0371    8E DE                     mov         ds,si 
0373    26 8B 15                  mov         dx,word ptr es:[di] 
0376    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
037A    89 17                     mov         word ptr [bx],dx 
037C    89 47 02                  mov         word ptr 0x2[bx],ax 
037F    8B 3F                     mov         di,word ptr [bx] 
0381    8E D8                     mov         ds,ax 
0383    81 EB 96 00               sub         bx,0x0096 
0387    FF 05                     inc         word ptr [di] 
0389    8E DE                     mov         ds,si 
038B    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
0390    C7 87 9A 00 00 00         mov         word ptr 0x9a[bx],0x0000 
0396    C6 87 9C 00 00            mov         byte ptr 0x9c[bx],0x00 
039B    C7 87 A0 00 00 00         mov         word ptr 0xa0[bx],0x0000 
03A1    C7 87 A2 00 00 00         mov         word ptr 0xa2[bx],0x0000 
03A7    C6 87 A4 00 00            mov         byte ptr 0xa4[bx],0x00 
03AC    C7 87 A8 00 00 00         mov         word ptr 0xa8[bx],0x0000 
03B2    89 76 66                  mov         word ptr 0x66[bp],si 
03B5    C7 87 AA 00 00 00         mov         word ptr 0xaa[bx],0x0000 
03BB    89 5E 64                  mov         word ptr 0x64[bp],bx 
03BE    C7 07 04 00               mov         word ptr [bx],offset void (far * const far __vftbl[])()+0x4 
03C2    8C D2                     mov         dx,ss 
03C4    C7 47 02 00 00            mov         word ptr 0x2[bx],seg void (far * const far __vftbl[])() 
03C9    8D 46 5A                  lea         ax,0x5a[bp] 
03CC    C6 47 6C FF               mov         byte ptr 0x6c[bx],0xff 
03D0    8B 7E 64                  mov         di,word ptr 0x64[bp] 
03D3    C6 47 6D FF               mov         byte ptr 0x6d[bx],0xff 
03D7    BB 02 00                  mov         bx,0x0002 
03DA    81 C7 8A 00               add         di,0x008a 
03DE    9A 00 00 00 00            call        TinyString far I18N::getString( short unsigned ) 
03E3    89 C3                     mov         bx,ax 
03E5    89 D1                     mov         cx,dx 
03E7    89 F8                     mov         ax,di 
03E9    89 F2                     mov         dx,si 
03EB    C7 46 36 21 00            mov         word ptr 0x36[bp],0x0021 
03F0    9A 00 00 00 00            call        void far TinyString::operator =( TinyString const far & ) 
03F5    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
03FA    8D 46 5A                  lea         ax,0x5a[bp] 
03FD    8C D2                     mov         dx,ss 
03FF    31 DB                     xor         bx,bx 
0401    8B 7E 64                  mov         di,word ptr 0x64[bp] 
0404    9A 00 00 00 00            call        far TinyString::~TinyString() 
0409    BB 1A 00                  mov         bx,0x001a 
040C    8D 46 5E                  lea         ax,0x5e[bp] 
040F    8C D2                     mov         dx,ss 
0411    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
0416    9A 00 00 00 00            call        TinyString far I18N::getString( short unsigned ) 
041B    81 C7 8E 00               add         di,0x008e 
041F    89 C3                     mov         bx,ax 
0421    89 D1                     mov         cx,dx 
0423    89 F8                     mov         ax,di 
0425    89 F2                     mov         dx,si 
0427    C7 46 36 23 00            mov         word ptr 0x36[bp],0x0023 
042C    9A 00 00 00 00            call        void far TinyString::operator =( TinyString const far & ) 
0431    8D 46 5E                  lea         ax,0x5e[bp] 
0434    8C D2                     mov         dx,ss 
0436    31 DB                     xor         bx,bx 
0438    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
043D    9A 00 00 00 00            call        far TinyString::~TinyString() 
0442    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
0447    31 C0                     xor         ax,ax 
0449    BB 00 00                  mov         bx,offset L$557 
044C    89 46 CC                  mov         word ptr -0x34[bp],ax 
044F    89 46 CE                  mov         word ptr -0x32[bp],ax 
0452    89 46 D4                  mov         word ptr -0x2c[bp],ax 
0455    89 46 D6                  mov         word ptr -0x2a[bp],ax 
0458    89 46 D0                  mov         word ptr -0x30[bp],ax 
045B    89 46 D2                  mov         word ptr -0x2e[bp],ax 
045E    30 C0                     xor         al,al 
0460    B9 00 00                  mov         cx,game_DATA2 
0463    88 46 D8                  mov         byte ptr -0x28[bp],al 
0466    88 46 D9                  mov         byte ptr -0x27[bp],al 
0469    88 46 DA                  mov         byte ptr -0x26[bp],al 
046C    30 E4                     xor         ah,ah 
046E    8C D2                     mov         dx,ss 
0470    89 46 DE                  mov         word ptr -0x22[bp],ax 
0473    89 46 E0                  mov         word ptr -0x20[bp],ax 
0476    89 46 E2                  mov         word ptr -0x1e[bp],ax 
0479    89 46 E4                  mov         word ptr -0x1c[bp],ax 
047C    88 46 CA                  mov         byte ptr -0x36[bp],al 
047F    88 46 CB                  mov         byte ptr -0x35[bp],al 
0482    8D 46 CA                  lea         ax,-0x36[bp] 
0485    C7 46 36 25 00            mov         word ptr 0x36[bp],0x0025 
048A    9A 00 00 00 00            call        bool far loadGameState( GameState far &, char const far * ) 
048F    84 C0                     test        al,al 
0491    75 03                     jne         L$1 
0493    E9 FC 01                  jmp         L$5 
0496                          L$1:
0496    8B 7E 64                  mov         di,word ptr 0x64[bp] 
0499    8E DE                     mov         ds,si 
049B    8B 85 82 00               mov         ax,word ptr 0x82[di] 
049F    8B 95 84 00               mov         dx,word ptr 0x84[di] 
04A3    9A 00 00 00 00            call        void far operator delete []( void far * ) 
04A8    8E DE                     mov         ds,si 
04AA    8B 46 D6                  mov         ax,word ptr -0x2a[bp] 
04AD    89 85 86 00               mov         word ptr 0x86[di],ax 
04B1    89 C3                     mov         bx,ax 
04B3    89 85 88 00               mov         word ptr 0x88[di],ax 
04B7    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
04BA    50                        push        ax 
04BB    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
04BE    50                        push        ax 
04BF    89 D8                     mov         ax,bx 
04C1    D1 E0                     shl         ax,0x01 
04C3    D1 E0                     shl         ax,0x01 
04C5    29 D8                     sub         ax,bx 
04C7    D1 E0                     shl         ax,0x01 
04C9    81 C7 82 00               add         di,0x0082 
04CD    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
04D2    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
04D7    8E DE                     mov         ds,si 
04D9    89 76 68                  mov         word ptr 0x68[bp],si 
04DC    89 05                     mov         word ptr [di],ax 
04DE    89 F9                     mov         cx,di 
04E0    89 55 02                  mov         word ptr 0x2[di],dx 
04E3    31 D2                     xor         dx,dx 
04E5    83 7E D6 00               cmp         word ptr -0x2a[bp],0x0000 
04E9    7E 26                     jle         L$3 
04EB    31 C0                     xor         ax,ax 
04ED                          L$2:
04ED    8B 76 D0                  mov         si,word ptr -0x30[bp] 
04F0    8E 5E 68                  mov         ds,word ptr 0x68[bp] 
04F3    89 CF                     mov         di,cx 
04F5    89 CB                     mov         bx,cx 
04F7    8B 3D                     mov         di,word ptr [di] 
04F9    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
04FC    01 C6                     add         si,ax 
04FE    8E 5E D2                  mov         ds,word ptr -0x2e[bp] 
0501    8E C3                     mov         es,bx 
0503    01 C7                     add         di,ax 
0505    42                        inc         dx 
0506    A5                        movsw       
0507    A5                        movsw       
0508    A5                        movsw       
0509    05 06 00                  add         ax,0x0006 
050C    3B 56 D6                  cmp         dx,word ptr -0x2a[bp] 
050F    7C DC                     jl          L$2 
0511                          L$3:
0511    C5 5E 64                  lds         bx,dword ptr 0x64[bp] 
0514    8A 46 D8                  mov         al,byte ptr -0x28[bp] 
0517    88 87 9A 00               mov         byte ptr 0x9a[bx],al 
051B    8A 46 DA                  mov         al,byte ptr -0x26[bp] 
051E    88 87 9C 00               mov         byte ptr 0x9c[bx],al 
0522    8B 46 DE                  mov         ax,word ptr -0x22[bp] 
0525    89 87 A0 00               mov         word ptr 0xa0[bx],ax 
0529    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
052C    89 87 A2 00               mov         word ptr 0xa2[bx],ax 
0530    8B 46 E2                  mov         ax,word ptr -0x1e[bp] 
0533    89 87 A8 00               mov         word ptr 0xa8[bx],ax 
0537    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
053A    B9 01 00                  mov         cx,0x0001 
053D    89 87 AA 00               mov         word ptr 0xaa[bx],ax 
0541    8C DA                     mov         dx,ds 
0543    8B 5E CA                  mov         bx,word ptr -0x36[bp] 
0546    8B 46 64                  mov         ax,word ptr 0x64[bp] 
0549    0E                        push        cs 
054A    E8 00 00                  call        void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ) 
054D    C5 5E 64                  lds         bx,dword ptr 0x64[bp] 
0550    83 C3 5C                  add         bx,0x005c 
0553    8C D1                     mov         cx,ss 
0555    C5 37                     lds         si,dword ptr [bx] 
0557    8D 5E CC                  lea         bx,-0x34[bp] 
055A    8B 44 02                  mov         ax,word ptr 0x2[si] 
055D    8B 54 04                  mov         dx,word ptr 0x4[si] 
0560    9A 00 00 00 00            call        void far Physics::setSpawnPoint( Point const far & ) 
0565    C5 5E 64                  lds         bx,dword ptr 0x64[bp] 
0568    8B 87 88 00               mov         ax,word ptr 0x88[bx] 
056C    50                        push        ax 
056D    8B 46 64                  mov         ax,word ptr 0x64[bp] 
0570    8C DA                     mov         dx,ds 
0572    05 8A 00                  add         ax,0x008a 
0575    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
057A    52                        push        dx 
057B    8B 7E 66                  mov         di,word ptr 0x66[bp] 
057E    50                        push        ax 
057F    B8 10 00                  mov         ax,0x0010 
0582    8B 76 64                  mov         si,word ptr 0x64[bp] 
0585    50                        push        ax 
0586    8D 56 0A                  lea         dx,0xa[bp] 
0589    16                        push        ss 
058A    8C D1                     mov         cx,ss 
058C    52                        push        dx 
058D    81 C3 82 00               add         bx,0x0082 
0591    9A 00 00 00 00            call        snprintf_ 
0596    83 C4 0C                  add         sp,0x000c 
0599    31 C0                     xor         ax,ax 
059B    8D 5E 0A                  lea         bx,0xa[bp] 
059E    50                        push        ax 
059F    8C D2                     mov         dx,ss 
05A1    50                        push        ax 
05A2    8D 46 E6                  lea         ax,-0x1a[bp] 
05A5    83 C6 04                  add         si,0x0004 
05A8    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
05AD    C7 46 36 26 00            mov         word ptr 0x36[bp],0x0026 
05B2    B8 01 00                  mov         ax,0x0001 
05B5    8E DF                     mov         ds,di 
05B7    50                        push        ax 
05B8    8B 1C                     mov         bx,word ptr [si] 
05BA    B8 04 01                  mov         ax,0x0104 
05BD    8E 5C 02                  mov         ds,word ptr 0x2[si] 
05C0    50                        push        ax 
05C1    8B 57 04                  mov         dx,word ptr 0x4[bx] 
05C4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
05C7    8D 5E E6                  lea         bx,-0x1a[bp] 
05CA    8C D1                     mov         cx,ss 
05CC    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
05D1    8D 46 E6                  lea         ax,-0x1a[bp] 
05D4    8C D2                     mov         dx,ss 
05D6    31 DB                     xor         bx,bx 
05D8    C7 46 36 25 00            mov         word ptr 0x36[bp],0x0025 
05DD    9A 00 00 00 00            call        far Text::~Text() 
05E2    C7 46 36 25 00            mov         word ptr 0x36[bp],0x0025 
05E7    8B 5E 64                  mov         bx,word ptr 0x64[bp] 
05EA    8E DF                     mov         ds,di 
05EC    89 FA                     mov         dx,di 
05EE    FF B7 A2 00               push        word ptr 0xa2[bx] 
05F2    89 D8                     mov         ax,bx 
05F4    FF B7 A0 00               push        word ptr 0xa0[bx] 
05F8    05 8E 00                  add         ax,0x008e 
05FB    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
0600    52                        push        dx 
0601    50                        push        ax 
0602    B8 10 00                  mov         ax,0x0010 
0605    50                        push        ax 
0606    16                        push        ss 
0607    8D 56 1A                  lea         dx,0x1a[bp] 
060A    52                        push        dx 
060B    8C D1                     mov         cx,ss 
060D    9A 00 00 00 00            call        snprintf_ 
0612    83 C4 0E                  add         sp,0x000e 
0615    31 C0                     xor         ax,ax 
0617    8D 5E 1A                  lea         bx,0x1a[bp] 
061A    50                        push        ax 
061B    8C D2                     mov         dx,ss 
061D    50                        push        ax 
061E    8D 46 F8                  lea         ax,-0x8[bp] 
0621    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
0626    C7 46 36 28 00            mov         word ptr 0x36[bp],0x0028 
062B    B8 01 00                  mov         ax,0x0001 
062E    8E DF                     mov         ds,di 
0630    8C D1                     mov         cx,ss 
0632    50                        push        ax 
0633    8B 1C                     mov         bx,word ptr [si] 
0635    B8 0A 00                  mov         ax,0x000a 
0638    8E 5C 02                  mov         ds,word ptr 0x2[si] 
063B    50                        push        ax 
063C    8B 57 04                  mov         dx,word ptr 0x4[bx] 
063F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0642    8D 5E F8                  lea         bx,-0x8[bp] 
0645    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
064A    8D 46 F8                  lea         ax,-0x8[bp] 
064D    8C D2                     mov         dx,ss 
064F    31 DB                     xor         bx,bx 
0651    C7 46 36 25 00            mov         word ptr 0x36[bp],0x0025 
0656    9A 00 00 00 00            call        far Text::~Text() 
065B    C7 46 36 25 00            mov         word ptr 0x36[bp],0x0025 
0660                          L$4:
0660    8B 46 D0                  mov         ax,word ptr -0x30[bp] 
0663    8B 56 D2                  mov         dx,word ptr -0x2e[bp] 
0666    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
066B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0670    8B 46 2A                  mov         ax,word ptr 0x2a[bp] 
0673    C7 46 36 20 00            mov         word ptr 0x36[bp],0x0020 
0678    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
067C    8B 46 2C                  mov         ax,word ptr 0x2c[bp] 
067F    8B 56 66                  mov         dx,word ptr 0x66[bp] 
0682    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
0686    8B 46 64                  mov         ax,word ptr 0x64[bp] 
0689    8D 66 6A                  lea         sp,0x6a[bp] 
068C    5D                        pop         bp 
068D    5F                        pop         di 
068E    5E                        pop         si 
068F    CA 16 00                  retf        0x0016 
0692                          L$5:
0692    8B 9E 88 00               mov         bx,word ptr 0x88[bp] 
0696    8B 46 64                  mov         ax,word ptr 0x64[bp] 
0699    89 F2                     mov         dx,si 
069B    31 C9                     xor         cx,cx 
069D    0E                        push        cs 
069E    E8 00 00                  call        void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ) 
06A1    EB BD                     jmp         L$4 
06A3    FC                        cld         

Routine Size: 1700 bytes,    Routine Base: game_TEXT + 0000

06A4                          far Game::~Game():
06A4    51                        push        cx 
06A5    56                        push        si 
06A6    57                        push        di 
06A7    55                        push        bp 
06A8    89 E5                     mov         bp,sp 
06AA    81 EC 04 01               sub         sp,0x0104 
06AE    81 ED 80 00               sub         bp,0x0080 
06B2    89 C6                     mov         si,ax 
06B4    8E DA                     mov         ds,dx 
06B6    C7 04 04 00               mov         word ptr [si],offset void (far * const far __vftbl[])()+0x4 
06BA    8C D9                     mov         cx,ds 
06BC    C7 44 02 00 00            mov         word ptr 0x2[si],seg void (far * const far __vftbl[])() 
06C1    8C 5E 2E                  mov         word ptr 0x2e[bp],ds 
06C4    C7 46 0C 00 00            mov         word ptr 0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
06C9    C7 46 0E 00 00            mov         word ptr 0xe[bp],seg __wcpp_4_fs_handler_rtn__ 
06CE    C7 46 10 42 01            mov         word ptr 0x10[bp],offset L$433 
06D3    C7 46 12 00 00            mov         word ptr 0x12[bp],game_DATA1 
06D8    C7 46 14 17 00            mov         word ptr 0x14[bp],0x0017 
06DD    89 46 22                  mov         word ptr 0x22[bp],ax 
06E0    89 56 24                  mov         word ptr 0x24[bp],dx 
06E3    88 5E 26                  mov         byte ptr 0x26[bp],bl 
06E6    8D 56 08                  lea         dx,0x8[bp] 
06E9    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
06ED    89 F3                     mov         bx,si 
06EF    89 46 08                  mov         word ptr 0x8[bp],ax 
06F2    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
06F7    81 C3 96 00               add         bx,0x0096 
06FB    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
06FF    89 5E 6C                  mov         word ptr 0x6c[bp],bx 
0702    89 DF                     mov         di,bx 
0704    89 46 0A                  mov         word ptr 0xa[bp],ax 
0707    8C D8                     mov         ax,ds 
0709    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
070E    8E C0                     mov         es,ax 
0710    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0713    8B 17                     mov         dx,word ptr [bx] 
0715    85 C0                     test        ax,ax 
0717    75 04                     jne         L$6 
0719    85 D2                     test        dx,dx 
071B    74 48                     je          L$10 
071D                          L$6:
071D    89 D6                     mov         si,dx 
071F    8E D8                     mov         ds,ax 
0721    83 3C 01                  cmp         word ptr [si],0x0001 
0724    74 03                     je          L$7 
0726    E9 18 03                  jmp         L$35 
0729                          L$7:
0729    8B 54 04                  mov         dx,word ptr 0x4[si] 
072C    8B 44 02                  mov         ax,word ptr 0x2[si] 
072F    85 D2                     test        dx,dx 
0731    75 04                     jne         L$8 
0733    85 C0                     test        ax,ax 
0735    74 1C                     je          L$9 
0737                          L$8:
0737    C7 46 14 1A 00            mov         word ptr 0x14[bp],0x001a 
073C    89 46 E0                  mov         word ptr -0x20[bp],ax 
073F    31 DB                     xor         bx,bx 
0741    89 56 E2                  mov         word ptr -0x1e[bp],dx 
0744    9A 00 00 00 00            call        far MusicController::~MusicController() 
0749    C7 46 14 17 00            mov         word ptr 0x14[bp],0x0017 
074E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0753                          L$9:
0753    8E 5E 2E                  mov         ds,word ptr 0x2e[bp] 
0756    8B 05                     mov         ax,word ptr [di] 
0758    8B 55 02                  mov         dx,word ptr 0x2[di] 
075B    9A 00 00 00 00            call        void far operator delete( void far * ) 
0760    C7 46 14 17 00            mov         word ptr 0x14[bp],0x0017 
0765                          L$10:
0765    C7 46 14 16 00            mov         word ptr 0x14[bp],0x0016 
076A    8B 5E 6C                  mov         bx,word ptr 0x6c[bp] 
076D    8E D9                     mov         ds,cx 
076F    83 EB 04                  sub         bx,0x0004 
0772    89 4E 34                  mov         word ptr 0x34[bp],cx 
0775    8B 17                     mov         dx,word ptr [bx] 
0777    8B 47 02                  mov         ax,word ptr 0x2[bx] 
077A    89 5E 70                  mov         word ptr 0x70[bp],bx 
077D    89 DF                     mov         di,bx 
077F    85 C0                     test        ax,ax 
0781    75 04                     jne         L$11 
0783    85 D2                     test        dx,dx 
0785    74 47                     je          L$15 
0787                          L$11:
0787    89 D6                     mov         si,dx 
0789    8E D8                     mov         ds,ax 
078B    83 3C 01                  cmp         word ptr [si],0x0001 
078E    74 03                     je          L$12 
0790    E9 B3 02                  jmp         L$36 
0793                          L$12:
0793    8B 54 04                  mov         dx,word ptr 0x4[si] 
0796    8B 44 02                  mov         ax,word ptr 0x2[si] 
0799    85 D2                     test        dx,dx 
079B    75 04                     jne         L$13 
079D    85 C0                     test        ax,ax 
079F    74 1C                     je          L$14 
07A1                          L$13:
07A1    C7 46 14 1C 00            mov         word ptr 0x14[bp],0x001c 
07A6    89 46 F4                  mov         word ptr -0xc[bp],ax 
07A9    31 DB                     xor         bx,bx 
07AB    89 56 F6                  mov         word ptr -0xa[bp],dx 
07AE    9A 00 00 00 00            call        far SoundController::~SoundController() 
07B3    C7 46 14 16 00            mov         word ptr 0x14[bp],0x0016 
07B8    9A 00 00 00 00            call        void far operator delete( void far * ) 
07BD                          L$14:
07BD    8E D9                     mov         ds,cx 
07BF    8B 05                     mov         ax,word ptr [di] 
07C1    8B 55 02                  mov         dx,word ptr 0x2[di] 
07C4    9A 00 00 00 00            call        void far operator delete( void far * ) 
07C9    C7 46 14 16 00            mov         word ptr 0x14[bp],0x0016 
07CE                          L$15:
07CE    8B 46 70                  mov         ax,word ptr 0x70[bp] 
07D1    8B 56 34                  mov         dx,word ptr 0x34[bp] 
07D4    31 DB                     xor         bx,bx 
07D6    2D 04 00                  sub         ax,0x0004 
07D9    C7 46 14 15 00            mov         word ptr 0x14[bp],0x0015 
07DE    9A 00 00 00 00            call        far TinyString::~TinyString() 
07E3    2D 04 00                  sub         ax,0x0004 
07E6    31 DB                     xor         bx,bx 
07E8    C7 46 14 14 00            mov         word ptr 0x14[bp],0x0014 
07ED    9A 00 00 00 00            call        far TinyString::~TinyString() 
07F2    C7 46 14 13 00            mov         word ptr 0x14[bp],0x0013 
07F7    8E DA                     mov         ds,dx 
07F9    89 C3                     mov         bx,ax 
07FB    89 D1                     mov         cx,dx 
07FD    8B 47 F8                  mov         ax,word ptr -0x8[bx] 
0800    8B 57 FA                  mov         dx,word ptr -0x6[bx] 
0803    83 EB 0E                  sub         bx,0x000e 
0806    9A 00 00 00 00            call        void far operator delete []( void far * ) 
080B    89 CF                     mov         di,cx 
080D    C7 46 14 12 00            mov         word ptr 0x14[bp],0x0012 
0812    8E D9                     mov         ds,cx 
0814    89 5E 42                  mov         word ptr 0x42[bp],bx 
0817    89 5E 74                  mov         word ptr 0x74[bp],bx 
081A    8B 47 02                  mov         ax,word ptr 0x2[bx] 
081D    8B 17                     mov         dx,word ptr [bx] 
081F    85 C0                     test        ax,ax 
0821    75 04                     jne         L$16 
0823    85 D2                     test        dx,dx 
0825    74 4C                     je          L$20 
0827                          L$16:
0827    89 D6                     mov         si,dx 
0829    8E D8                     mov         ds,ax 
082B    83 3C 01                  cmp         word ptr [si],0x0001 
082E    74 03                     je          L$17 
0830    E9 18 02                  jmp         L$37 
0833                          L$17:
0833    8B 54 04                  mov         dx,word ptr 0x4[si] 
0836    8B 44 02                  mov         ax,word ptr 0x2[si] 
0839    85 D2                     test        dx,dx 
083B    75 04                     jne         L$18 
083D    85 C0                     test        ax,ax 
083F    74 1E                     je          L$19 
0841                          L$18:
0841    C7 46 14 1E 00            mov         word ptr 0x14[bp],0x001e 
0846    89 86 7C FF               mov         word ptr -0x84[bp],ax 
084A    31 DB                     xor         bx,bx 
084C    89 96 7E FF               mov         word ptr -0x82[bp],dx 
0850    9A 00 00 00 00            call        far SoundController::~SoundController() 
0855    C7 46 14 12 00            mov         word ptr 0x14[bp],0x0012 
085A    9A 00 00 00 00            call        void far operator delete( void far * ) 
085F                          L$19:
085F    8B 5E 74                  mov         bx,word ptr 0x74[bp] 
0862    8E D9                     mov         ds,cx 
0864    8B 07                     mov         ax,word ptr [bx] 
0866    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0869    9A 00 00 00 00            call        void far operator delete( void far * ) 
086E    C7 46 14 12 00            mov         word ptr 0x14[bp],0x0012 
0873                          L$20:
0873    C7 46 14 11 00            mov         word ptr 0x14[bp],0x0011 
0878    8B 5E 42                  mov         bx,word ptr 0x42[bp] 
087B    8E DF                     mov         ds,di 
087D    89 7E 48                  mov         word ptr 0x48[bp],di 
0880    83 EB 0E                  sub         bx,0x000e 
0883    89 7E 7C                  mov         word ptr 0x7c[bp],di 
0886    8B 17                     mov         dx,word ptr [bx] 
0888    8B 47 02                  mov         ax,word ptr 0x2[bx] 
088B    89 5E 78                  mov         word ptr 0x78[bp],bx 
088E    89 D9                     mov         cx,bx 
0890    85 C0                     test        ax,ax 
0892    75 04                     jne         L$21 
0894    85 D2                     test        dx,dx 
0896    74 34                     je          L$25 
0898                          L$21:
0898    89 D6                     mov         si,dx 
089A    8E D8                     mov         ds,ax 
089C    83 3C 01                  cmp         word ptr [si],0x0001 
089F    74 03                     je          L$22 
08A1    E9 AC 01                  jmp         L$38 
08A4                          L$22:
08A4    8B 54 04                  mov         dx,word ptr 0x4[si] 
08A7    8B 7C 02                  mov         di,word ptr 0x2[si] 
08AA    85 D2                     test        dx,dx 
08AC    75 04                     jne         L$23 
08AE    85 FF                     test        di,di 
08B0    74 0B                     je          L$24 
08B2                          L$23:
08B2    8E DA                     mov         ds,dx 
08B4    BB 02 00                  mov         bx,0x0002 
08B7    C5 35                     lds         si,dword ptr [di] 
08B9    89 F8                     mov         ax,di 
08BB    FF 1C                     call        dword ptr [si] 
08BD                          L$24:
08BD    8E 5E 7C                  mov         ds,word ptr 0x7c[bp] 
08C0    89 CB                     mov         bx,cx 
08C2    8B 07                     mov         ax,word ptr [bx] 
08C4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
08C7    9A 00 00 00 00            call        void far operator delete( void far * ) 
08CC                          L$25:
08CC    8B 46 78                  mov         ax,word ptr 0x78[bp] 
08CF    8B 56 48                  mov         dx,word ptr 0x48[bp] 
08D2    31 DB                     xor         bx,bx 
08D4    2D 08 00                  sub         ax,0x0008 
08D7    C7 46 14 10 00            mov         word ptr 0x14[bp],0x0010 
08DC    9A 00 00 00 00            call        far TinyString::~TinyString() 
08E1    C7 46 14 0F 00            mov         word ptr 0x14[bp],0x000f 
08E6    8E DA                     mov         ds,dx 
08E8    89 C3                     mov         bx,ax 
08EA    89 D1                     mov         cx,dx 
08EC    83 EB 0A                  sub         bx,0x000a 
08EF    89 56 7E                  mov         word ptr 0x7e[bp],dx 
08F2    8B 17                     mov         dx,word ptr [bx] 
08F4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
08F7    89 5E 3C                  mov         word ptr 0x3c[bp],bx 
08FA    89 DF                     mov         di,bx 
08FC    85 C0                     test        ax,ax 
08FE    74 03                     je          L$27 
0900                          L$26:
0900    E9 7F 01                  jmp         L$42 
0903                          L$27:
0903    85 D2                     test        dx,dx 
0905    75 F9                     jne         L$26 
0907                          L$28:
0907    8B 5E 3C                  mov         bx,word ptr 0x3c[bp] 
090A    8E D9                     mov         ds,cx 
090C    C7 46 14 0E 00            mov         word ptr 0x14[bp],0x000e 
0911    8B 47 F8                  mov         ax,word ptr -0x8[bx] 
0914    8B 57 FA                  mov         dx,word ptr -0x6[bx] 
0917    83 EB 08                  sub         bx,0x0008 
091A    9A 00 00 00 00            call        void far operator delete []( void far * ) 
091F    8E D9                     mov         ds,cx 
0921    C7 46 14 0D 00            mov         word ptr 0x14[bp],0x000d 
0926    8B 47 F8                  mov         ax,word ptr -0x8[bx] 
0929    8B 57 FA                  mov         dx,word ptr -0x6[bx] 
092C    83 EB 10                  sub         bx,0x0010 
092F    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0934    C7 46 14 0C 00            mov         word ptr 0x14[bp],0x000c 
0939    8E D9                     mov         ds,cx 
093B    89 4E 68                  mov         word ptr 0x68[bp],cx 
093E    8B 07                     mov         ax,word ptr [bx] 
0940    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0943    83 EB 08                  sub         bx,0x0008 
0946    9A 00 00 00 00            call        void far operator delete []( void far * ) 
094B    89 DF                     mov         di,bx 
094D    C7 46 14 22 00            mov         word ptr 0x14[bp],0x0022 
0952    89 5E 16                  mov         word ptr 0x16[bp],bx 
0955    31 C0                     xor         ax,ax 
0957    89 4E 18                  mov         word ptr 0x18[bp],cx 
095A    88 46 1A                  mov         byte ptr 0x1a[bp],al 
095D    89 46 32                  mov         word ptr 0x32[bp],ax 
0960    31 C9                     xor         cx,cx 
0962                          L$29:
0962    8E 5E 68                  mov         ds,word ptr 0x68[bp] 
0965    8B 45 06                  mov         ax,word ptr 0x6[di] 
0968    3B 46 32                  cmp         ax,word ptr 0x32[bp] 
096B    7E 03                     jle         L$30 
096D    E9 5F 01                  jmp         L$46 
0970                          L$30:
0970    83 EF 08                  sub         di,0x0008 
0973    C7 46 14 0B 00            mov         word ptr 0x14[bp],0x000b 
0978    8B 45 08                  mov         ax,word ptr 0x8[di] 
097B    8B 55 0A                  mov         dx,word ptr 0xa[di] 
097E    31 C9                     xor         cx,cx 
0980    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0985    89 FE                     mov         si,di 
0987    8B 46 68                  mov         ax,word ptr 0x68[bp] 
098A    8B 56 68                  mov         dx,word ptr 0x68[bp] 
098D    C7 46 14 24 00            mov         word ptr 0x14[bp],0x0024 
0992    89 7E 16                  mov         word ptr 0x16[bp],di 
0995    89 46 40                  mov         word ptr 0x40[bp],ax 
0998    31 C0                     xor         ax,ax 
099A    89 56 18                  mov         word ptr 0x18[bp],dx 
099D    88 46 1A                  mov         byte ptr 0x1a[bp],al 
09A0    89 46 30                  mov         word ptr 0x30[bp],ax 
09A3                          L$31:
09A3    8E 5E 40                  mov         ds,word ptr 0x40[bp] 
09A6    8B 44 06                  mov         ax,word ptr 0x6[si] 
09A9    3B 46 30                  cmp         ax,word ptr 0x30[bp] 
09AC    7E 03                     jle         L$32 
09AE    E9 4D 01                  jmp         L$49 
09B1                          L$32:
09B1    C7 46 14 0A 00            mov         word ptr 0x14[bp],0x000a 
09B6    83 EE 08                  sub         si,0x0008 
09B9    31 FF                     xor         di,di 
09BB    8B 44 08                  mov         ax,word ptr 0x8[si] 
09BE    8B 54 0A                  mov         dx,word ptr 0xa[si] 
09C1    31 C9                     xor         cx,cx 
09C3    9A 00 00 00 00            call        void far operator delete []( void far * ) 
09C8    8B 56 40                  mov         dx,word ptr 0x40[bp] 
09CB    8B 46 40                  mov         ax,word ptr 0x40[bp] 
09CE    C7 46 14 27 00            mov         word ptr 0x14[bp],0x0027 
09D3    89 76 16                  mov         word ptr 0x16[bp],si 
09D6    89 56 4A                  mov         word ptr 0x4a[bp],dx 
09D9    31 D2                     xor         dx,dx 
09DB    89 46 18                  mov         word ptr 0x18[bp],ax 
09DE    88 56 1A                  mov         byte ptr 0x1a[bp],dl 
09E1                          L$33:
09E1    8E 5E 4A                  mov         ds,word ptr 0x4a[bp] 
09E4    8B 44 06                  mov         ax,word ptr 0x6[si] 
09E7    39 C7                     cmp         di,ax 
09E9    7C 6A                     jl          L$39 
09EB    C7 46 14 09 00            mov         word ptr 0x14[bp],0x0009 
09F0    83 EE 08                  sub         si,0x0008 
09F3    31 C9                     xor         cx,cx 
09F5    8B 44 08                  mov         ax,word ptr 0x8[si] 
09F8    8B 54 0A                  mov         dx,word ptr 0xa[si] 
09FB    31 FF                     xor         di,di 
09FD    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0A02    8B 56 4A                  mov         dx,word ptr 0x4a[bp] 
0A05    8B 46 4A                  mov         ax,word ptr 0x4a[bp] 
0A08    C7 46 14 2A 00            mov         word ptr 0x14[bp],0x002a 
0A0D    89 76 16                  mov         word ptr 0x16[bp],si 
0A10    89 56 6E                  mov         word ptr 0x6e[bp],dx 
0A13    31 D2                     xor         dx,dx 
0A15    89 46 18                  mov         word ptr 0x18[bp],ax 
0A18    88 56 1A                  mov         byte ptr 0x1a[bp],dl 
0A1B                          L$34:
0A1B    8E 5E 6E                  mov         ds,word ptr 0x6e[bp] 
0A1E    8B 44 06                  mov         ax,word ptr 0x6[si] 
0A21    39 C1                     cmp         cx,ax 
0A23    7D 33                     jge         L$40 
0A25    C5 1C                     lds         bx,dword ptr [si] 
0A27    01 FB                     add         bx,di 
0A29    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0A2C    8B 07                     mov         ax,word ptr [bx] 
0A2E    85 D2                     test        dx,dx 
0A30    75 29                     jne         L$41 
0A32    85 C0                     test        ax,ax 
0A34    75 25                     jne         L$41 
0A36    C7 46 14 2A 00            mov         word ptr 0x14[bp],0x002a 
0A3B    83 C7 04                  add         di,0x0004 
0A3E    41                        inc         cx 
0A3F    EB DA                     jmp         L$34 
0A41                          L$35:
0A41    FF 0C                     dec         word ptr [si] 
0A43    E9 1F FD                  jmp         L$10 
0A46                          L$36:
0A46    FF 0C                     dec         word ptr [si] 
0A48    E9 83 FD                  jmp         L$15 
0A4B                          L$37:
0A4B    FF 0C                     dec         word ptr [si] 
0A4D    E9 23 FE                  jmp         L$20 
0A50                          L$38:
0A50    FF 0C                     dec         word ptr [si] 
0A52    E9 77 FE                  jmp         L$25 
0A55                          L$39:
0A55    E9 E1 00                  jmp         L$52 
0A58                          L$40:
0A58    E9 17 01                  jmp         L$55 
0A5B                          L$41:
0A5B    C7 46 14 2B 00            mov         word ptr 0x14[bp],0x002b 
0A60    89 46 B8                  mov         word ptr -0x48[bp],ax 
0A63    31 DB                     xor         bx,bx 
0A65    89 56 BA                  mov         word ptr -0x46[bp],dx 
0A68    9A 00 00 00 00            call        far Enemy::~Enemy() 
0A6D    C7 46 14 2A 00            mov         word ptr 0x14[bp],0x002a 
0A72    9A 00 00 00 00            call        void far operator delete( void far * ) 
0A77    C7 46 14 2A 00            mov         word ptr 0x14[bp],0x002a 
0A7C    83 C7 04                  add         di,0x0004 
0A7F    41                        inc         cx 
0A80    EB 99                     jmp         L$34 
0A82                          L$42:
0A82    89 D6                     mov         si,dx 
0A84    8E D8                     mov         ds,ax 
0A86    83 3C 01                  cmp         word ptr [si],0x0001 
0A89    75 3F                     jne         L$45 
0A8B    8B 54 04                  mov         dx,word ptr 0x4[si] 
0A8E    8B 44 02                  mov         ax,word ptr 0x2[si] 
0A91    85 D2                     test        dx,dx 
0A93    75 04                     jne         L$43 
0A95    85 C0                     test        ax,ax 
0A97    74 1C                     je          L$44 
0A99                          L$43:
0A99    C7 46 14 20 00            mov         word ptr 0x14[bp],0x0020 
0A9E    89 46 CC                  mov         word ptr -0x34[bp],ax 
0AA1    31 DB                     xor         bx,bx 
0AA3    89 56 CE                  mov         word ptr -0x32[bp],dx 
0AA6    9A 00 00 00 00            call        far Physics::~Physics() 
0AAB    C7 46 14 0F 00            mov         word ptr 0x14[bp],0x000f 
0AB0    9A 00 00 00 00            call        void far operator delete( void far * ) 
0AB5                          L$44:
0AB5    8E 5E 7E                  mov         ds,word ptr 0x7e[bp] 
0AB8    8B 05                     mov         ax,word ptr [di] 
0ABA    8B 55 02                  mov         dx,word ptr 0x2[di] 
0ABD    9A 00 00 00 00            call        void far operator delete( void far * ) 
0AC2    C7 46 14 0F 00            mov         word ptr 0x14[bp],0x000f 
0AC7    E9 3D FE                  jmp         L$28 
0ACA                          L$45:
0ACA    FF 0C                     dec         word ptr [si] 
0ACC    E9 38 FE                  jmp         L$28 
0ACF                          L$46:
0ACF    C5 1D                     lds         bx,dword ptr [di] 
0AD1    01 CB                     add         bx,cx 
0AD3    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0AD6    8B 37                     mov         si,word ptr [bx] 
0AD8    85 D2                     test        dx,dx 
0ADA    75 04                     jne         L$47 
0ADC    85 F6                     test        si,si 
0ADE    74 15                     je          L$48 
0AE0                          L$47:
0AE0    8E DA                     mov         ds,dx 
0AE2    8B 5C 26                  mov         bx,word ptr 0x26[si] 
0AE5    89 F0                     mov         ax,si 
0AE7    89 5E 38                  mov         word ptr 0x38[bp],bx 
0AEA    8E 5C 28                  mov         ds,word ptr 0x28[si] 
0AED    8B 76 38                  mov         si,word ptr 0x38[bp] 
0AF0    BB 02 00                  mov         bx,0x0002 
0AF3    FF 1C                     call        dword ptr [si] 
0AF5                          L$48:
0AF5    FF 46 32                  inc         word ptr 0x32[bp] 
0AF8    83 C1 04                  add         cx,0x0004 
0AFB    E9 64 FE                  jmp         L$29 
0AFE                          L$49:
0AFE    C5 3C                     lds         di,dword ptr [si] 
0B00    01 CF                     add         di,cx 
0B02    8B 55 02                  mov         dx,word ptr 0x2[di] 
0B05    8B 05                     mov         ax,word ptr [di] 
0B07    85 D2                     test        dx,dx 
0B09    75 04                     jne         L$50 
0B0B    85 C0                     test        ax,ax 
0B0D    74 1C                     je          L$51 
0B0F                          L$50:
0B0F    C7 46 14 25 00            mov         word ptr 0x14[bp],0x0025 
0B14    89 46 A4                  mov         word ptr -0x5c[bp],ax 
0B17    31 DB                     xor         bx,bx 
0B19    89 56 A6                  mov         word ptr -0x5a[bp],dx 
0B1C    9A 00 00 00 00            call        far FireBall::~FireBall() 
0B21    C7 46 14 24 00            mov         word ptr 0x14[bp],0x0024 
0B26    9A 00 00 00 00            call        void far operator delete( void far * ) 
0B2B                          L$51:
0B2B    C7 46 14 24 00            mov         word ptr 0x14[bp],0x0024 
0B30    FF 46 30                  inc         word ptr 0x30[bp] 
0B33    83 C1 04                  add         cx,0x0004 
0B36    E9 6A FE                  jmp         L$31 
0B39                          L$52:
0B39    C5 1C                     lds         bx,dword ptr [si] 
0B3B    01 CB                     add         bx,cx 
0B3D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0B40    8B 07                     mov         ax,word ptr [bx] 
0B42    85 D2                     test        dx,dx 
0B44    75 04                     jne         L$53 
0B46    85 C0                     test        ax,ax 
0B48    74 1C                     je          L$54 
0B4A                          L$53:
0B4A    C7 46 14 28 00            mov         word ptr 0x14[bp],0x0028 
0B4F    89 46 90                  mov         word ptr -0x70[bp],ax 
0B52    31 DB                     xor         bx,bx 
0B54    89 56 92                  mov         word ptr -0x6e[bp],dx 
0B57    9A 00 00 00 00            call        far SeekerEnemy::~SeekerEnemy() 
0B5C    C7 46 14 27 00            mov         word ptr 0x14[bp],0x0027 
0B61    9A 00 00 00 00            call        void far operator delete( void far * ) 
0B66                          L$54:
0B66    C7 46 14 27 00            mov         word ptr 0x14[bp],0x0027 
0B6B    83 C1 04                  add         cx,0x0004 
0B6E    47                        inc         di 
0B6F    E9 6F FE                  jmp         L$33 
0B72                          L$55:
0B72    C7 46 14 08 00            mov         word ptr 0x14[bp],0x0008 
0B77    8B 04                     mov         ax,word ptr [si] 
0B79    8B 54 02                  mov         dx,word ptr 0x2[si] 
0B7C    83 EE 04                  sub         si,0x0004 
0B7F    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0B84    89 76 36                  mov         word ptr 0x36[bp],si 
0B87    89 76 72                  mov         word ptr 0x72[bp],si 
0B8A    8E 5E 6E                  mov         ds,word ptr 0x6e[bp] 
0B8D    C7 46 14 07 00            mov         word ptr 0x14[bp],0x0007 
0B92    8C DF                     mov         di,ds 
0B94    8C D9                     mov         cx,ds 
0B96    8B 54 02                  mov         dx,word ptr 0x2[si] 
0B99    8B 04                     mov         ax,word ptr [si] 
0B9B    85 D2                     test        dx,dx 
0B9D    75 04                     jne         L$56 
0B9F    85 C0                     test        ax,ax 
0BA1    74 3D                     je          L$60 
0BA3                          L$56:
0BA3    89 C3                     mov         bx,ax 
0BA5    8E DA                     mov         ds,dx 
0BA7    83 3F 01                  cmp         word ptr [bx],0x0001 
0BAA    74 03                     je          L$57 
0BAC    E9 BC 02                  jmp         L$95 
0BAF                          L$57:
0BAF    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0BB2    8B 77 02                  mov         si,word ptr 0x2[bx] 
0BB5    85 D2                     test        dx,dx 
0BB7    75 04                     jne         L$58 
0BB9    85 F6                     test        si,si 
0BBB    74 14                     je          L$59 
0BBD                          L$58:
0BBD    8E DA                     mov         ds,dx 
0BBF    8B 1C                     mov         bx,word ptr [si] 
0BC1    89 F0                     mov         ax,si 
0BC3    89 5E 38                  mov         word ptr 0x38[bp],bx 
0BC6    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0BC9    8B 76 38                  mov         si,word ptr 0x38[bp] 
0BCC    BB 02 00                  mov         bx,0x0002 
0BCF    FF 1C                     call        dword ptr [si] 
0BD1                          L$59:
0BD1    8B 5E 72                  mov         bx,word ptr 0x72[bp] 
0BD4    8E D9                     mov         ds,cx 
0BD6    8B 07                     mov         ax,word ptr [bx] 
0BD8    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0BDB    9A 00 00 00 00            call        void far operator delete( void far * ) 
0BE0                          L$60:
0BE0    C7 46 14 06 00            mov         word ptr 0x14[bp],0x0006 
0BE5    8B 5E 36                  mov         bx,word ptr 0x36[bp] 
0BE8    8E DF                     mov         ds,di 
0BEA    89 F9                     mov         cx,di 
0BEC    83 EB 04                  sub         bx,0x0004 
0BEF    89 7E 52                  mov         word ptr 0x52[bp],di 
0BF2    8B 17                     mov         dx,word ptr [bx] 
0BF4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0BF7    89 5E 3A                  mov         word ptr 0x3a[bp],bx 
0BFA    89 5E 3E                  mov         word ptr 0x3e[bp],bx 
0BFD    85 C0                     test        ax,ax 
0BFF    75 04                     jne         L$61 
0C01    85 D2                     test        dx,dx 
0C03    74 35                     je          L$65 
0C05                          L$61:
0C05    89 D6                     mov         si,dx 
0C07    8E D8                     mov         ds,ax 
0C09    83 3C 01                  cmp         word ptr [si],0x0001 
0C0C    74 03                     je          L$62 
0C0E    E9 5F 02                  jmp         L$96 
0C11                          L$62:
0C11    8B 54 04                  mov         dx,word ptr 0x4[si] 
0C14    8B 7C 02                  mov         di,word ptr 0x2[si] 
0C17    85 D2                     test        dx,dx 
0C19    75 04                     jne         L$63 
0C1B    85 FF                     test        di,di 
0C1D    74 0B                     je          L$64 
0C1F                          L$63:
0C1F    8E DA                     mov         ds,dx 
0C21    BB 02 00                  mov         bx,0x0002 
0C24    C5 35                     lds         si,dword ptr [di] 
0C26    89 F8                     mov         ax,di 
0C28    FF 1C                     call        dword ptr [si] 
0C2A                          L$64:
0C2A    8E 5E 52                  mov         ds,word ptr 0x52[bp] 
0C2D    8B 5E 3E                  mov         bx,word ptr 0x3e[bp] 
0C30    8B 07                     mov         ax,word ptr [bx] 
0C32    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0C35    9A 00 00 00 00            call        void far operator delete( void far * ) 
0C3A                          L$65:
0C3A    C7 46 14 05 00            mov         word ptr 0x14[bp],0x0005 
0C3F    8B 5E 3A                  mov         bx,word ptr 0x3a[bp] 
0C42    8E D9                     mov         ds,cx 
0C44    83 EB 04                  sub         bx,0x0004 
0C47    89 4E 76                  mov         word ptr 0x76[bp],cx 
0C4A    8B 17                     mov         dx,word ptr [bx] 
0C4C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0C4F    89 5E 6A                  mov         word ptr 0x6a[bp],bx 
0C52    89 5E 44                  mov         word ptr 0x44[bp],bx 
0C55    85 C0                     test        ax,ax 
0C57    75 04                     jne         L$66 
0C59    85 D2                     test        dx,dx 
0C5B    74 34                     je          L$70 
0C5D                          L$66:
0C5D    89 D6                     mov         si,dx 
0C5F    8E D8                     mov         ds,ax 
0C61    83 3C 01                  cmp         word ptr [si],0x0001 
0C64    74 03                     je          L$67 
0C66    E9 0C 02                  jmp         L$97 
0C69                          L$67:
0C69    8B 54 04                  mov         dx,word ptr 0x4[si] 
0C6C    8B 7C 02                  mov         di,word ptr 0x2[si] 
0C6F    85 D2                     test        dx,dx 
0C71    75 04                     jne         L$68 
0C73    85 FF                     test        di,di 
0C75    74 0B                     je          L$69 
0C77                          L$68:
0C77    8E DA                     mov         ds,dx 
0C79    BB 02 00                  mov         bx,0x0002 
0C7C    C5 35                     lds         si,dword ptr [di] 
0C7E    89 F8                     mov         ax,di 
0C80    FF 1C                     call        dword ptr [si] 
0C82                          L$69:
0C82    8B 5E 44                  mov         bx,word ptr 0x44[bp] 
0C85    8E D9                     mov         ds,cx 
0C87    8B 07                     mov         ax,word ptr [bx] 
0C89    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0C8C    9A 00 00 00 00            call        void far operator delete( void far * ) 
0C91                          L$70:
0C91    B8 04 00                  mov         ax,0x0004 
0C94    8E 5E 76                  mov         ds,word ptr 0x76[bp] 
0C97    8B 5E 6A                  mov         bx,word ptr 0x6a[bp] 
0C9A    89 46 14                  mov         word ptr 0x14[bp],ax 
0C9D    8C D9                     mov         cx,ds 
0C9F    29 C3                     sub         bx,ax 
0CA1    8C 5E 60                  mov         word ptr 0x60[bp],ds 
0CA4    89 5E 46                  mov         word ptr 0x46[bp],bx 
0CA7    89 5E 7A                  mov         word ptr 0x7a[bp],bx 
0CAA    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0CAD    8B 17                     mov         dx,word ptr [bx] 
0CAF    85 C0                     test        ax,ax 
0CB1    75 04                     jne         L$71 
0CB3    85 D2                     test        dx,dx 
0CB5    74 35                     je          L$75 
0CB7                          L$71:
0CB7    89 D6                     mov         si,dx 
0CB9    8E D8                     mov         ds,ax 
0CBB    83 3C 01                  cmp         word ptr [si],0x0001 
0CBE    74 03                     je          L$72 
0CC0    E9 B7 01                  jmp         L$98 
0CC3                          L$72:
0CC3    8B 54 04                  mov         dx,word ptr 0x4[si] 
0CC6    8B 7C 02                  mov         di,word ptr 0x2[si] 
0CC9    85 D2                     test        dx,dx 
0CCB    75 04                     jne         L$73 
0CCD    85 FF                     test        di,di 
0CCF    74 0B                     je          L$74 
0CD1                          L$73:
0CD1    8E DA                     mov         ds,dx 
0CD3    BB 02 00                  mov         bx,0x0002 
0CD6    C5 35                     lds         si,dword ptr [di] 
0CD8    89 F8                     mov         ax,di 
0CDA    FF 1C                     call        dword ptr [si] 
0CDC                          L$74:
0CDC    8E 5E 60                  mov         ds,word ptr 0x60[bp] 
0CDF    8B 5E 7A                  mov         bx,word ptr 0x7a[bp] 
0CE2    8B 07                     mov         ax,word ptr [bx] 
0CE4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0CE7    9A 00 00 00 00            call        void far operator delete( void far * ) 
0CEC                          L$75:
0CEC    C7 46 14 03 00            mov         word ptr 0x14[bp],0x0003 
0CF1    8B 5E 46                  mov         bx,word ptr 0x46[bp] 
0CF4    8E D9                     mov         ds,cx 
0CF6    83 EB 04                  sub         bx,0x0004 
0CF9    89 4E 4E                  mov         word ptr 0x4e[bp],cx 
0CFC    8B 07                     mov         ax,word ptr [bx] 
0CFE    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0D01    89 5E 4C                  mov         word ptr 0x4c[bp],bx 
0D04    89 5E 50                  mov         word ptr 0x50[bp],bx 
0D07    85 D2                     test        dx,dx 
0D09    75 04                     jne         L$76 
0D0B    85 C0                     test        ax,ax 
0D0D    74 34                     je          L$80 
0D0F                          L$76:
0D0F    89 C6                     mov         si,ax 
0D11    8E DA                     mov         ds,dx 
0D13    83 3C 01                  cmp         word ptr [si],0x0001 
0D16    74 03                     je          L$77 
0D18    E9 64 01                  jmp         L$99 
0D1B                          L$77:
0D1B    8B 54 04                  mov         dx,word ptr 0x4[si] 
0D1E    8B 7C 02                  mov         di,word ptr 0x2[si] 
0D21    85 D2                     test        dx,dx 
0D23    75 04                     jne         L$78 
0D25    85 FF                     test        di,di 
0D27    74 0B                     je          L$79 
0D29                          L$78:
0D29    8E DA                     mov         ds,dx 
0D2B    BB 02 00                  mov         bx,0x0002 
0D2E    C5 35                     lds         si,dword ptr [di] 
0D30    89 F8                     mov         ax,di 
0D32    FF 1C                     call        dword ptr [si] 
0D34                          L$79:
0D34    8B 5E 50                  mov         bx,word ptr 0x50[bp] 
0D37    8E D9                     mov         ds,cx 
0D39    8B 07                     mov         ax,word ptr [bx] 
0D3B    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0D3E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0D43                          L$80:
0D43    C7 46 14 02 00            mov         word ptr 0x14[bp],0x0002 
0D48    C5 5E 4C                  lds         bx,dword ptr 0x4c[bp] 
0D4B    83 EB 04                  sub         bx,0x0004 
0D4E    8C D9                     mov         cx,ds 
0D50    8C 5E 58                  mov         word ptr 0x58[bp],ds 
0D53    8B 17                     mov         dx,word ptr [bx] 
0D55    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0D58    89 5E 54                  mov         word ptr 0x54[bp],bx 
0D5B    89 5E 56                  mov         word ptr 0x56[bp],bx 
0D5E    85 C0                     test        ax,ax 
0D60    75 04                     jne         L$81 
0D62    85 D2                     test        dx,dx 
0D64    74 32                     je          L$85 
0D66                          L$81:
0D66    89 D6                     mov         si,dx 
0D68    8E D8                     mov         ds,ax 
0D6A    83 3C 01                  cmp         word ptr [si],0x0001 
0D6D    74 03                     je          L$82 
0D6F    E9 12 01                  jmp         L$100 
0D72                          L$82:
0D72    8B 54 04                  mov         dx,word ptr 0x4[si] 
0D75    8B 7C 02                  mov         di,word ptr 0x2[si] 
0D78    85 D2                     test        dx,dx 
0D7A    75 04                     jne         L$83 
0D7C    85 FF                     test        di,di 
0D7E    74 0B                     je          L$84 
0D80                          L$83:
0D80    8E DA                     mov         ds,dx 
0D82    BB 02 00                  mov         bx,0x0002 
0D85    C5 35                     lds         si,dword ptr [di] 
0D87    89 F8                     mov         ax,di 
0D89    FF 1C                     call        dword ptr [si] 
0D8B                          L$84:
0D8B    C5 5E 56                  lds         bx,dword ptr 0x56[bp] 
0D8E    8B 07                     mov         ax,word ptr [bx] 
0D90    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0D93    9A 00 00 00 00            call        void far operator delete( void far * ) 
0D98                          L$85:
0D98    C7 46 14 01 00            mov         word ptr 0x14[bp],0x0001 
0D9D    8B 5E 54                  mov         bx,word ptr 0x54[bp] 
0DA0    8E D9                     mov         ds,cx 
0DA2    83 EB 04                  sub         bx,0x0004 
0DA5    89 4E 5C                  mov         word ptr 0x5c[bp],cx 
0DA8    8B 17                     mov         dx,word ptr [bx] 
0DAA    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0DAD    89 5E 5A                  mov         word ptr 0x5a[bp],bx 
0DB0    89 5E 5E                  mov         word ptr 0x5e[bp],bx 
0DB3    85 C0                     test        ax,ax 
0DB5    75 04                     jne         L$86 
0DB7    85 D2                     test        dx,dx 
0DB9    74 34                     je          L$90 
0DBB                          L$86:
0DBB    89 D6                     mov         si,dx 
0DBD    8E D8                     mov         ds,ax 
0DBF    83 3C 01                  cmp         word ptr [si],0x0001 
0DC2    74 03                     je          L$87 
0DC4    E9 C2 00                  jmp         L$101 
0DC7                          L$87:
0DC7    8B 54 04                  mov         dx,word ptr 0x4[si] 
0DCA    8B 7C 02                  mov         di,word ptr 0x2[si] 
0DCD    85 D2                     test        dx,dx 
0DCF    75 04                     jne         L$88 
0DD1    85 FF                     test        di,di 
0DD3    74 0B                     je          L$89 
0DD5                          L$88:
0DD5    8E DA                     mov         ds,dx 
0DD7    BB 02 00                  mov         bx,0x0002 
0DDA    C5 35                     lds         si,dword ptr [di] 
0DDC    89 F8                     mov         ax,di 
0DDE    FF 1C                     call        dword ptr [si] 
0DE0                          L$89:
0DE0    8B 5E 5E                  mov         bx,word ptr 0x5e[bp] 
0DE3    8E D9                     mov         ds,cx 
0DE5    8B 07                     mov         ax,word ptr [bx] 
0DE7    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0DEA    9A 00 00 00 00            call        void far operator delete( void far * ) 
0DEF                          L$90:
0DEF    C7 46 14 00 00            mov         word ptr 0x14[bp],0x0000 
0DF4    C5 5E 5A                  lds         bx,dword ptr 0x5a[bp] 
0DF7    83 EB 04                  sub         bx,0x0004 
0DFA    8C 5E 64                  mov         word ptr 0x64[bp],ds 
0DFD    8C 5E 66                  mov         word ptr 0x66[bp],ds 
0E00    8B 07                     mov         ax,word ptr [bx] 
0E02    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0E05    89 5E 62                  mov         word ptr 0x62[bp],bx 
0E08    89 D9                     mov         cx,bx 
0E0A    85 D2                     test        dx,dx 
0E0C    75 04                     jne         L$91 
0E0E    85 C0                     test        ax,ax 
0E10    74 32                     je          L$94 
0E12                          L$91:
0E12    89 C6                     mov         si,ax 
0E14    8E DA                     mov         ds,dx 
0E16    83 3C 01                  cmp         word ptr [si],0x0001 
0E19    75 73                     jne         L$102 
0E1B    8B 54 04                  mov         dx,word ptr 0x4[si] 
0E1E    8B 7C 02                  mov         di,word ptr 0x2[si] 
0E21    85 D2                     test        dx,dx 
0E23    75 04                     jne         L$92 
0E25    85 FF                     test        di,di 
0E27    74 0C                     je          L$93 
0E29                          L$92:
0E29    8E DA                     mov         ds,dx 
0E2B    BB 02 00                  mov         bx,0x0002 
0E2E    C5 75 1E                  lds         si,dword ptr 0x1e[di] 
0E31    89 F8                     mov         ax,di 
0E33    FF 1C                     call        dword ptr [si] 
0E35                          L$93:
0E35    8E 5E 66                  mov         ds,word ptr 0x66[bp] 
0E38    89 CB                     mov         bx,cx 
0E3A    8B 07                     mov         ax,word ptr [bx] 
0E3C    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0E3F    9A 00 00 00 00            call        void far operator delete( void far * ) 
0E44                          L$94:
0E44    8B 56 62                  mov         dx,word ptr 0x62[bp] 
0E47    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0E4A    C7 46 14 00 00            mov         word ptr 0x14[bp],0x0000 
0E4F    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
0E53    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
0E56    83 EA 04                  sub         dx,0x0004 
0E59    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
0E5D    89 D0                     mov         ax,dx 
0E5F    8B 56 64                  mov         dx,word ptr 0x64[bp] 
0E62    8D A6 80 00               lea         sp,0x80[bp] 
0E66    5D                        pop         bp 
0E67    5F                        pop         di 
0E68    5E                        pop         si 
0E69    59                        pop         cx 
0E6A    CB                        retf        
0E6B                          L$95:
0E6B    FF 0F                     dec         word ptr [bx] 
0E6D    E9 70 FD                  jmp         L$60 
0E70                          L$96:
0E70    FF 0C                     dec         word ptr [si] 
0E72    E9 C5 FD                  jmp         L$65 
0E75                          L$97:
0E75    FF 0C                     dec         word ptr [si] 
0E77    E9 17 FE                  jmp         L$70 
0E7A                          L$98:
0E7A    FF 0C                     dec         word ptr [si] 
0E7C    E9 6D FE                  jmp         L$75 
0E7F                          L$99:
0E7F    FF 0C                     dec         word ptr [si] 
0E81    E9 BF FE                  jmp         L$80 
0E84                          L$100:
0E84    FF 0C                     dec         word ptr [si] 
0E86    E9 0F FF                  jmp         L$85 
0E89                          L$101:
0E89    FF 0C                     dec         word ptr [si] 
0E8B    E9 61 FF                  jmp         L$90 
0E8E                          L$102:
0E8E    FF 0C                     dec         word ptr [si] 
0E90    EB B2                     jmp         L$94 

Routine Size: 2030 bytes,    Routine Base: game_TEXT + 06A4

0E92                          void far Game::reloadCurrentLevel():
0E92    53                        push        bx 
0E93    51                        push        cx 
0E94    56                        push        si 
0E95    55                        push        bp 
0E96    89 E5                     mov         bp,sp 
0E98    83 EC 10                  sub         sp,0x0010 
0E9B    89 C6                     mov         si,ax 
0E9D    8E DA                     mov         ds,dx 
0E9F    8D 5E F0                  lea         bx,-0x10[bp] 
0EA2    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
0EA7    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
0EAC    C7 46 F8 9C 02            mov         word ptr -0x8[bp],offset L$434 
0EB1    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
0EB6    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0EBB    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0EBF    B9 02 00                  mov         cx,0x0002 
0EC2    89 46 F0                  mov         word ptr -0x10[bp],ax 
0EC5    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0EC9    36 89 1E 00 00            mov         word ptr ss:__wint_thread_data,bx 
0ECE    89 46 F2                  mov         word ptr -0xe[bp],ax 
0ED1    89 F0                     mov         ax,si 
0ED3    8B 5C 6A                  mov         bx,word ptr 0x6a[si] 
0ED6    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0EDB    0E                        push        cs 
0EDC    E8 00 00                  call        void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ) 
0EDF    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
0EE2    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
0EE6    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0EE9    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
0EED    89 EC                     mov         sp,bp 
0EEF    5D                        pop         bp 
0EF0    5E                        pop         si 
0EF1    59                        pop         cx 
0EF2    5B                        pop         bx 
0EF3    CB                        retf        

Routine Size: 98 bytes,    Routine Base: game_TEXT + 0E92

0EF4                          bool far fileExists( char const far * ):
0EF4    53                        push        bx 
0EF5    51                        push        cx 
0EF6    BB 09 00                  mov         bx,offset L$558 
0EF9    B9 00 00                  mov         cx,game_DATA2 
0EFC    9A 00 00 00 00            call        fopen_ 
0F01    85 D2                     test        dx,dx 
0F03    75 09                     jne         L$103 
0F05    85 C0                     test        ax,ax 
0F07    75 05                     jne         L$103 
0F09    30 C0                     xor         al,al 
0F0B    59                        pop         cx 
0F0C    5B                        pop         bx 
0F0D    CB                        retf        
0F0E                          L$103:
0F0E    9A 00 00 00 00            call        fclose_ 
0F13    B0 01                     mov         al,0x01 
0F15    59                        pop         cx 
0F16    5B                        pop         bx 
0F17    CB                        retf        

Routine Size: 36 bytes,    Routine Base: game_TEXT + 0EF4

0F18                          void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ):
0F18    56                        push        si 
0F19    57                        push        di 
0F1A    55                        push        bp 
0F1B    89 E5                     mov         bp,sp 
0F1D    81 EC EA 03               sub         sp,0x03ea 
0F21    50                        push        ax 
0F22    52                        push        dx 
0F23    53                        push        bx 
0F24    81 ED E6 01               sub         bp,0x01e6 
0F28    88 8E E4 01               mov         byte ptr 0x1e4[bp],cl 
0F2C    8D 96 76 FF               lea         dx,-0x8a[bp] 
0F30    C7 86 7A FF 00 00         mov         word ptr -0x86[bp],offset __wcpp_4_fs_handler_rtn__ 
0F36    C7 86 7C FF 00 00         mov         word ptr -0x84[bp],seg __wcpp_4_fs_handler_rtn__ 
0F3C    C7 86 7E FF 9E 02         mov         word ptr -0x82[bp],offset L$435 
0F42    C7 46 80 00 00            mov         word ptr -0x80[bp],game_DATA1 
0F47    C7 46 82 00 00            mov         word ptr -0x7e[bp],0x0000 
0F4C    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0F50    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
0F54    89 86 76 FF               mov         word ptr -0x8a[bp],ax 
0F58    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0F5D    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0F61    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0F66    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
0F6A    89 86 78 FF               mov         word ptr -0x88[bp],ax 
0F6E    8B 47 6A                  mov         ax,word ptr 0x6a[bx] 
0F71    89 86 C6 01               mov         word ptr 0x1c6[bp],ax 
0F75    8B 86 F6 FD               mov         ax,word ptr -0x20a[bp] 
0F79    89 47 6A                  mov         word ptr 0x6a[bx],ax 
0F7C    8A 47 6B                  mov         al,byte ptr 0x6b[bx] 
0F7F    98                        cbw         
0F80    50                        push        ax 
0F81    8A 47 6A                  mov         al,byte ptr 0x6a[bx] 
0F84    98                        cbw         
0F85    50                        push        ax 
0F86    89 D8                     mov         ax,bx 
0F88    8C DA                     mov         dx,ds 
0F8A    05 66 00                  add         ax,0x0066 
0F8D    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
0F92    52                        push        dx 
0F93    50                        push        ax 
0F94    8D 96 66 FF               lea         dx,-0x9a[bp] 
0F98    16                        push        ss 
0F99    B9 00 00                  mov         cx,game_DATA2 
0F9C    52                        push        dx 
0F9D    BB 0C 00                  mov         bx,offset L$559 
0FA0    9A 00 00 00 00            call        sprintf_ 
0FA5    8D 46 54                  lea         ax,0x54[bp] 
0FA8    83 C4 0C                  add         sp,0x000c 
0FAB    8C D2                     mov         dx,ss 
0FAD    9A 00 00 00 00            call        far TinyString::TinyString( char const far * ) 
0FB2    8D 9E 66 FF               lea         bx,-0x9a[bp] 
0FB6    52                        push        dx 
0FB7    8C D1                     mov         cx,ss 
0FB9    50                        push        ax 
0FBA    8C D2                     mov         dx,ss 
0FBC    8D 46 50                  lea         ax,0x50[bp] 
0FBF    C7 46 82 01 00            mov         word ptr -0x7e[bp],0x0001 
0FC4    9A 00 00 00 00            call        TinyString far operator +( char const far *, TinyString const far & ) 
0FC9    80 4E 84 01               or          byte ptr -0x7c[bp],0x01 
0FCD    8D 46 54                  lea         ax,0x54[bp] 
0FD0    8C D2                     mov         dx,ss 
0FD2    31 DB                     xor         bx,bx 
0FD4    C7 46 82 00 00            mov         word ptr -0x7e[bp],0x0000 
0FD9    9A 00 00 00 00            call        far TinyString::~TinyString() 
0FDE    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
0FE2    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
0FE6    C7 46 82 03 00            mov         word ptr -0x7e[bp],0x0003 
0FEB    80 BF 9C 00 01            cmp         byte ptr 0x9c[bx],0x01 
0FF0    75 03                     jne         L$104 
0FF2    E9 09 0D                  jmp         L$185 
0FF5                          L$104:
0FF5    80 66 84 FE               and         byte ptr -0x7c[bp],0xfe 
0FF9    B8 F8 FF                  mov         ax,0xfff8 
0FFC    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
1000    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
1004    50                        push        ax 
1005    8D 56 48                  lea         dx,0x48[bp] 
1008    50                        push        ax 
1009    B8 10 00                  mov         ax,0x0010 
100C    8B 5C 08                  mov         bx,word ptr 0x8[si] 
100F    50                        push        ax 
1010    89 5E 48                  mov         word ptr 0x48[bp],bx 
1013    50                        push        ax 
1014    8B 44 0A                  mov         ax,word ptr 0xa[si] 
1017    16                        push        ss 
1018    89 46 4A                  mov         word ptr 0x4a[bp],ax 
101B    8E D8                     mov         ds,ax 
101D    52                        push        dx 
101E    8D 46 50                  lea         ax,0x50[bp] 
1021    FF 07                     inc         word ptr [bx] 
1023    8C D2                     mov         dx,ss 
1025    C7 46 82 0A 00            mov         word ptr -0x7e[bp],0x000a 
102A    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
102F    89 C3                     mov         bx,ax 
1031    89 D1                     mov         cx,dx 
1033    8D 86 FC FD               lea         ax,-0x204[bp] 
1037    8C D2                     mov         dx,ss 
1039    83 C6 08                  add         si,0x0008 
103C    9A 00 00 00 00            call        far Level::Level( char const far *, tnd::shared_ptr<ImageBase far >, short, short, short, short ) 
1041    80 4E 84 01               or          byte ptr -0x7c[bp],0x01 
1045    C7 46 82 08 00            mov         word ptr -0x7e[bp],0x0008 
104A    83 7E 4A 00               cmp         word ptr 0x4a[bp],0x0000 
104E    75 06                     jne         L$105 
1050    83 7E 48 00               cmp         word ptr 0x48[bp],0x0000 
1054    74 2F                     je          L$109 
1056                          L$105:
1056    C5 5E 48                  lds         bx,dword ptr 0x48[bp] 
1059    83 3F 01                  cmp         word ptr [bx],0x0001 
105C    74 03                     je          L$106 
105E    E9 28 0D                  jmp         L$188 
1061                          L$106:
1061    8B 57 04                  mov         dx,word ptr 0x4[bx] 
1064    8B 7F 02                  mov         di,word ptr 0x2[bx] 
1067    85 D2                     test        dx,dx 
1069    75 04                     jne         L$107 
106B    85 FF                     test        di,di 
106D    74 0B                     je          L$108 
106F                          L$107:
106F    8E DA                     mov         ds,dx 
1071    BB 02 00                  mov         bx,0x0002 
1074    C5 35                     lds         si,dword ptr [di] 
1076    89 F8                     mov         ax,di 
1078    FF 1C                     call        dword ptr [si] 
107A                          L$108:
107A    8B 46 48                  mov         ax,word ptr 0x48[bp] 
107D    8B 56 4A                  mov         dx,word ptr 0x4a[bp] 
1080    9A 00 00 00 00            call        void far operator delete( void far * ) 
1085                          L$109:
1085    C7 46 82 08 00            mov         word ptr -0x7e[bp],0x0008 
108A    8B 86 9A FE               mov         ax,word ptr -0x166[bp] 
108E    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
1092    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1096    8B BE FA FD               mov         di,word ptr -0x206[bp] 
109A    81 C3 96 00               add         bx,0x0096 
109E    98                        cbw         
109F    C5 37                     lds         si,dword ptr [bx] 
10A1    89 C3                     mov         bx,ax 
10A3    8B 4C 02                  mov         cx,word ptr 0x2[si] 
10A6    8B 54 04                  mov         dx,word ptr 0x4[si] 
10A9    89 C8                     mov         ax,cx 
10AB    83 C7 0C                  add         di,0x000c 
10AE    9A 00 00 00 00            call        void far MusicController::playMusic( SongIndex ) 
10B3    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
10B7    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
10BB    8E D8                     mov         ds,ax 
10BD    B9 00 00                  mov         cx,game_DATA2 
10C0    C5 1D                     lds         bx,dword ptr [di] 
10C2    89 86 16 01               mov         word ptr 0x116[bp],ax 
10C6    8B 47 02                  mov         ax,word ptr 0x2[bx] 
10C9    8B 57 04                  mov         dx,word ptr 0x4[bx] 
10CC    BB 18 00                  mov         bx,offset L$561 
10CF    83 C6 5C                  add         si,0x005c 
10D2    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
10D7    8E 86 F8 FD               mov         es,word ptr -0x208[bp] 
10DB    80 BE E4 01 02            cmp         byte ptr 0x1e4[bp],0x02 
10E0    74 03                     je          L$110 
10E2    E9 A9 0C                  jmp         L$189 
10E5                          L$110:
10E5    8D 96 CA 01               lea         dx,0x1ca[bp] 
10E9    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
10ED    16                        push        ss 
10EE    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
10F2    52                        push        dx 
10F3    8B 47 64                  mov         ax,word ptr 0x64[bx] 
10F6    8D 96 A0 00               lea         dx,0xa0[bp] 
10FA    16                        push        ss 
10FB    C5 1C                     lds         bx,dword ptr [si] 
10FD    52                        push        dx 
10FE    8B 57 02                  mov         dx,word ptr 0x2[bx] 
1101    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
1104    89 C3                     mov         bx,ax 
1106    89 D0                     mov         ax,dx 
1108    89 CA                     mov         dx,cx 
110A    9A 00 00 00 00            call        void far Physics::getActorPos( int, short far &, short far & ) 
110F                          L$111:
110F    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
1113    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
1117    31 FF                     xor         di,di 
1119    83 C6 24                  add         si,0x0024 
111C    89 BE AE 01               mov         word ptr 0x1ae[bp],di 
1120                          L$112:
1120    8E D9                     mov         ds,cx 
1122    8B 44 06                  mov         ax,word ptr 0x6[si] 
1125    39 C7                     cmp         di,ax 
1127    7C 6B                     jl          L$114 
1129    C7 44 06 00 00            mov         word ptr 0x6[si],0x0000 
112E    8D 9E 38 FE               lea         bx,-0x1c8[bp] 
1132    8B 86 3E FE               mov         ax,word ptr -0x1c2[bp] 
1136    B1 03                     mov         cl,0x03 
1138    89 46 12                  mov         word ptr 0x12[bp],ax 
113B    89 46 14                  mov         word ptr 0x14[bp],ax 
113E    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
1141    89 9E C2 00               mov         word ptr 0xc2[bp],bx 
1145    50                        push        ax 
1146    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1149    8B 9E 3E FE               mov         bx,word ptr -0x1c2[bp] 
114D    50                        push        ax 
114E    89 D8                     mov         ax,bx 
1150    D3 E0                     shl         ax,cl 
1152    8C 96 28 01               mov         word ptr 0x128[bp],ss 
1156    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
115B    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1160    8B 9E C2 00               mov         bx,word ptr 0xc2[bp] 
1164    89 46 0E                  mov         word ptr 0xe[bp],ax 
1167    89 56 10                  mov         word ptr 0x10[bp],dx 
116A    31 C9                     xor         cx,cx 
116C    31 C0                     xor         ax,ax 
116E                          L$113:
116E    8E 9E 28 01               mov         ds,word ptr 0x128[bp] 
1172    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1175    39 D1                     cmp         cx,dx 
1177    7D 1E                     jge         L$115 
1179    8B 7E 0E                  mov         di,word ptr 0xe[bp] 
117C    89 DE                     mov         si,bx 
117E    41                        inc         cx 
117F    8B 34                     mov         si,word ptr [si] 
1181    01 C7                     add         di,ax 
1183    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
1186    01 C6                     add         si,ax 
1188    8E 46 10                  mov         es,word ptr 0x10[bp] 
118B    05 08 00                  add         ax,0x0008 
118E    A5                        movsw       
118F    A5                        movsw       
1190    A5                        movsw       
1191    A5                        movsw       
1192    EB DA                     jmp         L$113 
1194                          L$114:
1194    E9 CF 0C                  jmp         L$197 
1197                          L$115:
1197    C7 46 82 0E 00            mov         word ptr -0x7e[bp],0x000e 
119C    C7 86 C6 00 00 00         mov         word ptr 0xc6[bp],0x0000 
11A2    83 7E 14 00               cmp         word ptr 0x14[bp],0x0000 
11A6    7F 03                     jg          L$116 
11A8    E9 CF 01                  jmp         L$128 
11AB                          L$116:
11AB    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
11AF    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
11B3    83 C3 24                  add         bx,0x0024 
11B6    C7 86 B0 01 00 00         mov         word ptr 0x1b0[bp],0x0000 
11BC    89 9E 86 01               mov         word ptr 0x186[bp],bx 
11C0    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
11C4    89 86 88 01               mov         word ptr 0x188[bp],ax 
11C8    83 C3 10                  add         bx,0x0010 
11CB    89 86 A2 00               mov         word ptr 0xa2[bp],ax 
11CF    89 9E 32 01               mov         word ptr 0x132[bp],bx 
11D3                          L$117:
11D3    B8 12 00                  mov         ax,0x0012 
11D6    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
11DB    89 C6                     mov         si,ax 
11DD    85 D2                     test        dx,dx 
11DF    75 04                     jne         L$118 
11E1    85 C0                     test        ax,ax 
11E3    74 6C                     je          L$119 
11E5                          L$118:
11E5    C7 46 82 0F 00            mov         word ptr -0x7e[bp],0x000f 
11EA    8E 9E A2 00               mov         ds,word ptr 0xa2[bp] 
11EE    8B 9E 32 01               mov         bx,word ptr 0x132[bp] 
11F2    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
11F6    8B 1F                     mov         bx,word ptr [bx] 
11F8    89 5E 78                  mov         word ptr 0x78[bp],bx 
11FB    8B 9E 32 01               mov         bx,word ptr 0x132[bp] 
11FF    8B 47 02                  mov         ax,word ptr 0x2[bx] 
1202    8B 5E 78                  mov         bx,word ptr 0x78[bp] 
1205    89 46 7A                  mov         word ptr 0x7a[bp],ax 
1208    8E D8                     mov         ds,ax 
120A    16                        push        ss 
120B    FF 07                     inc         word ptr [bx] 
120D    8D 5E 78                  lea         bx,0x78[bp] 
1210    53                        push        bx 
1211    C5 5E 0E                  lds         bx,dword ptr 0xe[bp] 
1214    03 9E B0 01               add         bx,word ptr 0x1b0[bp] 
1218    C7 46 82 11 00            mov         word ptr -0x7e[bp],0x0011 
121D    8B 07                     mov         ax,word ptr [bx] 
121F    89 46 26                  mov         word ptr 0x26[bp],ax 
1222    8B 47 02                  mov         ax,word ptr 0x2[bx] 
1225    89 46 28                  mov         word ptr 0x28[bp],ax 
1228    8B 47 04                  mov         ax,word ptr 0x4[bx] 
122B    89 46 2A                  mov         word ptr 0x2a[bp],ax 
122E    8C D1                     mov         cx,ss 
1230    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1233    8D 5E 26                  lea         bx,0x26[bp] 
1236    89 46 2C                  mov         word ptr 0x2c[bp],ax 
1239    89 B6 80 00               mov         word ptr 0x80[bp],si 
123D    89 F0                     mov         ax,si 
123F    89 96 82 00               mov         word ptr 0x82[bp],dx 
1243    9A 00 00 00 00            call        far Enemy::Enemy( Rectangle, tnd::shared_ptr<Animation far > ) 
1248    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
124C    C7 46 82 11 00            mov         word ptr -0x7e[bp],0x0011 
1251                          L$119:
1251    8B B6 86 01               mov         si,word ptr 0x186[bp] 
1255    8D 9E 88 00               lea         bx,0x88[bp] 
1259    89 86 88 00               mov         word ptr 0x88[bp],ax 
125D    89 96 8A 00               mov         word ptr 0x8a[bp],dx 
1261    8B 86 88 01               mov         ax,word ptr 0x188[bp] 
1265    89 9E D6 01               mov         word ptr 0x1d6[bp],bx 
1269    8E D8                     mov         ds,ax 
126B    89 F3                     mov         bx,si 
126D    89 86 D4 01               mov         word ptr 0x1d4[bp],ax 
1271    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1274    40                        inc         ax 
1275    8C 96 9E 00               mov         word ptr 0x9e[bp],ss 
1279    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
127C    7E 73                     jle         L$122 
127E    D1 E0                     shl         ax,0x01 
1280    D1 E0                     shl         ax,0x01 
1282    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1287    8E 9E 88 01               mov         ds,word ptr 0x188[bp] 
128B    89 C7                     mov         di,ax 
128D    89 86 3C 01               mov         word ptr 0x13c[bp],ax 
1291    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1294    40                        inc         ax 
1295    89 96 9A 00               mov         word ptr 0x9a[bp],dx 
1299    89 47 04                  mov         word ptr 0x4[bx],ax 
129C    31 C0                     xor         ax,ax 
129E    83 7F 06 00               cmp         word ptr 0x6[bx],0x0000 
12A2    7E 2E                     jle         L$121 
12A4    89 FB                     mov         bx,di 
12A6    8E C2                     mov         es,dx 
12A8                          L$120:
12A8    89 C7                     mov         di,ax 
12AA    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
12AE    D1 E7                     shl         di,0x01 
12B0    8B 14                     mov         dx,word ptr [si] 
12B2    D1 E7                     shl         di,0x01 
12B4    8E 5C 02                  mov         ds,word ptr 0x2[si] 
12B7    01 D7                     add         di,dx 
12B9    8B 0D                     mov         cx,word ptr [di] 
12BB    8B 55 02                  mov         dx,word ptr 0x2[di] 
12BE    26 89 0F                  mov         word ptr es:[bx],cx 
12C1    40                        inc         ax 
12C2    26 89 57 02               mov         word ptr es:0x2[bx],dx 
12C6    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
12CA    83 C3 04                  add         bx,0x0004 
12CD    3B 44 06                  cmp         ax,word ptr 0x6[si] 
12D0    7C D6                     jl          L$120 
12D2                          L$121:
12D2    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
12D6    8B 04                     mov         ax,word ptr [si] 
12D8    8B 54 02                  mov         dx,word ptr 0x2[si] 
12DB    9A 00 00 00 00            call        void far operator delete []( void far * ) 
12E0    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
12E4    8B 86 3C 01               mov         ax,word ptr 0x13c[bp] 
12E8    89 04                     mov         word ptr [si],ax 
12EA    8B 86 9A 00               mov         ax,word ptr 0x9a[bp] 
12EE    89 44 02                  mov         word ptr 0x2[si],ax 
12F1                          L$122:
12F1    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
12F5    8B BE D6 01               mov         di,word ptr 0x1d6[bp] 
12F9    8B 5C 06                  mov         bx,word ptr 0x6[si] 
12FC    8B 04                     mov         ax,word ptr [si] 
12FE    D1 E3                     shl         bx,0x01 
1300    8E 5C 02                  mov         ds,word ptr 0x2[si] 
1303    D1 E3                     shl         bx,0x01 
1305    8E 86 9E 00               mov         es,word ptr 0x9e[bp] 
1309    01 C3                     add         bx,ax 
130B    26 8B 05                  mov         ax,word ptr es:[di] 
130E    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
1312    89 07                     mov         word ptr [bx],ax 
1314    89 57 02                  mov         word ptr 0x2[bx],dx 
1317    8E 9E D4 01               mov         ds,word ptr 0x1d4[bp] 
131B    FF 44 06                  inc         word ptr 0x6[si] 
131E    C7 46 82 10 00            mov         word ptr -0x7e[bp],0x0010 
1323    83 7E 7A 00               cmp         word ptr 0x7a[bp],0x0000 
1327    75 06                     jne         L$123 
1329    83 7E 78 00               cmp         word ptr 0x78[bp],0x0000 
132D    74 31                     je          L$127 
132F                          L$123:
132F    C5 5E 78                  lds         bx,dword ptr 0x78[bp] 
1332    83 3F 01                  cmp         word ptr [bx],0x0001 
1335    74 03                     je          L$124 
1337    E9 6E 0B                  jmp         L$200 
133A                          L$124:
133A    89 DE                     mov         si,bx 
133C    8B 57 04                  mov         dx,word ptr 0x4[bx] 
133F    8B 74 02                  mov         si,word ptr 0x2[si] 
1342    85 D2                     test        dx,dx 
1344    75 04                     jne         L$125 
1346    85 F6                     test        si,si 
1348    74 0B                     je          L$126 
134A                          L$125:
134A    8E DA                     mov         ds,dx 
134C    BB 02 00                  mov         bx,0x0002 
134F    C5 3C                     lds         di,dword ptr [si] 
1351    89 F0                     mov         ax,si 
1353    FF 1D                     call        dword ptr [di] 
1355                          L$126:
1355    8B 46 78                  mov         ax,word ptr 0x78[bp] 
1358    8B 56 7A                  mov         dx,word ptr 0x7a[bp] 
135B    9A 00 00 00 00            call        void far operator delete( void far * ) 
1360                          L$127:
1360    FF 86 C6 00               inc         word ptr 0xc6[bp] 
1364    C7 46 82 0E 00            mov         word ptr -0x7e[bp],0x000e 
1369    8B 86 C6 00               mov         ax,word ptr 0xc6[bp] 
136D    83 86 B0 01 08            add         word ptr 0x1b0[bp],0x0008 
1372    3B 46 14                  cmp         ax,word ptr 0x14[bp] 
1375    7D 03                     jge         L$128 
1377    E9 59 FE                  jmp         L$117 
137A                          L$128:
137A    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
137E    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
1382    C7 86 40 01 00 00         mov         word ptr 0x140[bp],0x0000 
1388    31 FF                     xor         di,di 
138A    83 C6 2C                  add         si,0x002c 
138D                          L$129:
138D    8E D9                     mov         ds,cx 
138F    8B 44 06                  mov         ax,word ptr 0x6[si] 
1392    3B 86 40 01               cmp         ax,word ptr 0x140[bp] 
1396    7F 6B                     jg          L$131 
1398    C7 44 06 00 00            mov         word ptr 0x6[si],0x0000 
139D    8D 9E 68 FE               lea         bx,-0x198[bp] 
13A1    8B 86 6E FE               mov         ax,word ptr -0x192[bp] 
13A5    B1 03                     mov         cl,0x03 
13A7    89 46 BA                  mov         word ptr -0x46[bp],ax 
13AA    89 46 BC                  mov         word ptr -0x44[bp],ax 
13AD    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
13B0    89 9E 98 00               mov         word ptr 0x98[bp],bx 
13B4    50                        push        ax 
13B5    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
13B8    8B 9E 6E FE               mov         bx,word ptr -0x192[bp] 
13BC    50                        push        ax 
13BD    89 D8                     mov         ax,bx 
13BF    D3 E0                     shl         ax,cl 
13C1    8C 96 9C 00               mov         word ptr 0x9c[bp],ss 
13C5    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
13CA    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
13CF    8B 9E 98 00               mov         bx,word ptr 0x98[bp] 
13D3    89 46 B6                  mov         word ptr -0x4a[bp],ax 
13D6    89 56 B8                  mov         word ptr -0x48[bp],dx 
13D9    31 C9                     xor         cx,cx 
13DB    31 C0                     xor         ax,ax 
13DD                          L$130:
13DD    8E 9E 9C 00               mov         ds,word ptr 0x9c[bp] 
13E1    8B 57 06                  mov         dx,word ptr 0x6[bx] 
13E4    39 D1                     cmp         cx,dx 
13E6    7D 1E                     jge         L$132 
13E8    8B 7E B6                  mov         di,word ptr -0x4a[bp] 
13EB    89 DE                     mov         si,bx 
13ED    41                        inc         cx 
13EE    8B 34                     mov         si,word ptr [si] 
13F0    01 C7                     add         di,ax 
13F2    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
13F5    01 C6                     add         si,ax 
13F7    8E 46 B8                  mov         es,word ptr -0x48[bp] 
13FA    05 08 00                  add         ax,0x0008 
13FD    A5                        movsw       
13FE    A5                        movsw       
13FF    A5                        movsw       
1400    A5                        movsw       
1401    EB DA                     jmp         L$130 
1403                          L$131:
1403    E9 A7 0A                  jmp         L$201 
1406                          L$132:
1406    C7 46 82 15 00            mov         word ptr -0x7e[bp],0x0015 
140B    C7 86 AC 00 00 00         mov         word ptr 0xac[bp],0x0000 
1411    83 7E BC 00               cmp         word ptr -0x44[bp],0x0000 
1415    7F 03                     jg          L$133 
1417    E9 CF 01                  jmp         L$145 
141A                          L$133:
141A    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
141E    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
1422    83 C3 2C                  add         bx,0x002c 
1425    C7 86 B2 01 00 00         mov         word ptr 0x1b2[bp],0x0000 
142B    89 9E 8A 01               mov         word ptr 0x18a[bp],bx 
142F    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1433    89 86 8C 01               mov         word ptr 0x18c[bp],ax 
1437    83 C3 14                  add         bx,0x0014 
143A    89 86 DC 01               mov         word ptr 0x1dc[bp],ax 
143E    89 9E D6 00               mov         word ptr 0xd6[bp],bx 
1442                          L$134:
1442    B8 16 00                  mov         ax,0x0016 
1445    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
144A    89 C6                     mov         si,ax 
144C    85 D2                     test        dx,dx 
144E    75 04                     jne         L$135 
1450    85 C0                     test        ax,ax 
1452    74 6C                     je          L$136 
1454                          L$135:
1454    C7 46 82 16 00            mov         word ptr -0x7e[bp],0x0016 
1459    8B 9E D6 00               mov         bx,word ptr 0xd6[bp] 
145D    8E 9E DC 01               mov         ds,word ptr 0x1dc[bp] 
1461    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
1465    8B 1F                     mov         bx,word ptr [bx] 
1467    89 5E 74                  mov         word ptr 0x74[bp],bx 
146A    8B 9E D6 00               mov         bx,word ptr 0xd6[bp] 
146E    8B 47 02                  mov         ax,word ptr 0x2[bx] 
1471    8B 5E 74                  mov         bx,word ptr 0x74[bp] 
1474    89 46 76                  mov         word ptr 0x76[bp],ax 
1477    8E D8                     mov         ds,ax 
1479    16                        push        ss 
147A    FF 07                     inc         word ptr [bx] 
147C    8D 5E 74                  lea         bx,0x74[bp] 
147F    53                        push        bx 
1480    C5 5E B6                  lds         bx,dword ptr -0x4a[bp] 
1483    03 9E B2 01               add         bx,word ptr 0x1b2[bp] 
1487    C7 46 82 18 00            mov         word ptr -0x7e[bp],0x0018 
148C    8B 07                     mov         ax,word ptr [bx] 
148E    89 46 8E                  mov         word ptr -0x72[bp],ax 
1491    8B 47 02                  mov         ax,word ptr 0x2[bx] 
1494    89 46 90                  mov         word ptr -0x70[bp],ax 
1497    8B 47 04                  mov         ax,word ptr 0x4[bx] 
149A    89 46 92                  mov         word ptr -0x6e[bp],ax 
149D    8C D1                     mov         cx,ss 
149F    8B 47 06                  mov         ax,word ptr 0x6[bx] 
14A2    8D 5E 8E                  lea         bx,-0x72[bp] 
14A5    89 46 94                  mov         word ptr -0x6c[bp],ax 
14A8    89 B6 80 00               mov         word ptr 0x80[bp],si 
14AC    89 F0                     mov         ax,si 
14AE    89 96 82 00               mov         word ptr 0x82[bp],dx 
14B2    9A 00 00 00 00            call        far SeekerEnemy::SeekerEnemy( Rectangle, tnd::shared_ptr<Animation far > ) 
14B7    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
14BB    C7 46 82 18 00            mov         word ptr -0x7e[bp],0x0018 
14C0                          L$136:
14C0    8B B6 8A 01               mov         si,word ptr 0x18a[bp] 
14C4    8D 9E 90 00               lea         bx,0x90[bp] 
14C8    89 86 90 00               mov         word ptr 0x90[bp],ax 
14CC    89 96 92 00               mov         word ptr 0x92[bp],dx 
14D0    8B 86 8C 01               mov         ax,word ptr 0x18c[bp] 
14D4    89 9E B8 00               mov         word ptr 0xb8[bp],bx 
14D8    8E D8                     mov         ds,ax 
14DA    89 F3                     mov         bx,si 
14DC    89 86 B6 00               mov         word ptr 0xb6[bp],ax 
14E0    8B 47 06                  mov         ax,word ptr 0x6[bx] 
14E3    40                        inc         ax 
14E4    8C 96 DE 01               mov         word ptr 0x1de[bp],ss 
14E8    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
14EB    7E 73                     jle         L$139 
14ED    D1 E0                     shl         ax,0x01 
14EF    D1 E0                     shl         ax,0x01 
14F1    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
14F6    8E 9E 8C 01               mov         ds,word ptr 0x18c[bp] 
14FA    89 C7                     mov         di,ax 
14FC    89 86 58 01               mov         word ptr 0x158[bp],ax 
1500    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1503    40                        inc         ax 
1504    89 96 E0 00               mov         word ptr 0xe0[bp],dx 
1508    89 47 04                  mov         word ptr 0x4[bx],ax 
150B    31 C0                     xor         ax,ax 
150D    83 7F 06 00               cmp         word ptr 0x6[bx],0x0000 
1511    7E 2E                     jle         L$138 
1513    89 FB                     mov         bx,di 
1515    8E C2                     mov         es,dx 
1517                          L$137:
1517    89 C7                     mov         di,ax 
1519    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
151D    D1 E7                     shl         di,0x01 
151F    8B 14                     mov         dx,word ptr [si] 
1521    D1 E7                     shl         di,0x01 
1523    8E 5C 02                  mov         ds,word ptr 0x2[si] 
1526    01 D7                     add         di,dx 
1528    8B 15                     mov         dx,word ptr [di] 
152A    8B 4D 02                  mov         cx,word ptr 0x2[di] 
152D    26 89 17                  mov         word ptr es:[bx],dx 
1530    40                        inc         ax 
1531    26 89 4F 02               mov         word ptr es:0x2[bx],cx 
1535    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
1539    83 C3 04                  add         bx,0x0004 
153C    3B 44 06                  cmp         ax,word ptr 0x6[si] 
153F    7C D6                     jl          L$137 
1541                          L$138:
1541    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
1545    8B 04                     mov         ax,word ptr [si] 
1547    8B 54 02                  mov         dx,word ptr 0x2[si] 
154A    9A 00 00 00 00            call        void far operator delete []( void far * ) 
154F    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
1553    8B 86 58 01               mov         ax,word ptr 0x158[bp] 
1557    89 04                     mov         word ptr [si],ax 
1559    8B 86 E0 00               mov         ax,word ptr 0xe0[bp] 
155D    89 44 02                  mov         word ptr 0x2[si],ax 
1560                          L$139:
1560    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
1564    8B BE B8 00               mov         di,word ptr 0xb8[bp] 
1568    8B 5C 06                  mov         bx,word ptr 0x6[si] 
156B    8B 04                     mov         ax,word ptr [si] 
156D    D1 E3                     shl         bx,0x01 
156F    8E 5C 02                  mov         ds,word ptr 0x2[si] 
1572    D1 E3                     shl         bx,0x01 
1574    8E 86 DE 01               mov         es,word ptr 0x1de[bp] 
1578    01 C3                     add         bx,ax 
157A    26 8B 05                  mov         ax,word ptr es:[di] 
157D    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
1581    89 07                     mov         word ptr [bx],ax 
1583    89 57 02                  mov         word ptr 0x2[bx],dx 
1586    8E 9E B6 00               mov         ds,word ptr 0xb6[bp] 
158A    FF 44 06                  inc         word ptr 0x6[si] 
158D    C7 46 82 17 00            mov         word ptr -0x7e[bp],0x0017 
1592    83 7E 76 00               cmp         word ptr 0x76[bp],0x0000 
1596    75 06                     jne         L$140 
1598    83 7E 74 00               cmp         word ptr 0x74[bp],0x0000 
159C    74 31                     je          L$144 
159E                          L$140:
159E    C5 5E 74                  lds         bx,dword ptr 0x74[bp] 
15A1    83 3F 01                  cmp         word ptr [bx],0x0001 
15A4    74 03                     je          L$141 
15A6    E9 42 09                  jmp         L$204 
15A9                          L$141:
15A9    89 DE                     mov         si,bx 
15AB    8B 57 04                  mov         dx,word ptr 0x4[bx] 
15AE    8B 74 02                  mov         si,word ptr 0x2[si] 
15B1    85 D2                     test        dx,dx 
15B3    75 04                     jne         L$142 
15B5    85 F6                     test        si,si 
15B7    74 0B                     je          L$143 
15B9                          L$142:
15B9    8E DA                     mov         ds,dx 
15BB    BB 02 00                  mov         bx,0x0002 
15BE    C5 3C                     lds         di,dword ptr [si] 
15C0    89 F0                     mov         ax,si 
15C2    FF 1D                     call        dword ptr [di] 
15C4                          L$143:
15C4    8B 46 74                  mov         ax,word ptr 0x74[bp] 
15C7    8B 56 76                  mov         dx,word ptr 0x76[bp] 
15CA    9A 00 00 00 00            call        void far operator delete( void far * ) 
15CF                          L$144:
15CF    FF 86 AC 00               inc         word ptr 0xac[bp] 
15D3    C7 46 82 15 00            mov         word ptr -0x7e[bp],0x0015 
15D8    8B 86 AC 00               mov         ax,word ptr 0xac[bp] 
15DC    83 86 B2 01 08            add         word ptr 0x1b2[bp],0x0008 
15E1    3B 46 BC                  cmp         ax,word ptr -0x44[bp] 
15E4    7D 03                     jge         L$145 
15E6    E9 59 FE                  jmp         L$134 
15E9                          L$145:
15E9    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
15ED    8B BE F8 FD               mov         di,word ptr -0x208[bp] 
15F1    C7 86 5E 01 00 00         mov         word ptr 0x15e[bp],0x0000 
15F7    31 C9                     xor         cx,cx 
15F9    83 C6 34                  add         si,0x0034 
15FC                          L$146:
15FC    8E DF                     mov         ds,di 
15FE    8B 44 06                  mov         ax,word ptr 0x6[si] 
1601    3B 86 5E 01               cmp         ax,word ptr 0x15e[bp] 
1605    7F 6B                     jg          L$148 
1607    C7 44 06 00 00            mov         word ptr 0x6[si],0x0000 
160C    8D 9E 60 FE               lea         bx,-0x1a0[bp] 
1610    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
1614    B1 03                     mov         cl,0x03 
1616    89 46 CA                  mov         word ptr -0x36[bp],ax 
1619    89 46 CC                  mov         word ptr -0x34[bp],ax 
161C    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
161F    89 9E AA 00               mov         word ptr 0xaa[bp],bx 
1623    50                        push        ax 
1624    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1627    8B 9E 66 FE               mov         bx,word ptr -0x19a[bp] 
162B    50                        push        ax 
162C    89 D8                     mov         ax,bx 
162E    D3 E0                     shl         ax,cl 
1630    8C 96 60 01               mov         word ptr 0x160[bp],ss 
1634    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1639    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
163E    8B 9E AA 00               mov         bx,word ptr 0xaa[bp] 
1642    89 46 C6                  mov         word ptr -0x3a[bp],ax 
1645    89 56 C8                  mov         word ptr -0x38[bp],dx 
1648    31 C9                     xor         cx,cx 
164A    31 C0                     xor         ax,ax 
164C                          L$147:
164C    8E 9E 60 01               mov         ds,word ptr 0x160[bp] 
1650    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1653    39 D1                     cmp         cx,dx 
1655    7D 1E                     jge         L$149 
1657    8B 7E C6                  mov         di,word ptr -0x3a[bp] 
165A    89 DE                     mov         si,bx 
165C    41                        inc         cx 
165D    8B 34                     mov         si,word ptr [si] 
165F    01 C7                     add         di,ax 
1661    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
1664    01 C6                     add         si,ax 
1666    8E 46 C8                  mov         es,word ptr -0x38[bp] 
1669    05 08 00                  add         ax,0x0008 
166C    A5                        movsw       
166D    A5                        movsw       
166E    A5                        movsw       
166F    A5                        movsw       
1670    EB DA                     jmp         L$147 
1672                          L$148:
1672    E9 7B 08                  jmp         L$205 
1675                          L$149:
1675    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
167A    C7 86 62 01 00 00         mov         word ptr 0x162[bp],0x0000 
1680    83 7E CC 00               cmp         word ptr -0x34[bp],0x0000 
1684    7F 03                     jg          L$150 
1686    E9 D9 01                  jmp         L$162 
1689                          L$150:
1689    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
168D    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
1691    83 C3 34                  add         bx,0x0034 
1694    C7 86 B4 01 00 00         mov         word ptr 0x1b4[bp],0x0000 
169A    89 9E 8E 01               mov         word ptr 0x18e[bp],bx 
169E    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
16A2    89 86 90 01               mov         word ptr 0x190[bp],ax 
16A6    83 C3 1C                  add         bx,0x001c 
16A9    89 86 64 01               mov         word ptr 0x164[bp],ax 
16AD    89 9E AE 00               mov         word ptr 0xae[bp],bx 
16B1                          L$151:
16B1    B8 14 00                  mov         ax,0x0014 
16B4    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
16B9    89 C6                     mov         si,ax 
16BB    85 D2                     test        dx,dx 
16BD    75 04                     jne         L$152 
16BF    85 C0                     test        ax,ax 
16C1    74 70                     je          L$153 
16C3                          L$152:
16C3    C7 46 82 1D 00            mov         word ptr -0x7e[bp],0x001d 
16C8    8E 9E 64 01               mov         ds,word ptr 0x164[bp] 
16CC    8B 9E AE 00               mov         bx,word ptr 0xae[bp] 
16D0    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
16D4    8B 1F                     mov         bx,word ptr [bx] 
16D6    89 9E 94 00               mov         word ptr 0x94[bp],bx 
16DA    8B 9E AE 00               mov         bx,word ptr 0xae[bp] 
16DE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
16E1    8B 9E 94 00               mov         bx,word ptr 0x94[bp] 
16E5    89 86 96 00               mov         word ptr 0x96[bp],ax 
16E9    8E D8                     mov         ds,ax 
16EB    16                        push        ss 
16EC    FF 07                     inc         word ptr [bx] 
16EE    8D 9E 94 00               lea         bx,0x94[bp] 
16F2    53                        push        bx 
16F3    C5 5E C6                  lds         bx,dword ptr -0x3a[bp] 
16F6    03 9E B4 01               add         bx,word ptr 0x1b4[bp] 
16FA    C7 46 82 1F 00            mov         word ptr -0x7e[bp],0x001f 
16FF    8B 07                     mov         ax,word ptr [bx] 
1701    89 46 16                  mov         word ptr 0x16[bp],ax 
1704    8B 47 02                  mov         ax,word ptr 0x2[bx] 
1707    89 46 18                  mov         word ptr 0x18[bp],ax 
170A    8B 47 04                  mov         ax,word ptr 0x4[bx] 
170D    89 46 1A                  mov         word ptr 0x1a[bp],ax 
1710    8C D1                     mov         cx,ss 
1712    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1715    8D 5E 16                  lea         bx,0x16[bp] 
1718    89 46 1C                  mov         word ptr 0x1c[bp],ax 
171B    89 B6 80 00               mov         word ptr 0x80[bp],si 
171F    89 F0                     mov         ax,si 
1721    89 96 82 00               mov         word ptr 0x82[bp],dx 
1725    9A 00 00 00 00            call        far FireBall::FireBall( Rectangle, tnd::shared_ptr<Animation far > ) 
172A    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
172E    C7 46 82 1F 00            mov         word ptr -0x7e[bp],0x001f 
1733                          L$153:
1733    89 C3                     mov         bx,ax 
1735    89 D0                     mov         ax,dx 
1737    8B B6 8E 01               mov         si,word ptr 0x18e[bp] 
173B    89 5E 7C                  mov         word ptr 0x7c[bp],bx 
173E    89 46 7E                  mov         word ptr 0x7e[bp],ax 
1741    8D 5E 7C                  lea         bx,0x7c[bp] 
1744    8B 86 90 01               mov         ax,word ptr 0x190[bp] 
1748    89 9E B4 00               mov         word ptr 0xb4[bp],bx 
174C    8E D8                     mov         ds,ax 
174E    89 F3                     mov         bx,si 
1750    89 86 D8 00               mov         word ptr 0xd8[bp],ax 
1754    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1757    40                        inc         ax 
1758    8C 96 CC 00               mov         word ptr 0xcc[bp],ss 
175C    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
175F    7E 73                     jle         L$156 
1761    D1 E0                     shl         ax,0x01 
1763    D1 E0                     shl         ax,0x01 
1765    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
176A    8E 9E 90 01               mov         ds,word ptr 0x190[bp] 
176E    89 C1                     mov         cx,ax 
1770    89 86 A8 00               mov         word ptr 0xa8[bp],ax 
1774    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1777    40                        inc         ax 
1778    89 96 F8 00               mov         word ptr 0xf8[bp],dx 
177C    89 47 04                  mov         word ptr 0x4[bx],ax 
177F    31 C0                     xor         ax,ax 
1781    83 7F 06 00               cmp         word ptr 0x6[bx],0x0000 
1785    7E 2E                     jle         L$155 
1787    89 CB                     mov         bx,cx 
1789    8E C2                     mov         es,dx 
178B                          L$154:
178B    89 C7                     mov         di,ax 
178D    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
1791    D1 E7                     shl         di,0x01 
1793    8B 14                     mov         dx,word ptr [si] 
1795    D1 E7                     shl         di,0x01 
1797    8E 5C 02                  mov         ds,word ptr 0x2[si] 
179A    01 D7                     add         di,dx 
179C    8B 0D                     mov         cx,word ptr [di] 
179E    8B 55 02                  mov         dx,word ptr 0x2[di] 
17A1    26 89 0F                  mov         word ptr es:[bx],cx 
17A4    40                        inc         ax 
17A5    26 89 57 02               mov         word ptr es:0x2[bx],dx 
17A9    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
17AD    83 C3 04                  add         bx,0x0004 
17B0    3B 44 06                  cmp         ax,word ptr 0x6[si] 
17B3    7C D6                     jl          L$154 
17B5                          L$155:
17B5    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
17B9    8B 04                     mov         ax,word ptr [si] 
17BB    8B 54 02                  mov         dx,word ptr 0x2[si] 
17BE    9A 00 00 00 00            call        void far operator delete []( void far * ) 
17C3    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
17C7    8B 86 A8 00               mov         ax,word ptr 0xa8[bp] 
17CB    89 04                     mov         word ptr [si],ax 
17CD    8B 86 F8 00               mov         ax,word ptr 0xf8[bp] 
17D1    89 44 02                  mov         word ptr 0x2[si],ax 
17D4                          L$156:
17D4    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
17D8    8B BE B4 00               mov         di,word ptr 0xb4[bp] 
17DC    8B 5C 06                  mov         bx,word ptr 0x6[si] 
17DF    8B 04                     mov         ax,word ptr [si] 
17E1    D1 E3                     shl         bx,0x01 
17E3    8E 5C 02                  mov         ds,word ptr 0x2[si] 
17E6    8E 86 CC 00               mov         es,word ptr 0xcc[bp] 
17EA    D1 E3                     shl         bx,0x01 
17EC    26 8B 15                  mov         dx,word ptr es:[di] 
17EF    01 C3                     add         bx,ax 
17F1    26 8B 45 02               mov         ax,word ptr es:0x2[di] 
17F5    89 17                     mov         word ptr [bx],dx 
17F7    89 47 02                  mov         word ptr 0x2[bx],ax 
17FA    8E 9E D8 00               mov         ds,word ptr 0xd8[bp] 
17FE    FF 44 06                  inc         word ptr 0x6[si] 
1801    C7 46 82 1E 00            mov         word ptr -0x7e[bp],0x001e 
1806    83 BE 96 00 00            cmp         word ptr 0x96[bp],0x0000 
180B    75 07                     jne         L$157 
180D    83 BE 94 00 00            cmp         word ptr 0x94[bp],0x0000 
1812    74 34                     je          L$161 
1814                          L$157:
1814    C5 9E 94 00               lds         bx,dword ptr 0x94[bp] 
1818    83 3F 01                  cmp         word ptr [bx],0x0001 
181B    74 03                     je          L$158 
181D    E9 0E 07                  jmp         L$208 
1820                          L$158:
1820    89 DE                     mov         si,bx 
1822    8B 57 04                  mov         dx,word ptr 0x4[bx] 
1825    8B 74 02                  mov         si,word ptr 0x2[si] 
1828    85 D2                     test        dx,dx 
182A    75 04                     jne         L$159 
182C    85 F6                     test        si,si 
182E    74 0B                     je          L$160 
1830                          L$159:
1830    8E DA                     mov         ds,dx 
1832    BB 02 00                  mov         bx,0x0002 
1835    C5 3C                     lds         di,dword ptr [si] 
1837    89 F0                     mov         ax,si 
1839    FF 1D                     call        dword ptr [di] 
183B                          L$160:
183B    8B 86 94 00               mov         ax,word ptr 0x94[bp] 
183F    8B 96 96 00               mov         dx,word ptr 0x96[bp] 
1843    9A 00 00 00 00            call        void far operator delete( void far * ) 
1848                          L$161:
1848    FF 86 62 01               inc         word ptr 0x162[bp] 
184C    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1851    8B 86 62 01               mov         ax,word ptr 0x162[bp] 
1855    83 86 B4 01 08            add         word ptr 0x1b4[bp],0x0008 
185A    3B 46 CC                  cmp         ax,word ptr -0x34[bp] 
185D    7D 03                     jge         L$162 
185F    E9 4F FE                  jmp         L$151 
1862                          L$162:
1862    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1866    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
186A    83 C3 44                  add         bx,0x0044 
186D    B1 03                     mov         cl,0x03 
186F    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
1874    8D 5E 86                  lea         bx,-0x7a[bp] 
1877    8B 86 46 FE               mov         ax,word ptr -0x1ba[bp] 
187B    89 9E 72 01               mov         word ptr 0x172[bp],bx 
187F    89 46 8A                  mov         word ptr -0x76[bp],ax 
1882    89 46 8C                  mov         word ptr -0x74[bp],ax 
1885    8D 9E 40 FE               lea         bx,-0x1c0[bp] 
1889    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
188C    89 9E A6 00               mov         word ptr 0xa6[bp],bx 
1890    50                        push        ax 
1891    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1894    8B 9E 46 FE               mov         bx,word ptr -0x1ba[bp] 
1898    50                        push        ax 
1899    89 D8                     mov         ax,bx 
189B    8C 96 A4 00               mov         word ptr 0xa4[bp],ss 
189F    D3 E0                     shl         ax,cl 
18A1    8C 96 74 01               mov         word ptr 0x174[bp],ss 
18A5    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
18AA    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
18AF    8B 9E A6 00               mov         bx,word ptr 0xa6[bp] 
18B3    89 46 86                  mov         word ptr -0x7a[bp],ax 
18B6    89 56 88                  mov         word ptr -0x78[bp],dx 
18B9    31 C9                     xor         cx,cx 
18BB    31 C0                     xor         ax,ax 
18BD                          L$163:
18BD    8E 9E 74 01               mov         ds,word ptr 0x174[bp] 
18C1    8B 57 06                  mov         dx,word ptr 0x6[bx] 
18C4    39 D1                     cmp         cx,dx 
18C6    7D 1B                     jge         L$164 
18C8    8B 7E 86                  mov         di,word ptr -0x7a[bp] 
18CB    89 DE                     mov         si,bx 
18CD    41                        inc         cx 
18CE    8B 34                     mov         si,word ptr [si] 
18D0    01 C7                     add         di,ax 
18D2    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
18D5    01 C6                     add         si,ax 
18D7    8E 46 88                  mov         es,word ptr -0x78[bp] 
18DA    05 08 00                  add         ax,0x0008 
18DD    A5                        movsw       
18DE    A5                        movsw       
18DF    A5                        movsw       
18E0    A5                        movsw       
18E1    EB DA                     jmp         L$163 
18E3                          L$164:
18E3    C7 46 82 21 00            mov         word ptr -0x7e[bp],0x0021 
18E8    8B BE F8 FD               mov         di,word ptr -0x208[bp] 
18EC    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
18F0    8B 86 A4 00               mov         ax,word ptr 0xa4[bp] 
18F4    8E DF                     mov         ds,di 
18F6    89 86 7E 01               mov         word ptr 0x17e[bp],ax 
18FA    8B 44 44                  mov         ax,word ptr 0x44[si] 
18FD    8B 54 46                  mov         dx,word ptr 0x46[si] 
1900    8B 9E 72 01               mov         bx,word ptr 0x172[bp] 
1904    9A 00 00 00 00            call        void far operator delete []( void far * ) 
1909    8E 9E A4 00               mov         ds,word ptr 0xa4[bp] 
190D    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1910    8E DF                     mov         ds,di 
1912    89 44 48                  mov         word ptr 0x48[si],ax 
1915    8E 9E A4 00               mov         ds,word ptr 0xa4[bp] 
1919    89 9E BA 00               mov         word ptr 0xba[bp],bx 
191D    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1920    8E DF                     mov         ds,di 
1922    89 C3                     mov         bx,ax 
1924    89 44 4A                  mov         word ptr 0x4a[si],ax 
1927    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
192A    50                        push        ax 
192B    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
192E    B1 03                     mov         cl,0x03 
1930    50                        push        ax 
1931    89 D8                     mov         ax,bx 
1933    83 C6 44                  add         si,0x0044 
1936    D3 E0                     shl         ax,cl 
1938    89 BE D2 00               mov         word ptr 0xd2[bp],di 
193C    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1941    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1946    8E DF                     mov         ds,di 
1948    89 B6 7C 01               mov         word ptr 0x17c[bp],si 
194C    89 04                     mov         word ptr [si],ax 
194E    31 C0                     xor         ax,ax 
1950    89 54 02                  mov         word ptr 0x2[si],dx 
1953    89 86 BC 00               mov         word ptr 0xbc[bp],ax 
1957                          L$165:
1957    8B 9E BA 00               mov         bx,word ptr 0xba[bp] 
195B    8E 9E 7E 01               mov         ds,word ptr 0x17e[bp] 
195F    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1962    3B 96 BC 00               cmp         dx,word ptr 0xbc[bp] 
1966    7E 26                     jle         L$166 
1968    8B BE 7C 01               mov         di,word ptr 0x17c[bp] 
196C    89 DE                     mov         si,bx 
196E    FF 86 BC 00               inc         word ptr 0xbc[bp] 
1972    8B 34                     mov         si,word ptr [si] 
1974    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
1977    8E 9E D2 00               mov         ds,word ptr 0xd2[bp] 
197B    01 C6                     add         si,ax 
197D    C4 0D                     les         cx,dword ptr [di] 
197F    89 CF                     mov         di,cx 
1981    8E DB                     mov         ds,bx 
1983    01 C7                     add         di,ax 
1985    05 08 00                  add         ax,0x0008 
1988    A5                        movsw       
1989    A5                        movsw       
198A    A5                        movsw       
198B    A5                        movsw       
198C    EB C9                     jmp         L$165 
198E                          L$166:
198E    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1993    8B 46 86                  mov         ax,word ptr -0x7a[bp] 
1996    8B 56 88                  mov         dx,word ptr -0x78[bp] 
1999    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
199D    9A 00 00 00 00            call        void far operator delete []( void far * ) 
19A2    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
19A6    83 C3 4C                  add         bx,0x004c 
19A9    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
19AE    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
19B3    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
19B7    80 BF 9A 00 00            cmp         byte ptr 0x9a[bx],0x00 
19BC    75 71                     jne         L$168 
19BE    8D 5E 06                  lea         bx,0x6[bp] 
19C1    8B 86 4E FE               mov         ax,word ptr -0x1b2[bp] 
19C5    B1 03                     mov         cl,0x03 
19C7    89 9E B0 00               mov         word ptr 0xb0[bp],bx 
19CB    89 46 0A                  mov         word ptr 0xa[bp],ax 
19CE    89 46 0C                  mov         word ptr 0xc[bp],ax 
19D1    8D 9E 48 FE               lea         bx,-0x1b8[bp] 
19D5    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
19D8    89 9E 84 01               mov         word ptr 0x184[bp],bx 
19DC    50                        push        ax 
19DD    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
19E0    8B 9E 4E FE               mov         bx,word ptr -0x1b2[bp] 
19E4    50                        push        ax 
19E5    89 D8                     mov         ax,bx 
19E7    8C 96 B2 00               mov         word ptr 0xb2[bp],ss 
19EB    D3 E0                     shl         ax,cl 
19ED    8C 96 DA 00               mov         word ptr 0xda[bp],ss 
19F1    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
19F6    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
19FB    8B 9E 84 01               mov         bx,word ptr 0x184[bp] 
19FF    89 46 06                  mov         word ptr 0x6[bp],ax 
1A02    89 56 08                  mov         word ptr 0x8[bp],dx 
1A05    31 C9                     xor         cx,cx 
1A07    31 C0                     xor         ax,ax 
1A09                          L$167:
1A09    8E 9E DA 00               mov         ds,word ptr 0xda[bp] 
1A0D    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1A10    39 D1                     cmp         cx,dx 
1A12    7D 1E                     jge         L$169 
1A14    8B 7E 06                  mov         di,word ptr 0x6[bp] 
1A17    89 DE                     mov         si,bx 
1A19    41                        inc         cx 
1A1A    8B 34                     mov         si,word ptr [si] 
1A1C    01 C7                     add         di,ax 
1A1E    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
1A21    01 C6                     add         si,ax 
1A23    8E 46 08                  mov         es,word ptr 0x8[bp] 
1A26    05 08 00                  add         ax,0x0008 
1A29    A5                        movsw       
1A2A    A5                        movsw       
1A2B    A5                        movsw       
1A2C    A5                        movsw       
1A2D    EB DA                     jmp         L$167 
1A2F                          L$168:
1A2F    E9 C0 00                  jmp         L$172 
1A32                          L$169:
1A32    C7 46 82 23 00            mov         word ptr -0x7e[bp],0x0023 
1A37    8B BE F8 FD               mov         di,word ptr -0x208[bp] 
1A3B    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
1A3F    8B 86 B2 00               mov         ax,word ptr 0xb2[bp] 
1A43    8E DF                     mov         ds,di 
1A45    89 86 20 01               mov         word ptr 0x120[bp],ax 
1A49    8B 44 4C                  mov         ax,word ptr 0x4c[si] 
1A4C    8B 54 4E                  mov         dx,word ptr 0x4e[si] 
1A4F    8B 9E B0 00               mov         bx,word ptr 0xb0[bp] 
1A53    9A 00 00 00 00            call        void far operator delete []( void far * ) 
1A58    8E 9E B2 00               mov         ds,word ptr 0xb2[bp] 
1A5C    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1A5F    8E DF                     mov         ds,di 
1A61    89 44 50                  mov         word ptr 0x50[si],ax 
1A64    8E 9E B2 00               mov         ds,word ptr 0xb2[bp] 
1A68    89 9E A2 01               mov         word ptr 0x1a2[bp],bx 
1A6C    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1A6F    8E DF                     mov         ds,di 
1A71    89 C3                     mov         bx,ax 
1A73    89 44 52                  mov         word ptr 0x52[si],ax 
1A76    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
1A79    50                        push        ax 
1A7A    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1A7D    B1 03                     mov         cl,0x03 
1A7F    50                        push        ax 
1A80    89 D8                     mov         ax,bx 
1A82    83 C6 4C                  add         si,0x004c 
1A85    D3 E0                     shl         ax,cl 
1A87    89 BE 1E 01               mov         word ptr 0x11e[bp],di 
1A8B    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1A90    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1A95    8E DF                     mov         ds,di 
1A97    89 B6 9E 01               mov         word ptr 0x19e[bp],si 
1A9B    89 04                     mov         word ptr [si],ax 
1A9D    31 C0                     xor         ax,ax 
1A9F    89 54 02                  mov         word ptr 0x2[si],dx 
1AA2    89 86 24 01               mov         word ptr 0x124[bp],ax 
1AA6                          L$170:
1AA6    8E 9E 20 01               mov         ds,word ptr 0x120[bp] 
1AAA    8B 9E A2 01               mov         bx,word ptr 0x1a2[bp] 
1AAE    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1AB1    3B 96 24 01               cmp         dx,word ptr 0x124[bp] 
1AB5    7E 26                     jle         L$171 
1AB7    8B BE 9E 01               mov         di,word ptr 0x19e[bp] 
1ABB    89 DE                     mov         si,bx 
1ABD    FF 86 24 01               inc         word ptr 0x124[bp] 
1AC1    8B 34                     mov         si,word ptr [si] 
1AC3    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
1AC6    8E 9E 1E 01               mov         ds,word ptr 0x11e[bp] 
1ACA    01 C6                     add         si,ax 
1ACC    C4 0D                     les         cx,dword ptr [di] 
1ACE    89 CF                     mov         di,cx 
1AD0    8E DB                     mov         ds,bx 
1AD2    01 C7                     add         di,ax 
1AD4    05 08 00                  add         ax,0x0008 
1AD7    A5                        movsw       
1AD8    A5                        movsw       
1AD9    A5                        movsw       
1ADA    A5                        movsw       
1ADB    EB C9                     jmp         L$170 
1ADD                          L$171:
1ADD    8B 46 06                  mov         ax,word ptr 0x6[bp] 
1AE0    8B 56 08                  mov         dx,word ptr 0x8[bp] 
1AE3    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1AE8    9A 00 00 00 00            call        void far operator delete []( void far * ) 
1AED    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1AF2                          L$172:
1AF2    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1AF6    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
1AFA    83 C3 54                  add         bx,0x0054 
1AFD    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
1B02    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1B06    80 BF 9B 00 00            cmp         byte ptr 0x9b[bx],0x00 
1B0B    75 71                     jne         L$174 
1B0D    8D 5E CE                  lea         bx,-0x32[bp] 
1B10    8B 86 56 FE               mov         ax,word ptr -0x1aa[bp] 
1B14    B1 03                     mov         cl,0x03 
1B16    89 9E BE 00               mov         word ptr 0xbe[bp],bx 
1B1A    89 46 D2                  mov         word ptr -0x2e[bp],ax 
1B1D    89 46 D4                  mov         word ptr -0x2c[bp],ax 
1B20    8D 9E 50 FE               lea         bx,-0x1b0[bp] 
1B24    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
1B27    89 9E F0 00               mov         word ptr 0xf0[bp],bx 
1B2B    50                        push        ax 
1B2C    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1B2F    8B 9E 56 FE               mov         bx,word ptr -0x1aa[bp] 
1B33    50                        push        ax 
1B34    89 D8                     mov         ax,bx 
1B36    8C 96 C4 01               mov         word ptr 0x1c4[bp],ss 
1B3A    D3 E0                     shl         ax,cl 
1B3C    8C 96 C0 00               mov         word ptr 0xc0[bp],ss 
1B40    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1B45    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1B4A    8B 9E F0 00               mov         bx,word ptr 0xf0[bp] 
1B4E    89 46 CE                  mov         word ptr -0x32[bp],ax 
1B51    89 56 D0                  mov         word ptr -0x30[bp],dx 
1B54    31 C9                     xor         cx,cx 
1B56    31 C0                     xor         ax,ax 
1B58                          L$173:
1B58    8E 9E C0 00               mov         ds,word ptr 0xc0[bp] 
1B5C    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1B5F    39 D1                     cmp         cx,dx 
1B61    7D 1E                     jge         L$175 
1B63    8B 7E CE                  mov         di,word ptr -0x32[bp] 
1B66    89 DE                     mov         si,bx 
1B68    41                        inc         cx 
1B69    8B 34                     mov         si,word ptr [si] 
1B6B    01 C7                     add         di,ax 
1B6D    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
1B70    01 C6                     add         si,ax 
1B72    8E 46 D0                  mov         es,word ptr -0x30[bp] 
1B75    05 08 00                  add         ax,0x0008 
1B78    A5                        movsw       
1B79    A5                        movsw       
1B7A    A5                        movsw       
1B7B    A5                        movsw       
1B7C    EB DA                     jmp         L$173 
1B7E                          L$174:
1B7E    E9 C0 00                  jmp         L$178 
1B81                          L$175:
1B81    C7 46 82 25 00            mov         word ptr -0x7e[bp],0x0025 
1B86    8B BE F8 FD               mov         di,word ptr -0x208[bp] 
1B8A    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
1B8E    8B 86 C4 01               mov         ax,word ptr 0x1c4[bp] 
1B92    8E DF                     mov         ds,di 
1B94    89 86 C8 00               mov         word ptr 0xc8[bp],ax 
1B98    8B 44 54                  mov         ax,word ptr 0x54[si] 
1B9B    8B 54 56                  mov         dx,word ptr 0x56[si] 
1B9E    8B 9E BE 00               mov         bx,word ptr 0xbe[bp] 
1BA2    9A 00 00 00 00            call        void far operator delete []( void far * ) 
1BA7    8E 9E C4 01               mov         ds,word ptr 0x1c4[bp] 
1BAB    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1BAE    8E DF                     mov         ds,di 
1BB0    89 44 58                  mov         word ptr 0x58[si],ax 
1BB3    8E 9E C4 01               mov         ds,word ptr 0x1c4[bp] 
1BB7    89 9E 2E 01               mov         word ptr 0x12e[bp],bx 
1BBB    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1BBE    8E DF                     mov         ds,di 
1BC0    89 C3                     mov         bx,ax 
1BC2    89 44 5A                  mov         word ptr 0x5a[si],ax 
1BC5    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
1BC8    50                        push        ax 
1BC9    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1BCC    B1 03                     mov         cl,0x03 
1BCE    50                        push        ax 
1BCF    89 D8                     mov         ax,bx 
1BD1    83 C6 54                  add         si,0x0054 
1BD4    D3 E0                     shl         ax,cl 
1BD6    89 BE C4 00               mov         word ptr 0xc4[bp],di 
1BDA    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1BDF    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1BE4    8E DF                     mov         ds,di 
1BE6    89 B6 F4 00               mov         word ptr 0xf4[bp],si 
1BEA    89 04                     mov         word ptr [si],ax 
1BEC    31 C0                     xor         ax,ax 
1BEE    89 54 02                  mov         word ptr 0x2[si],dx 
1BF1    89 86 CA 00               mov         word ptr 0xca[bp],ax 
1BF5                          L$176:
1BF5    8E 9E C8 00               mov         ds,word ptr 0xc8[bp] 
1BF9    8B 9E 2E 01               mov         bx,word ptr 0x12e[bp] 
1BFD    8B 57 06                  mov         dx,word ptr 0x6[bx] 
1C00    3B 96 CA 00               cmp         dx,word ptr 0xca[bp] 
1C04    7E 26                     jle         L$177 
1C06    8B BE F4 00               mov         di,word ptr 0xf4[bp] 
1C0A    89 DE                     mov         si,bx 
1C0C    FF 86 CA 00               inc         word ptr 0xca[bp] 
1C10    8B 34                     mov         si,word ptr [si] 
1C12    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
1C15    8E 9E C4 00               mov         ds,word ptr 0xc4[bp] 
1C19    01 C6                     add         si,ax 
1C1B    C4 0D                     les         cx,dword ptr [di] 
1C1D    89 CF                     mov         di,cx 
1C1F    8E DB                     mov         ds,bx 
1C21    01 C7                     add         di,ax 
1C23    05 08 00                  add         ax,0x0008 
1C26    A5                        movsw       
1C27    A5                        movsw       
1C28    A5                        movsw       
1C29    A5                        movsw       
1C2A    EB C9                     jmp         L$176 
1C2C                          L$177:
1C2C    8B 46 CE                  mov         ax,word ptr -0x32[bp] 
1C2F    8B 56 D0                  mov         dx,word ptr -0x30[bp] 
1C32    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1C37    9A 00 00 00 00            call        void far operator delete []( void far * ) 
1C3C    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
1C41                          L$178:
1C41    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1C45    C7 86 3A 01 00 00         mov         word ptr 0x13a[bp],0x0000 
1C4B    83 C3 6A                  add         bx,0x006a 
1C4E    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
1C52    89 9E 9A 01               mov         word ptr 0x19a[bp],bx 
1C56    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1C5A    C7 86 B6 01 00 00         mov         word ptr 0x1b6[bp],0x0000 
1C60    83 C3 44                  add         bx,0x0044 
1C63    89 86 9C 01               mov         word ptr 0x19c[bp],ax 
1C67    89 9E A0 01               mov         word ptr 0x1a0[bp],bx 
1C6B    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1C6F    89 86 A4 01               mov         word ptr 0x1a4[bp],ax 
1C73    81 C3 82 00               add         bx,0x0082 
1C77    89 86 A8 01               mov         word ptr 0x1a8[bp],ax 
1C7B    89 9E A6 01               mov         word ptr 0x1a6[bp],bx 
1C7F                          L$179:
1C7F    C5 9E A6 01               lds         bx,dword ptr 0x1a6[bp] 
1C83    8B 47 06                  mov         ax,word ptr 0x6[bx] 
1C86    3B 86 3A 01               cmp         ax,word ptr 0x13a[bp] 
1C8A    7E 4C                     jle         L$182 
1C8C    8D 7E 36                  lea         di,0x36[bp] 
1C8F    B9 FF FF                  mov         cx,0xffff 
1C92    89 DE                     mov         si,bx 
1C94    8C D0                     mov         ax,ss 
1C96    8B 34                     mov         si,word ptr [si] 
1C98    31 D2                     xor         dx,dx 
1C9A    03 B6 B6 01               add         si,word ptr 0x1b6[bp] 
1C9E    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
1CA1    8E C0                     mov         es,ax 
1CA3    31 DB                     xor         bx,bx 
1CA5    A5                        movsw       
1CA6    A5                        movsw       
1CA7    A5                        movsw       
1CA8    8E 86 9C 01               mov         es,word ptr 0x19c[bp] 
1CAC                          L$180:
1CAC    8E 9E A4 01               mov         ds,word ptr 0x1a4[bp] 
1CB0    8B B6 A0 01               mov         si,word ptr 0x1a0[bp] 
1CB4    8B 44 06                  mov         ax,word ptr 0x6[si] 
1CB7    39 C3                     cmp         bx,ax 
1CB9    7D 20                     jge         L$183 
1CBB    8B BE A0 01               mov         di,word ptr 0x1a0[bp] 
1CBF    8B 34                     mov         si,word ptr [si] 
1CC1    8E 5D 02                  mov         ds,word ptr 0x2[di] 
1CC4    8B BE 9A 01               mov         di,word ptr 0x19a[bp] 
1CC8    26 8A 05                  mov         al,byte ptr es:[di] 
1CCB    01 D6                     add         si,dx 
1CCD    3A 46 36                  cmp         al,byte ptr 0x36[bp] 
1CD0    74 0C                     je          L$184 
1CD2                          L$181:
1CD2    83 C2 08                  add         dx,0x0008 
1CD5    43                        inc         bx 
1CD6    EB D4                     jmp         L$180 
1CD8                          L$182:
1CD8    E9 C7 02                  jmp         L$213 
1CDB                          L$183:
1CDB    E9 55 02                  jmp         L$209 
1CDE                          L$184:
1CDE    26 8A 45 01               mov         al,byte ptr es:0x1[di] 
1CE2    3A 46 37                  cmp         al,byte ptr 0x37[bp] 
1CE5    75 EB                     jne         L$181 
1CE7    8B 04                     mov         ax,word ptr [si] 
1CE9    3B 46 38                  cmp         ax,word ptr 0x38[bp] 
1CEC    75 E4                     jne         L$181 
1CEE    8B 44 02                  mov         ax,word ptr 0x2[si] 
1CF1    3B 46 3A                  cmp         ax,word ptr 0x3a[bp] 
1CF4    75 DC                     jne         L$181 
1CF6    89 D9                     mov         cx,bx 
1CF8    83 C2 08                  add         dx,0x0008 
1CFB    43                        inc         bx 
1CFC    EB AE                     jmp         L$180 
1CFE                          L$185:
1CFE    BB 11 00                  mov         bx,offset L$560 
1D01    B9 00 00                  mov         cx,game_DATA2 
1D04    8D 46 6C                  lea         ax,0x6c[bp] 
1D07    8C D2                     mov         dx,ss 
1D09    9A 00 00 00 00            call        far TinyString::TinyString( char const far * ) 
1D0E    8D 9E 66 FF               lea         bx,-0x9a[bp] 
1D12    52                        push        dx 
1D13    8C D1                     mov         cx,ss 
1D15    50                        push        ax 
1D16    8C D2                     mov         dx,ss 
1D18    8D 46 68                  lea         ax,0x68[bp] 
1D1B    C7 46 82 04 00            mov         word ptr -0x7e[bp],0x0004 
1D20    9A 00 00 00 00            call        TinyString far operator +( char const far *, TinyString const far & ) 
1D25    80 4E 84 01               or          byte ptr -0x7c[bp],0x01 
1D29    C7 46 82 03 00            mov         word ptr -0x7e[bp],0x0003 
1D2E    8D 46 6C                  lea         ax,0x6c[bp] 
1D31    8C D2                     mov         dx,ss 
1D33    31 DB                     xor         bx,bx 
1D35    B9 00 00                  mov         cx,game_DATA2 
1D38    9A 00 00 00 00            call        far TinyString::~TinyString() 
1D3D    C7 46 82 06 00            mov         word ptr -0x7e[bp],0x0006 
1D42    8D 46 68                  lea         ax,0x68[bp] 
1D45    8C D2                     mov         dx,ss 
1D47    BB 09 00                  mov         bx,offset L$558 
1D4A    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
1D4F    9A 00 00 00 00            call        fopen_ 
1D54    85 D2                     test        dx,dx 
1D56    75 04                     jne         L$186 
1D58    85 C0                     test        ax,ax 
1D5A    74 14                     je          L$187 
1D5C                          L$186:
1D5C    9A 00 00 00 00            call        fclose_ 
1D61    8D 5E 68                  lea         bx,0x68[bp] 
1D64    8D 46 50                  lea         ax,0x50[bp] 
1D67    8C D1                     mov         cx,ss 
1D69    8C D2                     mov         dx,ss 
1D6B    9A 00 00 00 00            call        void far TinyString::operator =( TinyString const far & ) 
1D70                          L$187:
1D70    8D 46 68                  lea         ax,0x68[bp] 
1D73    8C D2                     mov         dx,ss 
1D75    31 DB                     xor         bx,bx 
1D77    C7 46 82 03 00            mov         word ptr -0x7e[bp],0x0003 
1D7C    9A 00 00 00 00            call        far TinyString::~TinyString() 
1D81    C7 46 82 03 00            mov         word ptr -0x7e[bp],0x0003 
1D86    E9 6C F2                  jmp         L$104 
1D89                          L$188:
1D89    FF 0F                     dec         word ptr [bx] 
1D8B    E9 F7 F2                  jmp         L$109 
1D8E                          L$189:
1D8E    26 8B 44 02               mov         ax,word ptr es:0x2[si] 
1D92    26 8B 14                  mov         dx,word ptr es:[si] 
1D95    85 C0                     test        ax,ax 
1D97    75 04                     jne         L$190 
1D99    85 D2                     test        dx,dx 
1D9B    74 12                     je          L$191 
1D9D                          L$190:
1D9D    89 D3                     mov         bx,dx 
1D9F    8E D8                     mov         ds,ax 
1DA1    8B 77 04                  mov         si,word ptr 0x4[bx] 
1DA4    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
1DA7    85 F6                     test        si,si 
1DA9    75 1D                     jne         L$192 
1DAB    85 C9                     test        cx,cx 
1DAD    75 19                     jne         L$192 
1DAF                          L$191:
1DAF    B1 04                     mov         cl,0x04 
1DB1    8B 86 90 FE               mov         ax,word ptr -0x170[bp] 
1DB5    D3 E0                     shl         ax,cl 
1DB7    89 86 A0 00               mov         word ptr 0xa0[bp],ax 
1DBB    8B 86 92 FE               mov         ax,word ptr -0x16e[bp] 
1DBF    D3 E0                     shl         ax,cl 
1DC1    89 86 CA 01               mov         word ptr 0x1ca[bp],ax 
1DC5    E9 47 F3                  jmp         L$111 
1DC8                          L$192:
1DC8    80 BE E4 01 00            cmp         byte ptr 0x1e4[bp],0x00 
1DCD    74 E0                     je          L$191 
1DCF    8D 96 CA 01               lea         dx,0x1ca[bp] 
1DD3    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
1DD7    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
1DDB    16                        push        ss 
1DDC    89 C8                     mov         ax,cx 
1DDE    52                        push        dx 
1DDF    8D 96 A0 00               lea         dx,0xa0[bp] 
1DE3    16                        push        ss 
1DE4    8B 5F 64                  mov         bx,word ptr 0x64[bx] 
1DE7    52                        push        dx 
1DE8    89 F2                     mov         dx,si 
1DEA    9A 00 00 00 00            call        void far Physics::getActorPos( int, short far &, short far & ) 
1DEF    8A 86 C6 01               mov         al,byte ptr 0x1c6[bp] 
1DF3    3A 86 F6 FD               cmp         al,byte ptr -0x20a[bp] 
1DF7    7D 09                     jge         L$193 
1DF9    C7 86 A0 00 A0 00         mov         word ptr 0xa0[bp],0x00a0 
1DFF    E9 0D F3                  jmp         L$111 
1E02                          L$193:
1E02    7E 25                     jle         L$194 
1E04    8E 9E 16 01               mov         ds,word ptr 0x116[bp] 
1E08    C5 35                     lds         si,dword ptr [di] 
1E0A    C5 5C 02                  lds         bx,dword ptr 0x2[si] 
1E0D    89 D8                     mov         ax,bx 
1E0F    C4 37                     les         si,dword ptr [bx] 
1E11    8C DA                     mov         dx,ds 
1E13    26 FF 5C 04               call        dword ptr es:0x4[si] 
1E17    BA 36 01                  mov         dx,0x0136 
1E1A    29 C2                     sub         dx,ax 
1E1C    B1 04                     mov         cl,0x04 
1E1E    89 D0                     mov         ax,dx 
1E20    D3 E0                     shl         ax,cl 
1E22    89 86 A0 00               mov         word ptr 0xa0[bp],ax 
1E26    E9 E6 F2                  jmp         L$111 
1E29                          L$194:
1E29    8A 86 C7 01               mov         al,byte ptr 0x1c7[bp] 
1E2D    3A 86 F7 FD               cmp         al,byte ptr -0x209[bp] 
1E31    7D 09                     jge         L$195 
1E33    C7 86 CA 01 A0 00         mov         word ptr 0x1ca[bp],0x00a0 
1E39    E9 D3 F2                  jmp         L$111 
1E3C                          L$195:
1E3C    7F 03                     jg          L$196 
1E3E    E9 CE F2                  jmp         L$111 
1E41                          L$196:
1E41    8E 9E 16 01               mov         ds,word ptr 0x116[bp] 
1E45    C5 35                     lds         si,dword ptr [di] 
1E47    C5 5C 02                  lds         bx,dword ptr 0x2[si] 
1E4A    89 D8                     mov         ax,bx 
1E4C    C4 37                     les         si,dword ptr [bx] 
1E4E    8C DA                     mov         dx,ds 
1E50    26 FF 5C 08               call        dword ptr es:0x8[si] 
1E54    BA B9 00                  mov         dx,0x00b9 
1E57    29 C2                     sub         dx,ax 
1E59    B1 04                     mov         cl,0x04 
1E5B    89 D0                     mov         ax,dx 
1E5D    D3 E0                     shl         ax,cl 
1E5F    89 86 CA 01               mov         word ptr 0x1ca[bp],ax 
1E63    E9 A9 F2                  jmp         L$111 
1E66                          L$197:
1E66    8B 1C                     mov         bx,word ptr [si] 
1E68    03 9E AE 01               add         bx,word ptr 0x1ae[bp] 
1E6C    8E 5C 02                  mov         ds,word ptr 0x2[si] 
1E6F    8B 57 02                  mov         dx,word ptr 0x2[bx] 
1E72    8B 07                     mov         ax,word ptr [bx] 
1E74    85 D2                     test        dx,dx 
1E76    75 04                     jne         L$198 
1E78    85 C0                     test        ax,ax 
1E7A    74 1E                     je          L$199 
1E7C                          L$198:
1E7C    C7 46 82 0C 00            mov         word ptr -0x7e[bp],0x000c 
1E81    89 86 B8 FE               mov         word ptr -0x148[bp],ax 
1E85    31 DB                     xor         bx,bx 
1E87    89 96 BA FE               mov         word ptr -0x146[bp],dx 
1E8B    9A 00 00 00 00            call        far Enemy::~Enemy() 
1E90    C7 46 82 08 00            mov         word ptr -0x7e[bp],0x0008 
1E95    9A 00 00 00 00            call        void far operator delete( void far * ) 
1E9A                          L$199:
1E9A    C7 46 82 08 00            mov         word ptr -0x7e[bp],0x0008 
1E9F    83 86 AE 01 04            add         word ptr 0x1ae[bp],0x0004 
1EA4    47                        inc         di 
1EA5    E9 78 F2                  jmp         L$112 
1EA8                          L$200:
1EA8    FF 0F                     dec         word ptr [bx] 
1EAA    E9 B3 F4                  jmp         L$127 
1EAD                          L$201:
1EAD    C5 1C                     lds         bx,dword ptr [si] 
1EAF    01 FB                     add         bx,di 
1EB1    8B 57 02                  mov         dx,word ptr 0x2[bx] 
1EB4    8B 07                     mov         ax,word ptr [bx] 
1EB6    85 D2                     test        dx,dx 
1EB8    75 04                     jne         L$202 
1EBA    85 C0                     test        ax,ax 
1EBC    74 1E                     je          L$203 
1EBE                          L$202:
1EBE    C7 46 82 13 00            mov         word ptr -0x7e[bp],0x0013 
1EC3    89 86 F4 FE               mov         word ptr -0x10c[bp],ax 
1EC7    31 DB                     xor         bx,bx 
1EC9    89 96 F6 FE               mov         word ptr -0x10a[bp],dx 
1ECD    9A 00 00 00 00            call        far SeekerEnemy::~SeekerEnemy() 
1ED2    C7 46 82 0E 00            mov         word ptr -0x7e[bp],0x000e 
1ED7    9A 00 00 00 00            call        void far operator delete( void far * ) 
1EDC                          L$203:
1EDC    C7 46 82 0E 00            mov         word ptr -0x7e[bp],0x000e 
1EE1    FF 86 40 01               inc         word ptr 0x140[bp] 
1EE5    83 C7 04                  add         di,0x0004 
1EE8    E9 A2 F4                  jmp         L$129 
1EEB                          L$204:
1EEB    FF 0F                     dec         word ptr [bx] 
1EED    E9 DF F6                  jmp         L$144 
1EF0                          L$205:
1EF0    C5 1C                     lds         bx,dword ptr [si] 
1EF2    01 CB                     add         bx,cx 
1EF4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
1EF7    8B 07                     mov         ax,word ptr [bx] 
1EF9    85 D2                     test        dx,dx 
1EFB    75 04                     jne         L$206 
1EFD    85 C0                     test        ax,ax 
1EFF    74 1E                     je          L$207 
1F01                          L$206:
1F01    C7 46 82 1A 00            mov         word ptr -0x7e[bp],0x001a 
1F06    89 86 08 FF               mov         word ptr -0xf8[bp],ax 
1F0A    31 DB                     xor         bx,bx 
1F0C    89 96 0A FF               mov         word ptr -0xf6[bp],dx 
1F10    9A 00 00 00 00            call        far FireBall::~FireBall() 
1F15    C7 46 82 15 00            mov         word ptr -0x7e[bp],0x0015 
1F1A    9A 00 00 00 00            call        void far operator delete( void far * ) 
1F1F                          L$207:
1F1F    C7 46 82 15 00            mov         word ptr -0x7e[bp],0x0015 
1F24    FF 86 5E 01               inc         word ptr 0x15e[bp] 
1F28    83 C1 04                  add         cx,0x0004 
1F2B    E9 CE F6                  jmp         L$146 
1F2E                          L$208:
1F2E    FF 0F                     dec         word ptr [bx] 
1F30    E9 15 F9                  jmp         L$161 
1F33                          L$209:
1F33    85 C9                     test        cx,cx 
1F35    7C 5F                     jl          L$212 
1F37    89 B6 CE 00               mov         word ptr 0xce[bp],si 
1F3B    8C 9E 04 01               mov         word ptr 0x104[bp],ds 
1F3F    39 C1                     cmp         cx,ax 
1F41    7D 53                     jge         L$212 
1F43    89 CB                     mov         bx,cx 
1F45    43                        inc         bx 
1F46    39 C3                     cmp         bx,ax 
1F48    7D 41                     jge         L$211 
1F4A    B1 03                     mov         cl,0x03 
1F4C    89 DA                     mov         dx,bx 
1F4E    D3 E2                     shl         dx,cl 
1F50    83 EA 08                  sub         dx,0x0008 
1F53                          L$210:
1F53    B1 03                     mov         cl,0x03 
1F55    8E 9E 04 01               mov         ds,word ptr 0x104[bp] 
1F59    8B BE CE 00               mov         di,word ptr 0xce[bp] 
1F5D    89 D8                     mov         ax,bx 
1F5F    8B B6 CE 00               mov         si,word ptr 0xce[bp] 
1F63    D3 E0                     shl         ax,cl 
1F65    8B 3D                     mov         di,word ptr [di] 
1F67    89 C1                     mov         cx,ax 
1F69    8B 44 02                  mov         ax,word ptr 0x2[si] 
1F6C    89 FE                     mov         si,di 
1F6E    8E C0                     mov         es,ax 
1F70    8E D8                     mov         ds,ax 
1F72    01 CE                     add         si,cx 
1F74    01 D7                     add         di,dx 
1F76    43                        inc         bx 
1F77    A5                        movsw       
1F78    A5                        movsw       
1F79    A5                        movsw       
1F7A    A5                        movsw       
1F7B    8E 9E 04 01               mov         ds,word ptr 0x104[bp] 
1F7F    8B B6 CE 00               mov         si,word ptr 0xce[bp] 
1F83    83 C2 08                  add         dx,0x0008 
1F86    3B 5C 06                  cmp         bx,word ptr 0x6[si] 
1F89    7C C8                     jl          L$210 
1F8B                          L$211:
1F8B    8E 9E 04 01               mov         ds,word ptr 0x104[bp] 
1F8F    8B 9E CE 00               mov         bx,word ptr 0xce[bp] 
1F93    FF 4F 06                  dec         word ptr 0x6[bx] 
1F96                          L$212:
1F96    83 86 B6 01 06            add         word ptr 0x1b6[bp],0x0006 
1F9B    FF 86 3A 01               inc         word ptr 0x13a[bp] 
1F9F    E9 DD FC                  jmp         L$179 
1FA2                          L$213:
1FA2    8B BE FA FD               mov         di,word ptr -0x206[bp] 
1FA6    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
1FAA    31 C0                     xor         ax,ax 
1FAC    83 C7 3C                  add         di,0x003c 
1FAF    89 86 D0 00               mov         word ptr 0xd0[bp],ax 
1FB3    89 86 B8 01               mov         word ptr 0x1b8[bp],ax 
1FB7                          L$214:
1FB7    8E D9                     mov         ds,cx 
1FB9    8B 45 06                  mov         ax,word ptr 0x6[di] 
1FBC    3B 86 D0 00               cmp         ax,word ptr 0xd0[bp] 
1FC0    7F 6A                     jg          L$216 
1FC2    C7 45 06 00 00            mov         word ptr 0x6[di],0x0000 
1FC7    8D 9E 70 FE               lea         bx,-0x190[bp] 
1FCB    8B 86 76 FE               mov         ax,word ptr -0x18a[bp] 
1FCF    B1 03                     mov         cl,0x03 
1FD1    89 46 B2                  mov         word ptr -0x4e[bp],ax 
1FD4    89 46 B4                  mov         word ptr -0x4c[bp],ax 
1FD7    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
1FDA    89 9E D4 00               mov         word ptr 0xd4[bp],bx 
1FDE    50                        push        ax 
1FDF    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
1FE2    8B 9E 76 FE               mov         bx,word ptr -0x18a[bp] 
1FE6    50                        push        ax 
1FE7    89 D8                     mov         ax,bx 
1FE9    D3 E0                     shl         ax,cl 
1FEB    8C 96 46 01               mov         word ptr 0x146[bp],ss 
1FEF    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
1FF4    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
1FF9    89 46 AE                  mov         word ptr -0x52[bp],ax 
1FFC    89 56 B0                  mov         word ptr -0x50[bp],dx 
1FFF    31 DB                     xor         bx,bx 
2001    31 C0                     xor         ax,ax 
2003                          L$215:
2003    8E 9E 46 01               mov         ds,word ptr 0x146[bp] 
2007    8B B6 D4 00               mov         si,word ptr 0xd4[bp] 
200B    8B 54 06                  mov         dx,word ptr 0x6[si] 
200E    39 D3                     cmp         bx,dx 
2010    7D 53                     jge         L$219 
2012    8B BE D4 00               mov         di,word ptr 0xd4[bp] 
2016    43                        inc         bx 
2017    8B 34                     mov         si,word ptr [si] 
2019    8E 5D 02                  mov         ds,word ptr 0x2[di] 
201C    01 C6                     add         si,ax 
201E    C4 7E AE                  les         di,dword ptr -0x52[bp] 
2021    01 C7                     add         di,ax 
2023    05 08 00                  add         ax,0x0008 
2026    A5                        movsw       
2027    A5                        movsw       
2028    A5                        movsw       
2029    A5                        movsw       
202A    EB D7                     jmp         L$215 
202C                          L$216:
202C    8B 1D                     mov         bx,word ptr [di] 
202E    03 9E B8 01               add         bx,word ptr 0x1b8[bp] 
2032    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2035    8B 57 02                  mov         dx,word ptr 0x2[bx] 
2038    8B 37                     mov         si,word ptr [bx] 
203A    85 D2                     test        dx,dx 
203C    75 04                     jne         L$217 
203E    85 F6                     test        si,si 
2040    74 17                     je          L$218 
2042                          L$217:
2042    8E DA                     mov         ds,dx 
2044    8B 5C 26                  mov         bx,word ptr 0x26[si] 
2047    89 F0                     mov         ax,si 
2049    89 9E 22 01               mov         word ptr 0x122[bp],bx 
204D    8E 5C 28                  mov         ds,word ptr 0x28[si] 
2050    8B B6 22 01               mov         si,word ptr 0x122[bp] 
2054    BB 02 00                  mov         bx,0x0002 
2057    FF 1C                     call        dword ptr [si] 
2059                          L$218:
2059    83 86 B8 01 04            add         word ptr 0x1b8[bp],0x0004 
205E    FF 86 D0 00               inc         word ptr 0xd0[bp] 
2062    E9 52 FF                  jmp         L$214 
2065                          L$219:
2065    C7 46 82 27 00            mov         word ptr -0x7e[bp],0x0027 
206A    C7 86 4E 01 00 00         mov         word ptr 0x14e[bp],0x0000 
2070    83 7E B4 00               cmp         word ptr -0x4c[bp],0x0000 
2074    7F 03                     jg          L$220 
2076    E9 27 02                  jmp         L$229 
2079                          L$220:
2079    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
207D    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2081    83 C3 3C                  add         bx,0x003c 
2084    C7 86 BA 01 00 00         mov         word ptr 0x1ba[bp],0x0000 
208A    89 9E 92 01               mov         word ptr 0x192[bp],bx 
208E    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2092    89 86 94 01               mov         word ptr 0x194[bp],ax 
2096    83 C3 1C                  add         bx,0x001c 
2099    89 86 E4 00               mov         word ptr 0xe4[bp],ax 
209D    89 9E E2 00               mov         word ptr 0xe2[bp],bx 
20A1                          L$221:
20A1    B8 2A 00                  mov         ax,0x002a 
20A4    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
20A9    89 86 14 01               mov         word ptr 0x114[bp],ax 
20AD    89 96 50 01               mov         word ptr 0x150[bp],dx 
20B1    85 D2                     test        dx,dx 
20B3    75 07                     jne         L$222 
20B5    85 C0                     test        ax,ax 
20B7    75 03                     jne         L$222 
20B9    E9 F8 00                  jmp         L$225 
20BC                          L$222:
20BC    C7 46 82 28 00            mov         word ptr -0x7e[bp],0x0028 
20C1    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
20C5    8D 56 2E                  lea         dx,0x2e[bp] 
20C8    8D 9E 18 FE               lea         bx,-0x1e8[bp] 
20CC    8B 86 1E FE               mov         ax,word ptr -0x1e2[bp] 
20D0    B1 03                     mov         cl,0x03 
20D2    8C 96 DC 00               mov         word ptr 0xdc[bp],ss 
20D6    89 46 32                  mov         word ptr 0x32[bp],ax 
20D9    89 46 34                  mov         word ptr 0x34[bp],ax 
20DC    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
20DF    89 9E DE 00               mov         word ptr 0xde[bp],bx 
20E3    50                        push        ax 
20E4    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
20E7    8B 9E 1E FE               mov         bx,word ptr -0x1e2[bp] 
20EB    50                        push        ax 
20EC    89 D8                     mov         ax,bx 
20EE    8C 96 54 01               mov         word ptr 0x154[bp],ss 
20F2    D3 E0                     shl         ax,cl 
20F4    89 96 C8 01               mov         word ptr 0x1c8[bp],dx 
20F8    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
20FD    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2102    89 46 2E                  mov         word ptr 0x2e[bp],ax 
2105    89 56 30                  mov         word ptr 0x30[bp],dx 
2108    31 DB                     xor         bx,bx 
210A    31 C0                     xor         ax,ax 
210C                          L$223:
210C    8E 9E 54 01               mov         ds,word ptr 0x154[bp] 
2110    8B B6 DE 00               mov         si,word ptr 0xde[bp] 
2114    8B 54 06                  mov         dx,word ptr 0x6[si] 
2117    39 D3                     cmp         bx,dx 
2119    7D 1F                     jge         L$224 
211B    8B BE DE 00               mov         di,word ptr 0xde[bp] 
211F    8B 34                     mov         si,word ptr [si] 
2121    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2124    01 C6                     add         si,ax 
2126    C4 7E 2E                  les         di,dword ptr 0x2e[bp] 
2129    01 C7                     add         di,ax 
212B    43                        inc         bx 
212C    A5                        movsw       
212D    A5                        movsw       
212E    A5                        movsw       
212F    A5                        movsw       
2130    05 08 00                  add         ax,0x0008 
2133    C7 46 82 28 00            mov         word ptr -0x7e[bp],0x0028 
2138    EB D2                     jmp         L$223 
213A                          L$224:
213A    C5 9E E2 00               lds         bx,dword ptr 0xe2[bp] 
213E    C7 46 82 2A 00            mov         word ptr -0x7e[bp],0x002a 
2143    8B 1F                     mov         bx,word ptr [bx] 
2145    89 5E 4C                  mov         word ptr 0x4c[bp],bx 
2148    8B 9E E2 00               mov         bx,word ptr 0xe2[bp] 
214C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
214F    8B 5E 4C                  mov         bx,word ptr 0x4c[bp] 
2152    8E D8                     mov         ds,ax 
2154    89 46 4E                  mov         word ptr 0x4e[bp],ax 
2157    FF 07                     inc         word ptr [bx] 
2159    C5 5E AE                  lds         bx,dword ptr -0x52[bp] 
215C    03 9E BA 01               add         bx,word ptr 0x1ba[bp] 
2160    C7 46 82 2B 00            mov         word ptr -0x7e[bp],0x002b 
2165    8B 07                     mov         ax,word ptr [bx] 
2167    89 46 DE                  mov         word ptr -0x22[bp],ax 
216A    FF B6 DC 00               push        word ptr 0xdc[bp] 
216E    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2171    8D 56 4C                  lea         dx,0x4c[bp] 
2174    89 46 E0                  mov         word ptr -0x20[bp],ax 
2177    8C D1                     mov         cx,ss 
2179    8B 47 04                  mov         ax,word ptr 0x4[bx] 
217C    FF B6 C8 01               push        word ptr 0x1c8[bp] 
2180    89 46 E2                  mov         word ptr -0x1e[bp],ax 
2183    16                        push        ss 
2184    8B 47 06                  mov         ax,word ptr 0x6[bx] 
2187    52                        push        dx 
2188    89 46 E4                  mov         word ptr -0x1c[bp],ax 
218B    8B 86 14 01               mov         ax,word ptr 0x114[bp] 
218F    8B 96 50 01               mov         dx,word ptr 0x150[bp] 
2193    89 86 80 00               mov         word ptr 0x80[bp],ax 
2197    8B 86 50 01               mov         ax,word ptr 0x150[bp] 
219B    8D 5E DE                  lea         bx,-0x22[bp] 
219E    89 86 82 00               mov         word ptr 0x82[bp],ax 
21A2    8B 86 14 01               mov         ax,word ptr 0x114[bp] 
21A6    9A 00 00 00 00            call        far Boss1::Boss1( Rectangle, tnd::shared_ptr<Animation far >, tnd::vector<Rectangle far > const far & ) 
21AB    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
21AF    C7 46 82 2B 00            mov         word ptr -0x7e[bp],0x002b 
21B4                          L$225:
21B4    8B B6 92 01               mov         si,word ptr 0x192[bp] 
21B8    8D 5E 70                  lea         bx,0x70[bp] 
21BB    89 46 70                  mov         word ptr 0x70[bp],ax 
21BE    89 56 72                  mov         word ptr 0x72[bp],dx 
21C1    8B 86 94 01               mov         ax,word ptr 0x194[bp] 
21C5    89 9E E8 00               mov         word ptr 0xe8[bp],bx 
21C9    8E D8                     mov         ds,ax 
21CB    89 F3                     mov         bx,si 
21CD    89 86 E6 00               mov         word ptr 0xe6[bp],ax 
21D1    8B 47 06                  mov         ax,word ptr 0x6[bx] 
21D4    40                        inc         ax 
21D5    8C 96 EA 00               mov         word ptr 0xea[bp],ss 
21D9    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
21DC    7E 73                     jle         L$228 
21DE    D1 E0                     shl         ax,0x01 
21E0    D1 E0                     shl         ax,0x01 
21E2    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
21E7    8E 9E 94 01               mov         ds,word ptr 0x194[bp] 
21EB    89 C7                     mov         di,ax 
21ED    89 86 EC 00               mov         word ptr 0xec[bp],ax 
21F1    8B 47 06                  mov         ax,word ptr 0x6[bx] 
21F4    40                        inc         ax 
21F5    89 96 EE 00               mov         word ptr 0xee[bp],dx 
21F9    89 47 04                  mov         word ptr 0x4[bx],ax 
21FC    31 C0                     xor         ax,ax 
21FE    83 7F 06 00               cmp         word ptr 0x6[bx],0x0000 
2202    7E 2E                     jle         L$227 
2204    89 FB                     mov         bx,di 
2206    8E C2                     mov         es,dx 
2208                          L$226:
2208    89 C7                     mov         di,ax 
220A    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
220E    D1 E7                     shl         di,0x01 
2210    8B 14                     mov         dx,word ptr [si] 
2212    D1 E7                     shl         di,0x01 
2214    8E 5C 02                  mov         ds,word ptr 0x2[si] 
2217    01 D7                     add         di,dx 
2219    8B 0D                     mov         cx,word ptr [di] 
221B    8B 55 02                  mov         dx,word ptr 0x2[di] 
221E    26 89 0F                  mov         word ptr es:[bx],cx 
2221    40                        inc         ax 
2222    26 89 57 02               mov         word ptr es:0x2[bx],dx 
2226    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
222A    83 C3 04                  add         bx,0x0004 
222D    3B 44 06                  cmp         ax,word ptr 0x6[si] 
2230    7C D6                     jl          L$226 
2232                          L$227:
2232    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
2236    8B 04                     mov         ax,word ptr [si] 
2238    8B 54 02                  mov         dx,word ptr 0x2[si] 
223B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
2240    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
2244    8B 86 EC 00               mov         ax,word ptr 0xec[bp] 
2248    89 04                     mov         word ptr [si],ax 
224A    8B 86 EE 00               mov         ax,word ptr 0xee[bp] 
224E    89 44 02                  mov         word ptr 0x2[si],ax 
2251                          L$228:
2251    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
2255    8B BE E8 00               mov         di,word ptr 0xe8[bp] 
2259    83 86 BA 01 08            add         word ptr 0x1ba[bp],0x0008 
225E    8B 5C 06                  mov         bx,word ptr 0x6[si] 
2261    8B 04                     mov         ax,word ptr [si] 
2263    D1 E3                     shl         bx,0x01 
2265    8E 5C 02                  mov         ds,word ptr 0x2[si] 
2268    D1 E3                     shl         bx,0x01 
226A    8E 86 EA 00               mov         es,word ptr 0xea[bp] 
226E    01 C3                     add         bx,ax 
2270    26 8B 05                  mov         ax,word ptr es:[di] 
2273    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
2277    89 07                     mov         word ptr [bx],ax 
2279    FF 86 4E 01               inc         word ptr 0x14e[bp] 
227D    89 57 02                  mov         word ptr 0x2[bx],dx 
2280    8E 9E E6 00               mov         ds,word ptr 0xe6[bp] 
2284    B8 27 00                  mov         ax,0x0027 
2287    FF 44 06                  inc         word ptr 0x6[si] 
228A    9A 00 00 00 00            call        __wcpp_4_destruct__ 
228F    8B 86 4E 01               mov         ax,word ptr 0x14e[bp] 
2293    C7 46 82 27 00            mov         word ptr -0x7e[bp],0x0027 
2298    3B 46 B4                  cmp         ax,word ptr -0x4c[bp] 
229B    7D 03                     jge         L$229 
229D    E9 01 FE                  jmp         L$221 
22A0                          L$229:
22A0    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
22A5    8B 46 AE                  mov         ax,word ptr -0x52[bp] 
22A8    8B 56 B0                  mov         dx,word ptr -0x50[bp] 
22AB    8D 9E 78 FE               lea         bx,-0x188[bp] 
22AF    9A 00 00 00 00            call        void far operator delete []( void far * ) 
22B4    8B 86 7E FE               mov         ax,word ptr -0x182[bp] 
22B8    B1 03                     mov         cl,0x03 
22BA    89 46 9A                  mov         word ptr -0x66[bp],ax 
22BD    89 46 9C                  mov         word ptr -0x64[bp],ax 
22C0    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
22C3    89 9E F2 00               mov         word ptr 0xf2[bp],bx 
22C7    50                        push        ax 
22C8    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
22CB    8B 9E 7E FE               mov         bx,word ptr -0x182[bp] 
22CF    50                        push        ax 
22D0    89 D8                     mov         ax,bx 
22D2    8C 96 CC 01               mov         word ptr 0x1cc[bp],ss 
22D6    D3 E0                     shl         ax,cl 
22D8    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
22DD    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
22E2    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
22E7    89 46 96                  mov         word ptr -0x6a[bp],ax 
22EA    89 56 98                  mov         word ptr -0x68[bp],dx 
22ED    31 DB                     xor         bx,bx 
22EF    31 C0                     xor         ax,ax 
22F1                          L$230:
22F1    8E 9E CC 01               mov         ds,word ptr 0x1cc[bp] 
22F5    8B B6 F2 00               mov         si,word ptr 0xf2[bp] 
22F9    8B 54 06                  mov         dx,word ptr 0x6[si] 
22FC    39 D3                     cmp         bx,dx 
22FE    7D 1A                     jge         L$231 
2300    8B BE F2 00               mov         di,word ptr 0xf2[bp] 
2304    43                        inc         bx 
2305    8B 34                     mov         si,word ptr [si] 
2307    8E 5D 02                  mov         ds,word ptr 0x2[di] 
230A    01 C6                     add         si,ax 
230C    C4 7E 96                  les         di,dword ptr -0x6a[bp] 
230F    01 C7                     add         di,ax 
2311    05 08 00                  add         ax,0x0008 
2314    A5                        movsw       
2315    A5                        movsw       
2316    A5                        movsw       
2317    A5                        movsw       
2318    EB D7                     jmp         L$230 
231A                          L$231:
231A    C7 46 82 2D 00            mov         word ptr -0x7e[bp],0x002d 
231F    C7 86 F6 00 00 00         mov         word ptr 0xf6[bp],0x0000 
2325    83 7E 9C 00               cmp         word ptr -0x64[bp],0x0000 
2329    7F 03                     jg          L$232 
232B    E9 26 02                  jmp         L$241 
232E                          L$232:
232E    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2332    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2336    83 C3 3C                  add         bx,0x003c 
2339    C7 86 BC 01 00 00         mov         word ptr 0x1bc[bp],0x0000 
233F    89 9E 96 01               mov         word ptr 0x196[bp],bx 
2343    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2347    89 86 98 01               mov         word ptr 0x198[bp],ax 
234B    83 C3 1C                  add         bx,0x001c 
234E    89 86 08 01               mov         word ptr 0x108[bp],ax 
2352    89 9E 06 01               mov         word ptr 0x106[bp],bx 
2356                          L$233:
2356    B8 2A 00                  mov         ax,0x002a 
2359    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
235E    89 86 FA 00               mov         word ptr 0xfa[bp],ax 
2362    89 96 CE 01               mov         word ptr 0x1ce[bp],dx 
2366    85 D2                     test        dx,dx 
2368    75 07                     jne         L$234 
236A    85 C0                     test        ax,ax 
236C    75 03                     jne         L$234 
236E    E9 F4 00                  jmp         L$237 
2371                          L$234:
2371    C7 46 82 2E 00            mov         word ptr -0x7e[bp],0x002e 
2376    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
237A    8D 56 F6                  lea         dx,-0xa[bp] 
237D    8D 9E 18 FE               lea         bx,-0x1e8[bp] 
2381    8B 86 1E FE               mov         ax,word ptr -0x1e2[bp] 
2385    B1 03                     mov         cl,0x03 
2387    8C 96 FE 00               mov         word ptr 0xfe[bp],ss 
238B    89 46 FA                  mov         word ptr -0x6[bp],ax 
238E    89 46 FC                  mov         word ptr -0x4[bp],ax 
2391    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2394    89 9E 00 01               mov         word ptr 0x100[bp],bx 
2398    50                        push        ax 
2399    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
239C    8B 9E 1E FE               mov         bx,word ptr -0x1e2[bp] 
23A0    50                        push        ax 
23A1    89 D8                     mov         ax,bx 
23A3    8C 96 02 01               mov         word ptr 0x102[bp],ss 
23A7    D3 E0                     shl         ax,cl 
23A9    89 96 FC 00               mov         word ptr 0xfc[bp],dx 
23AD    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
23B2    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
23B7    89 46 F6                  mov         word ptr -0xa[bp],ax 
23BA    89 56 F8                  mov         word ptr -0x8[bp],dx 
23BD    31 DB                     xor         bx,bx 
23BF    31 C0                     xor         ax,ax 
23C1                          L$235:
23C1    C5 B6 00 01               lds         si,dword ptr 0x100[bp] 
23C5    8B 54 06                  mov         dx,word ptr 0x6[si] 
23C8    39 D3                     cmp         bx,dx 
23CA    7D 1F                     jge         L$236 
23CC    8B BE 00 01               mov         di,word ptr 0x100[bp] 
23D0    8B 34                     mov         si,word ptr [si] 
23D2    8E 5D 02                  mov         ds,word ptr 0x2[di] 
23D5    01 C6                     add         si,ax 
23D7    C4 7E F6                  les         di,dword ptr -0xa[bp] 
23DA    01 C7                     add         di,ax 
23DC    43                        inc         bx 
23DD    A5                        movsw       
23DE    A5                        movsw       
23DF    A5                        movsw       
23E0    A5                        movsw       
23E1    05 08 00                  add         ax,0x0008 
23E4    C7 46 82 2E 00            mov         word ptr -0x7e[bp],0x002e 
23E9    EB D6                     jmp         L$235 
23EB                          L$236:
23EB    C5 9E 06 01               lds         bx,dword ptr 0x106[bp] 
23EF    C7 46 82 30 00            mov         word ptr -0x7e[bp],0x0030 
23F4    8B 1F                     mov         bx,word ptr [bx] 
23F6    89 5E 40                  mov         word ptr 0x40[bp],bx 
23F9    8B 9E 06 01               mov         bx,word ptr 0x106[bp] 
23FD    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2400    8B 5E 40                  mov         bx,word ptr 0x40[bp] 
2403    8E D8                     mov         ds,ax 
2405    89 46 42                  mov         word ptr 0x42[bp],ax 
2408    FF 07                     inc         word ptr [bx] 
240A    C5 5E 96                  lds         bx,dword ptr -0x6a[bp] 
240D    03 9E BC 01               add         bx,word ptr 0x1bc[bp] 
2411    C7 46 82 31 00            mov         word ptr -0x7e[bp],0x0031 
2416    8B 07                     mov         ax,word ptr [bx] 
2418    89 46 FE                  mov         word ptr -0x2[bp],ax 
241B    FF B6 FE 00               push        word ptr 0xfe[bp] 
241F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2422    8D 56 40                  lea         dx,0x40[bp] 
2425    89 46 00                  mov         word ptr [bp],ax 
2428    8C D1                     mov         cx,ss 
242A    8B 47 04                  mov         ax,word ptr 0x4[bx] 
242D    FF B6 FC 00               push        word ptr 0xfc[bp] 
2431    89 46 02                  mov         word ptr 0x2[bp],ax 
2434    16                        push        ss 
2435    8B 47 06                  mov         ax,word ptr 0x6[bx] 
2438    52                        push        dx 
2439    89 46 04                  mov         word ptr 0x4[bp],ax 
243C    8B 86 FA 00               mov         ax,word ptr 0xfa[bp] 
2440    8B 96 CE 01               mov         dx,word ptr 0x1ce[bp] 
2444    89 86 80 00               mov         word ptr 0x80[bp],ax 
2448    8B 86 CE 01               mov         ax,word ptr 0x1ce[bp] 
244C    8D 5E FE                  lea         bx,-0x2[bp] 
244F    89 86 82 00               mov         word ptr 0x82[bp],ax 
2453    8B 86 FA 00               mov         ax,word ptr 0xfa[bp] 
2457    9A 00 00 00 00            call        far Boss1::Boss1( Rectangle, tnd::shared_ptr<Animation far >, tnd::vector<Rectangle far > const far & ) 
245C    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
2460    C7 46 82 31 00            mov         word ptr -0x7e[bp],0x0031 
2465                          L$237:
2465    8B B6 96 01               mov         si,word ptr 0x196[bp] 
2469    8D 9E 8C 00               lea         bx,0x8c[bp] 
246D    89 86 8C 00               mov         word ptr 0x8c[bp],ax 
2471    89 96 8E 00               mov         word ptr 0x8e[bp],dx 
2475    8B 86 98 01               mov         ax,word ptr 0x198[bp] 
2479    89 9E 0A 01               mov         word ptr 0x10a[bp],bx 
247D    8E D8                     mov         ds,ax 
247F    89 F3                     mov         bx,si 
2481    89 86 3E 01               mov         word ptr 0x13e[bp],ax 
2485    8B 47 06                  mov         ax,word ptr 0x6[bx] 
2488    40                        inc         ax 
2489    8C 96 0C 01               mov         word ptr 0x10c[bp],ss 
248D    3B 47 04                  cmp         ax,word ptr 0x4[bx] 
2490    7E 73                     jle         L$240 
2492    D1 E0                     shl         ax,0x01 
2494    D1 E0                     shl         ax,0x01 
2496    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
249B    8E 9E 98 01               mov         ds,word ptr 0x198[bp] 
249F    89 C1                     mov         cx,ax 
24A1    89 86 0E 01               mov         word ptr 0x10e[bp],ax 
24A5    8B 47 06                  mov         ax,word ptr 0x6[bx] 
24A8    40                        inc         ax 
24A9    89 96 7A 01               mov         word ptr 0x17a[bp],dx 
24AD    89 47 04                  mov         word ptr 0x4[bx],ax 
24B0    31 C0                     xor         ax,ax 
24B2    83 7F 06 00               cmp         word ptr 0x6[bx],0x0000 
24B6    7E 2E                     jle         L$239 
24B8    89 CB                     mov         bx,cx 
24BA    8E C2                     mov         es,dx 
24BC                          L$238:
24BC    89 C2                     mov         dx,ax 
24BE    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
24C2    D1 E2                     shl         dx,0x01 
24C4    8B 3C                     mov         di,word ptr [si] 
24C6    D1 E2                     shl         dx,0x01 
24C8    8E 5C 02                  mov         ds,word ptr 0x2[si] 
24CB    01 D7                     add         di,dx 
24CD    8B 0D                     mov         cx,word ptr [di] 
24CF    8B 55 02                  mov         dx,word ptr 0x2[di] 
24D2    26 89 0F                  mov         word ptr es:[bx],cx 
24D5    40                        inc         ax 
24D6    26 89 57 02               mov         word ptr es:0x2[bx],dx 
24DA    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
24DE    83 C3 04                  add         bx,0x0004 
24E1    3B 44 06                  cmp         ax,word ptr 0x6[si] 
24E4    7C D6                     jl          L$238 
24E6                          L$239:
24E6    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
24EA    8B 04                     mov         ax,word ptr [si] 
24EC    8B 54 02                  mov         dx,word ptr 0x2[si] 
24EF    9A 00 00 00 00            call        void far operator delete []( void far * ) 
24F4    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
24F8    8B 86 0E 01               mov         ax,word ptr 0x10e[bp] 
24FC    89 04                     mov         word ptr [si],ax 
24FE    8B 86 7A 01               mov         ax,word ptr 0x17a[bp] 
2502    89 44 02                  mov         word ptr 0x2[si],ax 
2505                          L$240:
2505    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
2509    8B BE 0A 01               mov         di,word ptr 0x10a[bp] 
250D    83 86 BC 01 08            add         word ptr 0x1bc[bp],0x0008 
2512    8B 44 06                  mov         ax,word ptr 0x6[si] 
2515    8B 1C                     mov         bx,word ptr [si] 
2517    D1 E0                     shl         ax,0x01 
2519    8E 5C 02                  mov         ds,word ptr 0x2[si] 
251C    D1 E0                     shl         ax,0x01 
251E    8E 86 0C 01               mov         es,word ptr 0x10c[bp] 
2522    01 C3                     add         bx,ax 
2524    26 8B 05                  mov         ax,word ptr es:[di] 
2527    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
252B    89 07                     mov         word ptr [bx],ax 
252D    FF 86 F6 00               inc         word ptr 0xf6[bp] 
2531    89 57 02                  mov         word ptr 0x2[bx],dx 
2534    8E 9E 3E 01               mov         ds,word ptr 0x13e[bp] 
2538    B8 2D 00                  mov         ax,0x002d 
253B    FF 44 06                  inc         word ptr 0x6[si] 
253E    9A 00 00 00 00            call        __wcpp_4_destruct__ 
2543    8B 86 F6 00               mov         ax,word ptr 0xf6[bp] 
2547    C7 46 82 2D 00            mov         word ptr -0x7e[bp],0x002d 
254C    3B 46 9C                  cmp         ax,word ptr -0x64[bp] 
254F    7D 03                     jge         L$241 
2551    E9 02 FE                  jmp         L$233 
2554                          L$241:
2554    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
2559    8B 46 96                  mov         ax,word ptr -0x6a[bp] 
255C    8B 56 98                  mov         dx,word ptr -0x68[bp] 
255F    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2563    9A 00 00 00 00            call        void far operator delete []( void far * ) 
2568    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
256D    83 C3 5C                  add         bx,0x005c 
2570    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2574    89 DF                     mov         di,bx 
2576    8C 9E D0 01               mov         word ptr 0x1d0[bp],ds 
257A    89 D9                     mov         cx,bx 
257C    8C 9E 10 01               mov         word ptr 0x110[bp],ds 
2580    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2583    8B 17                     mov         dx,word ptr [bx] 
2585    85 C0                     test        ax,ax 
2587    75 04                     jne         L$242 
2589    85 D2                     test        dx,dx 
258B    74 4D                     je          L$246 
258D                          L$242:
258D    89 D6                     mov         si,dx 
258F    8E D8                     mov         ds,ax 
2591    83 3C 01                  cmp         word ptr [si],0x0001 
2594    74 03                     je          L$243 
2596    E9 6E 02                  jmp         L$255 
2599                          L$243:
2599    8B 54 04                  mov         dx,word ptr 0x4[si] 
259C    8B 44 02                  mov         ax,word ptr 0x2[si] 
259F    85 D2                     test        dx,dx 
25A1    75 04                     jne         L$244 
25A3    85 C0                     test        ax,ax 
25A5    74 1E                     je          L$245 
25A7                          L$244:
25A7    C7 46 82 33 00            mov         word ptr -0x7e[bp],0x0033 
25AC    89 86 CC FE               mov         word ptr -0x134[bp],ax 
25B0    31 DB                     xor         bx,bx 
25B2    89 96 CE FE               mov         word ptr -0x132[bp],dx 
25B6    9A 00 00 00 00            call        far Physics::~Physics() 
25BB    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
25C0    9A 00 00 00 00            call        void far operator delete( void far * ) 
25C5                          L$245:
25C5    8E 9E 10 01               mov         ds,word ptr 0x110[bp] 
25C9    89 CB                     mov         bx,cx 
25CB    8B 07                     mov         ax,word ptr [bx] 
25CD    8B 57 02                  mov         dx,word ptr 0x2[bx] 
25D0    9A 00 00 00 00            call        void far operator delete( void far * ) 
25D5    C7 46 82 1C 00            mov         word ptr -0x7e[bp],0x001c 
25DA                          L$246:
25DA    8E 9E D0 01               mov         ds,word ptr 0x1d0[bp] 
25DE    C7 05 00 00               mov         word ptr [di],0x0000 
25E2    B8 7A 00                  mov         ax,0x007a 
25E5    C7 45 02 00 00            mov         word ptr 0x2[di],0x0000 
25EA    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
25EF    89 86 12 01               mov         word ptr 0x112[bp],ax 
25F3    89 D7                     mov         di,dx 
25F5    85 D2                     test        dx,dx 
25F7    75 07                     jne         L$247 
25F9    85 C0                     test        ax,ax 
25FB    75 03                     jne         L$247 
25FD    E9 81 00                  jmp         L$248 
2600                          L$247:
2600    C7 46 82 35 00            mov         word ptr -0x7e[bp],0x0035 
2605    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2609    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
260D    80 4E 84 02               or          byte ptr -0x7c[bp],0x02 
2611    8B 9C 92 00               mov         bx,word ptr 0x92[si] 
2615    89 5E 58                  mov         word ptr 0x58[bp],bx 
2618    8D 56 58                  lea         dx,0x58[bp] 
261B    8B 84 94 00               mov         ax,word ptr 0x94[si] 
261F    16                        push        ss 
2620    89 46 5A                  mov         word ptr 0x5a[bp],ax 
2623    8E D8                     mov         ds,ax 
2625    52                        push        dx 
2626    FF 07                     inc         word ptr [bx] 
2628    B8 06 00                  mov         ax,0x0006 
262B    C7 46 82 37 00            mov         word ptr -0x7e[bp],0x0037 
2630    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
2635    89 C3                     mov         bx,ax 
2637    8E DA                     mov         ds,dx 
2639    89 46 3C                  mov         word ptr 0x3c[bp],ax 
263C    89 56 3E                  mov         word ptr 0x3e[bp],dx 
263F    C7 07 01 00               mov         word ptr [bx],0x0001 
2643    81 C6 92 00               add         si,0x0092 
2647    C5 5E 3C                  lds         bx,dword ptr 0x3c[bp] 
264A    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
264E    89 77 02                  mov         word ptr 0x2[bx],si 
2651    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2655    C5 5E 3C                  lds         bx,dword ptr 0x3c[bp] 
2658    8C D1                     mov         cx,ss 
265A    89 47 04                  mov         word ptr 0x4[bx],ax 
265D    89 FA                     mov         dx,di 
265F    C7 46 82 38 00            mov         word ptr -0x7e[bp],0x0038 
2664    8B 86 12 01               mov         ax,word ptr 0x112[bp] 
2668    8D 5E 3C                  lea         bx,0x3c[bp] 
266B    89 BE 82 00               mov         word ptr 0x82[bp],di 
266F    89 86 80 00               mov         word ptr 0x80[bp],ax 
2673    9A 00 00 00 00            call        far Physics::Physics( tnd::shared_ptr<PhysicsCallback far >, tnd::shared_ptr<SoundController far > ) 
2678    80 66 84 FD               and         byte ptr -0x7c[bp],0xfd 
267C    C7 46 82 38 00            mov         word ptr -0x7e[bp],0x0038 
2681                          L$248:
2681    89 C6                     mov         si,ax 
2683    89 D1                     mov         cx,dx 
2685    85 C9                     test        cx,cx 
2687    75 07                     jne         L$249 
2689    85 F6                     test        si,si 
268B    75 03                     jne         L$249 
268D    E9 7C 01                  jmp         L$256 
2690                          L$249:
2690    B8 06 00                  mov         ax,0x0006 
2693    9A 00 00 00 00            call        void far * far operator new( int unsigned ) 
2698    89 C3                     mov         bx,ax 
269A    8E DA                     mov         ds,dx 
269C    89 46 5C                  mov         word ptr 0x5c[bp],ax 
269F    89 56 5E                  mov         word ptr 0x5e[bp],dx 
26A2    C7 07 01 00               mov         word ptr [bx],0x0001 
26A6    C5 5E 5C                  lds         bx,dword ptr 0x5c[bp] 
26A9    89 77 02                  mov         word ptr 0x2[bx],si 
26AC    C5 5E 5C                  lds         bx,dword ptr 0x5c[bp] 
26AF    89 4F 04                  mov         word ptr 0x4[bx],cx 
26B2                          L$250:
26B2    C7 46 82 39 00            mov         word ptr -0x7e[bp],0x0039 
26B7    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
26BB    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
26BF    8D 5E 5C                  lea         bx,0x5c[bp] 
26C2    8C D0                     mov         ax,ss 
26C4    8C 96 18 01               mov         word ptr 0x118[bp],ss 
26C8    83 C6 5C                  add         si,0x005c 
26CB    8C D9                     mov         cx,ds 
26CD    89 9E 52 01               mov         word ptr 0x152[bp],bx 
26D1    89 F7                     mov         di,si 
26D3    39 C8                     cmp         ax,cx 
26D5    74 03                     je          L$252 
26D7                          L$251:
26D7    E9 BC 02                  jmp         L$271 
26DA                          L$252:
26DA    39 DE                     cmp         si,bx 
26DC    75 F9                     jne         L$251 
26DE                          L$253:
26DE    B8 1C 00                  mov         ax,0x001c 
26E1    9A 00 00 00 00            call        __wcpp_4_destruct__ 
26E6    31 C0                     xor         ax,ax 
26E8    89 86 E4 FE               mov         word ptr -0x11c[bp],ax 
26EC    89 86 E6 FE               mov         word ptr -0x11a[bp],ax 
26F0    89 86 E8 FE               mov         word ptr -0x118[bp],ax 
26F4    89 86 EA FE               mov         word ptr -0x116[bp],ax 
26F8    30 C0                     xor         al,al 
26FA    88 86 EC FE               mov         byte ptr -0x114[bp],al 
26FE    88 86 ED FE               mov         byte ptr -0x113[bp],al 
2702    88 86 EE FE               mov         byte ptr -0x112[bp],al 
2706    30 E4                     xor         ah,ah 
2708    89 86 F0 FE               mov         word ptr -0x110[bp],ax 
270C    89 86 F2 FE               mov         word ptr -0x10e[bp],ax 
2710    8B 86 A0 00               mov         ax,word ptr 0xa0[bp] 
2714    89 86 E0 FE               mov         word ptr -0x120[bp],ax 
2718    8B 86 CA 01               mov         ax,word ptr 0x1ca[bp] 
271C    89 86 E2 FE               mov         word ptr -0x11e[bp],ax 
2720    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2724    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2728    8E D8                     mov         ds,ax 
272A    C5 7F 0C                  lds         di,dword ptr 0xc[bx] 
272D    89 86 22 01               mov         word ptr 0x122[bp],ax 
2731    C5 75 02                  lds         si,dword ptr 0x2[di] 
2734    89 F0                     mov         ax,si 
2736    8C DA                     mov         dx,ds 
2738    C4 3C                     les         di,dword ptr [si] 
273A    B1 04                     mov         cl,0x04 
273C    26 FF 5D 04               call        dword ptr es:0x4[di] 
2740    D3 E0                     shl         ax,cl 
2742    8E 9E 22 01               mov         ds,word ptr 0x122[bp] 
2746    89 86 E4 FE               mov         word ptr -0x11c[bp],ax 
274A    C5 77 0C                  lds         si,dword ptr 0xc[bx] 
274D    83 C3 0C                  add         bx,0x000c 
2750    C5 5C 02                  lds         bx,dword ptr 0x2[si] 
2753    89 D8                     mov         ax,bx 
2755    C4 37                     les         si,dword ptr [bx] 
2757    8C DA                     mov         dx,ds 
2759    26 FF 5C 08               call        dword ptr es:0x8[si] 
275D    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2761    D3 E0                     shl         ax,cl 
2763    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2767    89 86 E6 FE               mov         word ptr -0x11a[bp],ax 
276B    31 C0                     xor         ax,ax 
276D    83 C3 5C                  add         bx,0x005c 
2770    89 86 E8 FE               mov         word ptr -0x118[bp],ax 
2774    89 86 EA FE               mov         word ptr -0x116[bp],ax 
2778    8C D1                     mov         cx,ss 
277A    C5 37                     lds         si,dword ptr [bx] 
277C    8D 9E E0 FE               lea         bx,-0x120[bp] 
2780    8B 44 02                  mov         ax,word ptr 0x2[si] 
2783    8B 54 04                  mov         dx,word ptr 0x4[si] 
2786    9A 00 00 00 00            call        int far Physics::addActor( Actor const far & ) 
278B    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
278F    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2793    89 47 64                  mov         word ptr 0x64[bx],ax 
2796    B1 03                     mov         cl,0x03 
2798    8B 86 1E FE               mov         ax,word ptr -0x1e2[bp] 
279C    8D 9E 18 FE               lea         bx,-0x1e8[bp] 
27A0    89 46 C2                  mov         word ptr -0x3e[bp],ax 
27A3    89 46 C4                  mov         word ptr -0x3c[bp],ax 
27A6    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
27A9    89 9E 26 01               mov         word ptr 0x126[bp],bx 
27AD    50                        push        ax 
27AE    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
27B1    8B 9E 1E FE               mov         bx,word ptr -0x1e2[bp] 
27B5    50                        push        ax 
27B6    89 D8                     mov         ax,bx 
27B8    D3 E0                     shl         ax,cl 
27BA    8C 96 D2 01               mov         word ptr 0x1d2[bp],ss 
27BE    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
27C3    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
27C8    89 46 BE                  mov         word ptr -0x42[bp],ax 
27CB    89 56 C0                  mov         word ptr -0x40[bp],dx 
27CE    31 D2                     xor         dx,dx 
27D0    31 C0                     xor         ax,ax 
27D2                          L$254:
27D2    8E 9E D2 01               mov         ds,word ptr 0x1d2[bp] 
27D6    8B 9E 26 01               mov         bx,word ptr 0x126[bp] 
27DA    8B 5F 06                  mov         bx,word ptr 0x6[bx] 
27DD    39 DA                     cmp         dx,bx 
27DF    7D 36                     jge         L$257 
27E1    8B B6 26 01               mov         si,word ptr 0x126[bp] 
27E5    8B 9E 26 01               mov         bx,word ptr 0x126[bp] 
27E9    8B 7E BE                  mov         di,word ptr -0x42[bp] 
27EC    8B 34                     mov         si,word ptr [si] 
27EE    01 C7                     add         di,ax 
27F0    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
27F3    01 C6                     add         si,ax 
27F5    8E 46 C0                  mov         es,word ptr -0x40[bp] 
27F8    42                        inc         dx 
27F9    A5                        movsw       
27FA    A5                        movsw       
27FB    A5                        movsw       
27FC    A5                        movsw       
27FD    05 08 00                  add         ax,0x0008 
2800    C7 46 82 34 00            mov         word ptr -0x7e[bp],0x0034 
2805    EB CB                     jmp         L$254 
2807                          L$255:
2807    FF 0C                     dec         word ptr [si] 
2809    E9 CE FD                  jmp         L$246 
280C                          L$256:
280C    31 C0                     xor         ax,ax 
280E    89 46 5C                  mov         word ptr 0x5c[bp],ax 
2811    89 46 5E                  mov         word ptr 0x5e[bp],ax 
2814    E9 9B FE                  jmp         L$250 
2817                          L$257:
2817    8D 9E 20 FE               lea         bx,-0x1e0[bp] 
281B    8B 86 26 FE               mov         ax,word ptr -0x1da[bp] 
281F    B1 03                     mov         cl,0x03 
2821    89 46 F2                  mov         word ptr -0xe[bp],ax 
2824    89 46 F4                  mov         word ptr -0xc[bp],ax 
2827    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
282A    89 9E 2A 01               mov         word ptr 0x12a[bp],bx 
282E    50                        push        ax 
282F    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2832    8B 9E 26 FE               mov         bx,word ptr -0x1da[bp] 
2836    50                        push        ax 
2837    89 D8                     mov         ax,bx 
2839    C7 46 82 3C 00            mov         word ptr -0x7e[bp],0x003c 
283E    D3 E0                     shl         ax,cl 
2840    8C 96 2C 01               mov         word ptr 0x12c[bp],ss 
2844    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2849    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
284E    89 46 EE                  mov         word ptr -0x12[bp],ax 
2851    89 56 F0                  mov         word ptr -0x10[bp],dx 
2854    31 DB                     xor         bx,bx 
2856    31 C0                     xor         ax,ax 
2858                          L$258:
2858    C5 B6 2A 01               lds         si,dword ptr 0x12a[bp] 
285C    8B 54 06                  mov         dx,word ptr 0x6[si] 
285F    39 D3                     cmp         bx,dx 
2861    7D 1A                     jge         L$259 
2863    8B BE 2A 01               mov         di,word ptr 0x12a[bp] 
2867    43                        inc         bx 
2868    8B 34                     mov         si,word ptr [si] 
286A    8E 5D 02                  mov         ds,word ptr 0x2[di] 
286D    01 C6                     add         si,ax 
286F    C4 7E EE                  les         di,dword ptr -0x12[bp] 
2872    01 C7                     add         di,ax 
2874    05 08 00                  add         ax,0x0008 
2877    A5                        movsw       
2878    A5                        movsw       
2879    A5                        movsw       
287A    A5                        movsw       
287B    EB DB                     jmp         L$258 
287D                          L$259:
287D    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2881    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2885    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
288A    8B 87 88 00               mov         ax,word ptr 0x88[bx] 
288E    81 C3 82 00               add         bx,0x0082 
2892    3B 86 98 FE               cmp         ax,word ptr -0x168[bp] 
2896    73 03                     jae         L$260 
2898    E9 79 01                  jmp         L$277 
289B                          L$260:
289B    C7 86 30 01 00 00         mov         word ptr 0x130[bp],0x0000 
28A1    83 7E F4 00               cmp         word ptr -0xc[bp],0x0000 
28A5    7F 03                     jg          L$261 
28A7    E9 BB 00                  jmp         L$266 
28AA                          L$261:
28AA    C7 86 BE 01 00 00         mov         word ptr 0x1be[bp],0x0000 
28B0                          L$262:
28B0    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
28B3    03 9E BE 01               add         bx,word ptr 0x1be[bp] 
28B7    89 9E 34 01               mov         word ptr 0x134[bp],bx 
28BB    8B 5E C4                  mov         bx,word ptr -0x3c[bp] 
28BE    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
28C1    43                        inc         bx 
28C2    89 86 36 01               mov         word ptr 0x136[bp],ax 
28C6    3B 5E C2                  cmp         bx,word ptr -0x3e[bp] 
28C9    7E 6D                     jle         L$265 
28CB    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
28CE    50                        push        ax 
28CF    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
28D2    B1 03                     mov         cl,0x03 
28D4    50                        push        ax 
28D5    89 D8                     mov         ax,bx 
28D7    D3 E0                     shl         ax,cl 
28D9    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
28DE    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
28E3    89 C1                     mov         cx,ax 
28E5    89 86 68 01               mov         word ptr 0x168[bp],ax 
28E9    8B 46 C4                  mov         ax,word ptr -0x3c[bp] 
28EC    89 D6                     mov         si,dx 
28EE    40                        inc         ax 
28EF    89 96 38 01               mov         word ptr 0x138[bp],dx 
28F3    89 46 C2                  mov         word ptr -0x3e[bp],ax 
28F6    31 C0                     xor         ax,ax 
28F8    83 7E C4 00               cmp         word ptr -0x3c[bp],0x0000 
28FC    7E 21                     jle         L$264 
28FE    89 CA                     mov         dx,cx 
2900    89 F3                     mov         bx,si 
2902    B1 03                     mov         cl,0x03 
2904    8E C3                     mov         es,bx 
2906                          L$263:
2906    89 C6                     mov         si,ax 
2908    8E 5E C0                  mov         ds,word ptr -0x40[bp] 
290B    D3 E6                     shl         si,cl 
290D    89 D7                     mov         di,dx 
290F    03 76 BE                  add         si,word ptr -0x42[bp] 
2912    40                        inc         ax 
2913    A5                        movsw       
2914    A5                        movsw       
2915    A5                        movsw       
2916    A5                        movsw       
2917    83 C2 08                  add         dx,0x0008 
291A    3B 46 C4                  cmp         ax,word ptr -0x3c[bp] 
291D    7C E7                     jl          L$263 
291F                          L$264:
291F    8B 46 BE                  mov         ax,word ptr -0x42[bp] 
2922    8B 56 C0                  mov         dx,word ptr -0x40[bp] 
2925    9A 00 00 00 00            call        void far operator delete []( void far * ) 
292A    8B 86 68 01               mov         ax,word ptr 0x168[bp] 
292E    89 46 BE                  mov         word ptr -0x42[bp],ax 
2931    8B 86 38 01               mov         ax,word ptr 0x138[bp] 
2935    89 46 C0                  mov         word ptr -0x40[bp],ax 
2938                          L$265:
2938    B1 03                     mov         cl,0x03 
293A    8B 7E C4                  mov         di,word ptr -0x3c[bp] 
293D    8E 46 C0                  mov         es,word ptr -0x40[bp] 
2940    C5 B6 34 01               lds         si,dword ptr 0x134[bp] 
2944    D3 E7                     shl         di,cl 
2946    83 86 BE 01 08            add         word ptr 0x1be[bp],0x0008 
294B    03 7E BE                  add         di,word ptr -0x42[bp] 
294E    FF 86 30 01               inc         word ptr 0x130[bp] 
2952    A5                        movsw       
2953    A5                        movsw       
2954    A5                        movsw       
2955    A5                        movsw       
2956    8B 86 30 01               mov         ax,word ptr 0x130[bp] 
295A    FF 46 C4                  inc         word ptr -0x3c[bp] 
295D    3B 46 F4                  cmp         ax,word ptr -0xc[bp] 
2960    7D 03                     jge         L$266 
2962    E9 4B FF                  jmp         L$262 
2965                          L$266:
2965    8C D0                     mov         ax,ss 
2967    8D 9E 10 FE               lea         bx,-0x1f0[bp] 
296B    8E D8                     mov         ds,ax 
296D    31 C0                     xor         ax,ax 
296F                          L$267:
296F    8B 57 06                  mov         dx,word ptr 0x6[bx] 
2972    39 D0                     cmp         ax,dx 
2974    7D 14                     jge         L$269 
2976    C4 37                     les         si,dword ptr [bx] 
2978    01 C6                     add         si,ax 
297A    26 80 3C 07               cmp         byte ptr es:[si],0x07 
297E    75 0D                     jne         L$270 
2980                          L$268:
2980    C4 37                     les         si,dword ptr [bx] 
2982    01 C6                     add         si,ax 
2984    26 FE 04                  inc         byte ptr es:[si] 
2987    40                        inc         ax 
2988    EB E5                     jmp         L$267 
298A                          L$269:
298A    E9 87 00                  jmp         L$277 
298D                          L$270:
298D    26 80 3C 61               cmp         byte ptr es:[si],0x61 
2991    74 ED                     je          L$268 
2993    40                        inc         ax 
2994    EB D9                     jmp         L$267 
2996                          L$271:
2996    89 B6 1A 01               mov         word ptr 0x11a[bp],si 
299A    8C 9E 1C 01               mov         word ptr 0x11c[bp],ds 
299E    8B 44 02                  mov         ax,word ptr 0x2[si] 
29A1    8B 14                     mov         dx,word ptr [si] 
29A3    85 C0                     test        ax,ax 
29A5    75 04                     jne         L$272 
29A7    85 D2                     test        dx,dx 
29A9    74 48                     je          L$275 
29AB                          L$272:
29AB    89 D3                     mov         bx,dx 
29AD    8E D8                     mov         ds,ax 
29AF    83 3F 01                  cmp         word ptr [bx],0x0001 
29B2    75 5C                     jne         L$276 
29B4    8B 57 04                  mov         dx,word ptr 0x4[bx] 
29B7    8B 47 02                  mov         ax,word ptr 0x2[bx] 
29BA    85 D2                     test        dx,dx 
29BC    75 04                     jne         L$273 
29BE    85 C0                     test        ax,ax 
29C0    74 1E                     je          L$274 
29C2                          L$273:
29C2    C7 46 82 3A 00            mov         word ptr -0x7e[bp],0x003a 
29C7    89 86 1C FF               mov         word ptr -0xe4[bp],ax 
29CB    31 DB                     xor         bx,bx 
29CD    89 96 1E FF               mov         word ptr -0xe2[bp],dx 
29D1    9A 00 00 00 00            call        far Physics::~Physics() 
29D6    C7 46 82 39 00            mov         word ptr -0x7e[bp],0x0039 
29DB    9A 00 00 00 00            call        void far operator delete( void far * ) 
29E0                          L$274:
29E0    C5 9E 1A 01               lds         bx,dword ptr 0x11a[bp] 
29E4    8B 07                     mov         ax,word ptr [bx] 
29E6    8B 57 02                  mov         dx,word ptr 0x2[bx] 
29E9    9A 00 00 00 00            call        void far operator delete( void far * ) 
29EE    C7 46 82 39 00            mov         word ptr -0x7e[bp],0x0039 
29F3                          L$275:
29F3    8E 9E 18 01               mov         ds,word ptr 0x118[bp] 
29F7    8B 9E 52 01               mov         bx,word ptr 0x152[bp] 
29FB    8B 07                     mov         ax,word ptr [bx] 
29FD    8B 57 02                  mov         dx,word ptr 0x2[bx] 
2A00    8E D9                     mov         ds,cx 
2A02    89 05                     mov         word ptr [di],ax 
2A04    89 55 02                  mov         word ptr 0x2[di],dx 
2A07    8B 1D                     mov         bx,word ptr [di] 
2A09    8E DA                     mov         ds,dx 
2A0B    FF 07                     inc         word ptr [bx] 
2A0D    E9 CE FC                  jmp         L$253 
2A10                          L$276:
2A10    FF 0F                     dec         word ptr [bx] 
2A12    EB DF                     jmp         L$275 
2A14                          L$277:
2A14    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2A18    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2A1C    80 BF 9C 00 01            cmp         byte ptr 0x9c[bx],0x01 
2A21    75 14                     jne         L$279 
2A23    8C D0                     mov         ax,ss 
2A25    8D 9E 10 FE               lea         bx,-0x1f0[bp] 
2A29    8E D8                     mov         ds,ax 
2A2B    31 C0                     xor         ax,ax 
2A2D                          L$278:
2A2D    8B 57 06                  mov         dx,word ptr 0x6[bx] 
2A30    39 D0                     cmp         ax,dx 
2A32    7D 03                     jge         L$279 
2A34    E9 8D 00                  jmp         L$281 
2A37                          L$279:
2A37    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2A3B    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2A3F    8C D1                     mov         cx,ss 
2A41    83 C3 5C                  add         bx,0x005c 
2A44    8C 96 42 01               mov         word ptr 0x142[bp],ss 
2A48    C5 37                     lds         si,dword ptr [bx] 
2A4A    8D 5E BE                  lea         bx,-0x42[bp] 
2A4D    8B 44 02                  mov         ax,word ptr 0x2[si] 
2A50    8B 54 04                  mov         dx,word ptr 0x4[si] 
2A53    8C 96 D8 01               mov         word ptr 0x1d8[bp],ss 
2A57    9A 00 00 00 00            call        void far Physics::setWalls( tnd::vector<Rectangle far > const far & ) 
2A5C    8D 9E 28 FE               lea         bx,-0x1d8[bp] 
2A60    8B 86 2E FE               mov         ax,word ptr -0x1d2[bp] 
2A64    B1 03                     mov         cl,0x03 
2A66    89 46 AA                  mov         word ptr -0x56[bp],ax 
2A69    89 46 AC                  mov         word ptr -0x54[bp],ax 
2A6C    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2A6F    89 9E 44 01               mov         word ptr 0x144[bp],bx 
2A73    50                        push        ax 
2A74    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2A77    8B 9E 2E FE               mov         bx,word ptr -0x1d2[bp] 
2A7B    50                        push        ax 
2A7C    89 D8                     mov         ax,bx 
2A7E    8D 56 A6                  lea         dx,-0x5a[bp] 
2A81    D3 E0                     shl         ax,cl 
2A83    89 96 76 01               mov         word ptr 0x176[bp],dx 
2A87    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2A8C    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2A91    89 46 A6                  mov         word ptr -0x5a[bp],ax 
2A94    89 56 A8                  mov         word ptr -0x58[bp],dx 
2A97    31 DB                     xor         bx,bx 
2A99    31 C0                     xor         ax,ax 
2A9B                          L$280:
2A9B    8E 9E D8 01               mov         ds,word ptr 0x1d8[bp] 
2A9F    8B B6 44 01               mov         si,word ptr 0x144[bp] 
2AA3    8B 54 06                  mov         dx,word ptr 0x6[si] 
2AA6    39 D3                     cmp         bx,dx 
2AA8    7D 38                     jge         L$284 
2AAA    8B BE 44 01               mov         di,word ptr 0x144[bp] 
2AAE    43                        inc         bx 
2AAF    8B 34                     mov         si,word ptr [si] 
2AB1    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2AB4    01 C6                     add         si,ax 
2AB6    C4 7E A6                  les         di,dword ptr -0x5a[bp] 
2AB9    01 C7                     add         di,ax 
2ABB    05 08 00                  add         ax,0x0008 
2ABE    A5                        movsw       
2ABF    A5                        movsw       
2AC0    A5                        movsw       
2AC1    A5                        movsw       
2AC2    EB D7                     jmp         L$280 
2AC4                          L$281:
2AC4    C4 37                     les         si,dword ptr [bx] 
2AC6    01 C6                     add         si,ax 
2AC8    26 80 3C 1B               cmp         byte ptr es:[si],0x1b 
2ACC    75 03                     jne         L$282 
2ACE    26 FE 04                  inc         byte ptr es:[si] 
2AD1                          L$282:
2AD1    C4 37                     les         si,dword ptr [bx] 
2AD3    01 C6                     add         si,ax 
2AD5    26 80 3C 1D               cmp         byte ptr es:[si],0x1d 
2AD9    75 03                     jne         L$283 
2ADB    26 FE 04                  inc         byte ptr es:[si] 
2ADE                          L$283:
2ADE    40                        inc         ax 
2ADF    E9 4B FF                  jmp         L$278 
2AE2                          L$284:
2AE2    C7 46 82 3E 00            mov         word ptr -0x7e[bp],0x003e 
2AE7    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2AEB    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
2AEF    8B 8E 42 01               mov         cx,word ptr 0x142[bp] 
2AF3    8C 96 DA 01               mov         word ptr 0x1da[bp],ss 
2AF7    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
2AFA    8C 96 4C 01               mov         word ptr 0x14c[bp],ss 
2AFE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2B01    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2B04    8B 9E 76 01               mov         bx,word ptr 0x176[bp] 
2B08    83 C6 5C                  add         si,0x005c 
2B0B    9A 00 00 00 00            call        void far Physics::setDeath( tnd::vector<Rectangle far > const far & ) 
2B10    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2B15    8B 46 A6                  mov         ax,word ptr -0x5a[bp] 
2B18    8B 56 A8                  mov         dx,word ptr -0x58[bp] 
2B1B    8D 9E 30 FE               lea         bx,-0x1d0[bp] 
2B1F    B1 03                     mov         cl,0x03 
2B21    9A 00 00 00 00            call        void far operator delete []( void far * ) 
2B26    8B 86 36 FE               mov         ax,word ptr -0x1ca[bp] 
2B2A    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2B2F    89 46 EA                  mov         word ptr -0x16[bp],ax 
2B32    89 46 EC                  mov         word ptr -0x14[bp],ax 
2B35    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2B38    89 9E 4A 01               mov         word ptr 0x14a[bp],bx 
2B3C    50                        push        ax 
2B3D    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2B40    8B 9E 36 FE               mov         bx,word ptr -0x1ca[bp] 
2B44    50                        push        ax 
2B45    89 D8                     mov         ax,bx 
2B47    8D 56 E6                  lea         dx,-0x1a[bp] 
2B4A    D3 E0                     shl         ax,cl 
2B4C    89 96 48 01               mov         word ptr 0x148[bp],dx 
2B50    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2B55    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2B5A    8B 9E 4A 01               mov         bx,word ptr 0x14a[bp] 
2B5E    89 46 E6                  mov         word ptr -0x1a[bp],ax 
2B61    89 56 E8                  mov         word ptr -0x18[bp],dx 
2B64    31 C9                     xor         cx,cx 
2B66    31 C0                     xor         ax,ax 
2B68                          L$285:
2B68    8E 9E 4C 01               mov         ds,word ptr 0x14c[bp] 
2B6C    8B 57 06                  mov         dx,word ptr 0x6[bx] 
2B6F    39 D1                     cmp         cx,dx 
2B71    7D 1B                     jge         L$286 
2B73    8B 7E E6                  mov         di,word ptr -0x1a[bp] 
2B76    89 DE                     mov         si,bx 
2B78    41                        inc         cx 
2B79    8B 34                     mov         si,word ptr [si] 
2B7B    01 C7                     add         di,ax 
2B7D    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
2B80    01 C6                     add         si,ax 
2B82    8E 46 E8                  mov         es,word ptr -0x18[bp] 
2B85    05 08 00                  add         ax,0x0008 
2B88    A5                        movsw       
2B89    A5                        movsw       
2B8A    A5                        movsw       
2B8B    A5                        movsw       
2B8C    EB DA                     jmp         L$285 
2B8E                          L$286:
2B8E    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2B92    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
2B96    C7 46 82 40 00            mov         word ptr -0x7e[bp],0x0040 
2B9B    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
2B9E    8B 8E DA 01               mov         cx,word ptr 0x1da[bp] 
2BA2    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2BA5    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2BA8    8B 9E 48 01               mov         bx,word ptr 0x148[bp] 
2BAC    9A 00 00 00 00            call        void far Physics::setFallThrough( tnd::vector<Rectangle far > const far & ) 
2BB1    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
2BB4    8B 56 E8                  mov         dx,word ptr -0x18[bp] 
2BB7    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2BBC    9A 00 00 00 00            call        void far operator delete []( void far * ) 
2BC1    8B 86 8E FE               mov         ax,word ptr -0x172[bp] 
2BC5    89 46 22                  mov         word ptr 0x22[bp],ax 
2BC8    89 46 24                  mov         word ptr 0x24[bp],ax 
2BCB    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2BCE    8C 96 E0 01               mov         word ptr 0x1e0[bp],ss 
2BD2    50                        push        ax 
2BD3    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2BD6    8B 9E 8E FE               mov         bx,word ptr -0x172[bp] 
2BDA    50                        push        ax 
2BDB    89 D8                     mov         ax,bx 
2BDD    8C 96 5A 01               mov         word ptr 0x15a[bp],ss 
2BE1    D1 E0                     shl         ax,0x01 
2BE3    83 C6 5C                  add         si,0x005c 
2BE6    D1 E0                     shl         ax,0x01 
2BE8    8D 8E 88 FE               lea         cx,-0x178[bp] 
2BEC    29 D8                     sub         ax,bx 
2BEE    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2BF3    D1 E0                     shl         ax,0x01 
2BF5    8D 56 1E                  lea         dx,0x1e[bp] 
2BF8    D1 E0                     shl         ax,0x01 
2BFA    89 96 56 01               mov         word ptr 0x156[bp],dx 
2BFE    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2C03    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2C08    89 46 1E                  mov         word ptr 0x1e[bp],ax 
2C0B    89 56 20                  mov         word ptr 0x20[bp],dx 
2C0E    31 DB                     xor         bx,bx 
2C10    31 C0                     xor         ax,ax 
2C12                          L$287:
2C12    8E 9E 5A 01               mov         ds,word ptr 0x15a[bp] 
2C16    89 CE                     mov         si,cx 
2C18    8B 54 06                  mov         dx,word ptr 0x6[si] 
2C1B    39 D3                     cmp         bx,dx 
2C1D    7D 1A                     jge         L$288 
2C1F    89 CF                     mov         di,cx 
2C21    43                        inc         bx 
2C22    8B 34                     mov         si,word ptr [si] 
2C24    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2C27    01 C6                     add         si,ax 
2C29    C4 7E 1E                  les         di,dword ptr 0x1e[bp] 
2C2C    01 C7                     add         di,ax 
2C2E    05 0C 00                  add         ax,0x000c 
2C31    A5                        movsw       
2C32    A5                        movsw       
2C33    A5                        movsw       
2C34    A5                        movsw       
2C35    A5                        movsw       
2C36    A5                        movsw       
2C37    EB D9                     jmp         L$287 
2C39                          L$288:
2C39    C7 46 82 42 00            mov         word ptr -0x7e[bp],0x0042 
2C3E    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2C42    8B BE FA FD               mov         di,word ptr -0x206[bp] 
2C46    8E D8                     mov         ds,ax 
2C48    8B 8E E0 01               mov         cx,word ptr 0x1e0[bp] 
2C4C    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2C4F    89 86 5C 01               mov         word ptr 0x15c[bp],ax 
2C53    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2C56    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2C59    8B 9E 56 01               mov         bx,word ptr 0x156[bp] 
2C5D    9A 00 00 00 00            call        void far Physics::setButtons( tnd::vector<Button far > const far & ) 
2C62    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2C67    8B 46 1E                  mov         ax,word ptr 0x1e[bp] 
2C6A    8B 56 20                  mov         dx,word ptr 0x20[bp] 
2C6D    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
2C71    9A 00 00 00 00            call        void far operator delete []( void far * ) 
2C76    C7 46 82 3D 00            mov         word ptr -0x7e[bp],0x003d 
2C7B    8E 9E 5C 01               mov         ds,word ptr 0x15c[bp] 
2C7F    8B 86 FA FD               mov         ax,word ptr -0x206[bp] 
2C83    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2C86    05 44 00                  add         ax,0x0044 
2C89    8B 57 02                  mov         dx,word ptr 0x2[bx] 
2C8C    8B 77 04                  mov         si,word ptr 0x4[bx] 
2C8F    89 C3                     mov         bx,ax 
2C91    89 D0                     mov         ax,dx 
2C93    89 F2                     mov         dx,si 
2C95    9A 00 00 00 00            call        void far Physics::setGuffins( tnd::vector<Rectangle far > const far & ) 
2C9A    8B 96 FA FD               mov         dx,word ptr -0x206[bp] 
2C9E    8E 9E 5C 01               mov         ds,word ptr 0x15c[bp] 
2CA2    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
2CA6    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2CA9    83 C2 4C                  add         dx,0x004c 
2CAC    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2CAF    8B 77 04                  mov         si,word ptr 0x4[bx] 
2CB2    89 D3                     mov         bx,dx 
2CB4    89 F2                     mov         dx,si 
2CB6    9A 00 00 00 00            call        void far Physics::setJetPacks( tnd::vector<Rectangle far > const far & ) 
2CBB    8E 9E 5C 01               mov         ds,word ptr 0x15c[bp] 
2CBF    8B 8E FA FD               mov         cx,word ptr -0x206[bp] 
2CC3    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2CC6    83 C1 54                  add         cx,0x0054 
2CC9    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2CCC    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2CCF    89 CB                     mov         bx,cx 
2CD1    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
2CD5    9A 00 00 00 00            call        void far Physics::setSunItems( tnd::vector<Rectangle far > const far & ) 
2CDA    8B 86 A0 00               mov         ax,word ptr 0xa0[bp] 
2CDE    89 46 44                  mov         word ptr 0x44[bp],ax 
2CE1    8B 86 CA 01               mov         ax,word ptr 0x1ca[bp] 
2CE5    8E 9E 5C 01               mov         ds,word ptr 0x15c[bp] 
2CE9    89 46 46                  mov         word ptr 0x46[bp],ax 
2CEC    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2CEF    8C D1                     mov         cx,ss 
2CF1    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2CF4    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2CF7    8D 5E 44                  lea         bx,0x44[bp] 
2CFA    9A 00 00 00 00            call        void far Physics::setSpawnPoint( Point const far & ) 
2CFF    8B 86 94 FE               mov         ax,word ptr -0x16c[bp] 
2D03    89 46 60                  mov         word ptr 0x60[bp],ax 
2D06    8B 86 96 FE               mov         ax,word ptr -0x16a[bp] 
2D0A    8E 9E 5C 01               mov         ds,word ptr 0x15c[bp] 
2D0E    89 46 62                  mov         word ptr 0x62[bp],ax 
2D11    C5 5D 5C                  lds         bx,dword ptr 0x5c[di] 
2D14    8C D1                     mov         cx,ss 
2D16    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2D19    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2D1C    8D 5E 60                  lea         bx,0x60[bp] 
2D1F    9A 00 00 00 00            call        void far Physics::setSunPoint( Point const far & ) 
2D24    8B 8E F8 FD               mov         cx,word ptr -0x208[bp] 
2D28    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2D2C    8E D9                     mov         ds,cx 
2D2E    C5 77 04                  lds         si,dword ptr 0x4[bx] 
2D31    8B 44 02                  mov         ax,word ptr 0x2[si] 
2D34    8B 54 04                  mov         dx,word ptr 0x4[si] 
2D37    83 C3 04                  add         bx,0x0004 
2D3A    9A 00 00 00 00            call        void far VgaGfx::clear() 
2D3F    B8 F8 FF                  mov         ax,0xfff8 
2D42    8E D9                     mov         ds,cx 
2D44    50                        push        ax 
2D45    8C D1                     mov         cx,ss 
2D47    8B 37                     mov         si,word ptr [bx] 
2D49    50                        push        ax 
2D4A    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
2D4D    8D 9E FC FD               lea         bx,-0x204[bp] 
2D51    8B 44 02                  mov         ax,word ptr 0x2[si] 
2D54    8B 54 04                  mov         dx,word ptr 0x4[si] 
2D57    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
2D5C    8B 86 5E FE               mov         ax,word ptr -0x1a2[bp] 
2D60    89 46 A2                  mov         word ptr -0x5e[bp],ax 
2D63    89 46 A4                  mov         word ptr -0x5c[bp],ax 
2D66    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2D69    50                        push        ax 
2D6A    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2D6D    8B 9E 5E FE               mov         bx,word ptr -0x1a2[bp] 
2D71    50                        push        ax 
2D72    89 D8                     mov         ax,bx 
2D74    D1 E0                     shl         ax,0x01 
2D76    D1 E0                     shl         ax,0x01 
2D78    8C 96 E2 01               mov         word ptr 0x1e2[bp],ss 
2D7C    01 D8                     add         ax,bx 
2D7E    83 C7 5C                  add         di,0x005c 
2D81    D1 E0                     shl         ax,0x01 
2D83    8D 8E 58 FE               lea         cx,-0x1a8[bp] 
2D87    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2D8C    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2D91    89 46 9E                  mov         word ptr -0x62[bp],ax 
2D94    89 56 A0                  mov         word ptr -0x60[bp],dx 
2D97    31 DB                     xor         bx,bx 
2D99    31 C0                     xor         ax,ax 
2D9B                          L$289:
2D9B    8E 9E E2 01               mov         ds,word ptr 0x1e2[bp] 
2D9F    89 CE                     mov         si,cx 
2DA1    8B 54 06                  mov         dx,word ptr 0x6[si] 
2DA4    39 D3                     cmp         bx,dx 
2DA6    7D 19                     jge         L$290 
2DA8    89 CF                     mov         di,cx 
2DAA    43                        inc         bx 
2DAB    8B 34                     mov         si,word ptr [si] 
2DAD    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2DB0    01 C6                     add         si,ax 
2DB2    C4 7E 9E                  les         di,dword ptr -0x62[bp] 
2DB5    01 C7                     add         di,ax 
2DB7    05 0A 00                  add         ax,0x000a 
2DBA    A5                        movsw       
2DBB    A5                        movsw       
2DBC    A5                        movsw       
2DBD    A5                        movsw       
2DBE    A5                        movsw       
2DBF    EB DA                     jmp         L$289 
2DC1                          L$290:
2DC1    C7 46 82 44 00            mov         word ptr -0x7e[bp],0x0044 
2DC6    C7 86 66 01 00 00         mov         word ptr 0x166[bp],0x0000 
2DCC    83 7E A4 00               cmp         word ptr -0x5c[bp],0x0000 
2DD0    7F 03                     jg          L$291 
2DD2    E9 AA 00                  jmp         L$293 
2DD5                          L$291:
2DD5    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2DD9    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2DDD    C7 86 C0 01 00 00         mov         word ptr 0x1c0[bp],0x0000 
2DE3    83 C3 04                  add         bx,0x0004 
2DE6    89 86 6C 01               mov         word ptr 0x16c[bp],ax 
2DEA    89 9E 6A 01               mov         word ptr 0x16a[bp],bx 
2DEE                          L$292:
2DEE    8B 7E A0                  mov         di,word ptr -0x60[bp] 
2DF1    8B 76 9E                  mov         si,word ptr -0x62[bp] 
2DF4    8D 86 84 00               lea         ax,0x84[bp] 
2DF8    03 B6 C0 01               add         si,word ptr 0x1c0[bp] 
2DFC    8E DF                     mov         ds,di 
2DFE    8C D2                     mov         dx,ss 
2E00    8B 1C                     mov         bx,word ptr [si] 
2E02    9A 00 00 00 00            call        TinyString far I18N::getString( short unsigned ) 
2E07    C7 46 82 45 00            mov         word ptr -0x7e[bp],0x0045 
2E0C    B8 01 00                  mov         ax,0x0001 
2E0F    BB 05 00                  mov         bx,0x0005 
2E12    8E DF                     mov         ds,di 
2E14    31 D2                     xor         dx,dx 
2E16    50                        push        ax 
2E17    8B 44 06                  mov         ax,word ptr 0x6[si] 
2E1A    F7 F3                     div         bx 
2E1C    50                        push        ax 
2E1D    8C D2                     mov         dx,ss 
2E1F    8D 86 84 00               lea         ax,0x84[bp] 
2E23    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
2E28    89 C3                     mov         bx,ax 
2E2A    89 D1                     mov         cx,dx 
2E2C    8D 86 42 FF               lea         ax,-0xbe[bp] 
2E30    8C D2                     mov         dx,ss 
2E32    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
2E37    8E DF                     mov         ds,di 
2E39    C7 46 82 46 00            mov         word ptr -0x7e[bp],0x0046 
2E3E    FF 74 04                  push        word ptr 0x4[si] 
2E41    8B 9E 6A 01               mov         bx,word ptr 0x16a[bp] 
2E45    FF 74 02                  push        word ptr 0x2[si] 
2E48    C5 B6 6A 01               lds         si,dword ptr 0x16a[bp] 
2E4C    8B 1F                     mov         bx,word ptr [bx] 
2E4E    8E 5C 02                  mov         ds,word ptr 0x2[si] 
2E51    8C D1                     mov         cx,ss 
2E53    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2E56    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2E59    8D 9E 42 FF               lea         bx,-0xbe[bp] 
2E5D    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
2E62    B8 44 00                  mov         ax,0x0044 
2E65    FF 86 66 01               inc         word ptr 0x166[bp] 
2E69    9A 00 00 00 00            call        __wcpp_4_destruct__ 
2E6E    8B 86 66 01               mov         ax,word ptr 0x166[bp] 
2E72    83 86 C0 01 0A            add         word ptr 0x1c0[bp],0x000a 
2E77    3B 46 A4                  cmp         ax,word ptr -0x5c[bp] 
2E7A    7D 03                     jge         L$293 
2E7C    E9 6F FF                  jmp         L$292 
2E7F                          L$293:
2E7F    8D 9E 80 FE               lea         bx,-0x180[bp] 
2E83    8B 86 86 FE               mov         ax,word ptr -0x17a[bp] 
2E87    B1 03                     mov         cl,0x03 
2E89    89 46 DA                  mov         word ptr -0x26[bp],ax 
2E8C    89 46 DC                  mov         word ptr -0x24[bp],ax 
2E8F    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
2E92    89 9E 6E 01               mov         word ptr 0x16e[bp],bx 
2E96    50                        push        ax 
2E97    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
2E9A    8B 9E 86 FE               mov         bx,word ptr -0x17a[bp] 
2E9E    50                        push        ax 
2E9F    89 D8                     mov         ax,bx 
2EA1    D3 E0                     shl         ax,cl 
2EA3    8C 96 70 01               mov         word ptr 0x170[bp],ss 
2EA7    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
2EAC    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
2EB1    89 46 D6                  mov         word ptr -0x2a[bp],ax 
2EB4    89 56 D8                  mov         word ptr -0x28[bp],dx 
2EB7    31 DB                     xor         bx,bx 
2EB9    31 C0                     xor         ax,ax 
2EBB                          L$294:
2EBB    C5 B6 6E 01               lds         si,dword ptr 0x16e[bp] 
2EBF    8B 54 06                  mov         dx,word ptr 0x6[si] 
2EC2    39 D3                     cmp         bx,dx 
2EC4    7D 1A                     jge         L$295 
2EC6    8B BE 6E 01               mov         di,word ptr 0x16e[bp] 
2ECA    43                        inc         bx 
2ECB    8B 34                     mov         si,word ptr [si] 
2ECD    8E 5D 02                  mov         ds,word ptr 0x2[di] 
2ED0    01 C6                     add         si,ax 
2ED2    C4 7E D6                  les         di,dword ptr -0x2a[bp] 
2ED5    01 C7                     add         di,ax 
2ED7    05 08 00                  add         ax,0x0008 
2EDA    A5                        movsw       
2EDB    A5                        movsw       
2EDC    A5                        movsw       
2EDD    A5                        movsw       
2EDE    EB DB                     jmp         L$294 
2EE0                          L$295:
2EE0    C7 46 82 48 00            mov         word ptr -0x7e[bp],0x0048 
2EE5    C7 86 78 01 00 00         mov         word ptr 0x178[bp],0x0000 
2EEB    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
2EEF    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2EF3    C7 86 C2 01 00 00         mov         word ptr 0x1c2[bp],0x0000 
2EF9    83 C3 04                  add         bx,0x0004 
2EFC    89 86 AC 01               mov         word ptr 0x1ac[bp],ax 
2F00    89 9E AA 01               mov         word ptr 0x1aa[bp],bx 
2F04    83 7E DC 00               cmp         word ptr -0x24[bp],0x0000 
2F08    7F 03                     jg          L$296 
2F0A    E9 8C 00                  jmp         L$297 
2F0D                          L$296:
2F0D    8B 7E D8                  mov         di,word ptr -0x28[bp] 
2F10    B8 01 00                  mov         ax,0x0001 
2F13    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2F17    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2F1B    50                        push        ax 
2F1C    B8 64 00                  mov         ax,0x0064 
2F1F    8B 97 AA 00               mov         dx,word ptr 0xaa[bx] 
2F23    50                        push        ax 
2F24    8B 87 A8 00               mov         ax,word ptr 0xa8[bx] 
2F28    8B 76 D6                  mov         si,word ptr -0x2a[bp] 
2F2B    9A 00 00 00 00            call        char far * far createTimeString( long unsigned ) 
2F30    89 C3                     mov         bx,ax 
2F32    89 D1                     mov         cx,dx 
2F34    8D 86 30 FF               lea         ax,-0xd0[bp] 
2F38    8C D2                     mov         dx,ss 
2F3A    03 B6 C2 01               add         si,word ptr 0x1c2[bp] 
2F3E    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
2F43    C7 46 82 49 00            mov         word ptr -0x7e[bp],0x0049 
2F48    8E DF                     mov         ds,di 
2F4A    FF 86 78 01               inc         word ptr 0x178[bp] 
2F4E    FF 74 02                  push        word ptr 0x2[si] 
2F51    8B 9E AA 01               mov         bx,word ptr 0x1aa[bp] 
2F55    FF 34                     push        word ptr [si] 
2F57    C5 B6 AA 01               lds         si,dword ptr 0x1aa[bp] 
2F5B    8B 1F                     mov         bx,word ptr [bx] 
2F5D    8E 5C 02                  mov         ds,word ptr 0x2[si] 
2F60    8C D1                     mov         cx,ss 
2F62    8B 47 02                  mov         ax,word ptr 0x2[bx] 
2F65    8B 57 04                  mov         dx,word ptr 0x4[bx] 
2F68    8D 9E 30 FF               lea         bx,-0xd0[bp] 
2F6C    83 86 C2 01 08            add         word ptr 0x1c2[bp],0x0008 
2F71    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
2F76    8D 86 30 FF               lea         ax,-0xd0[bp] 
2F7A    8C D2                     mov         dx,ss 
2F7C    31 DB                     xor         bx,bx 
2F7E    C7 46 82 48 00            mov         word ptr -0x7e[bp],0x0048 
2F83    9A 00 00 00 00            call        far Text::~Text() 
2F88    8B 86 78 01               mov         ax,word ptr 0x178[bp] 
2F8C    C7 46 82 48 00            mov         word ptr -0x7e[bp],0x0048 
2F91    3B 46 DC                  cmp         ax,word ptr -0x24[bp] 
2F94    7D 03                     jge         L$297 
2F96    E9 74 FF                  jmp         L$296 
2F99                          L$297:
2F99    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
2F9D    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
2FA1    8A 47 6B                  mov         al,byte ptr 0x6b[bx] 
2FA4    B1 06                     mov         cl,0x06 
2FA6    98                        cbw         
2FA7    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
2FAB    89 C3                     mov         bx,ax 
2FAD    8A 44 6A                  mov         al,byte ptr 0x6a[si] 
2FB0    D3 E3                     shl         bx,cl 
2FB2    98                        cbw         
2FB3    8C D2                     mov         dx,ss 
2FB5    01 C3                     add         bx,ax 
2FB7    8D 46 64                  lea         ax,0x64[bp] 
2FBA    9A 00 00 00 00            call        TinyString far I18N::getString( short unsigned ) 
2FBF    31 C0                     xor         ax,ax 
2FC1    50                        push        ax 
2FC2    8C D2                     mov         dx,ss 
2FC4    50                        push        ax 
2FC5    8D 46 64                  lea         ax,0x64[bp] 
2FC8    C7 46 82 4B 00            mov         word ptr -0x7e[bp],0x004b 
2FCD    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
2FD2    89 C3                     mov         bx,ax 
2FD4    89 D1                     mov         cx,dx 
2FD6    8D 86 54 FF               lea         ax,-0xac[bp] 
2FDA    8C D2                     mov         dx,ss 
2FDC    8B B6 AA 01               mov         si,word ptr 0x1aa[bp] 
2FE0    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
2FE5    C7 46 82 4C 00            mov         word ptr -0x7e[bp],0x004c 
2FEA    B8 C1 00                  mov         ax,0x00c1 
2FED    C5 9E AA 01               lds         bx,dword ptr 0x1aa[bp] 
2FF1    8C D1                     mov         cx,ss 
2FF3    50                        push        ax 
2FF4    8B 1F                     mov         bx,word ptr [bx] 
2FF6    B8 32 00                  mov         ax,0x0032 
2FF9    8E 5C 02                  mov         ds,word ptr 0x2[si] 
2FFC    50                        push        ax 
2FFD    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3000    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3003    8D 9E 54 FF               lea         bx,-0xac[bp] 
3007    8B B6 FA FD               mov         si,word ptr -0x206[bp] 
300B    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
3010    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
3014    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
3018    8B 96 F8 FD               mov         dx,word ptr -0x208[bp] 
301C    8B 1F                     mov         bx,word ptr [bx] 
301E    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3021    89 F0                     mov         ax,si 
3023    FF 5F 18                  call        dword ptr 0x18[bx] 
3026    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
302A    89 F3                     mov         bx,si 
302C    8B 96 F8 FD               mov         dx,word ptr -0x208[bp] 
3030    8B 1F                     mov         bx,word ptr [bx] 
3032    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3035    89 F0                     mov         ax,si 
3037    FF 5F 1C                  call        dword ptr 0x1c[bx] 
303A    31 C0                     xor         ax,ax 
303C    C7 46 82 4D 00            mov         word ptr -0x7e[bp],0x004d 
3041    89 86 9E FE               mov         word ptr -0x162[bp],ax 
3045    89 86 A0 FE               mov         word ptr -0x160[bp],ax 
3049    89 86 A6 FE               mov         word ptr -0x15a[bp],ax 
304D    89 86 A8 FE               mov         word ptr -0x158[bp],ax 
3051    89 86 A2 FE               mov         word ptr -0x15e[bp],ax 
3055    89 86 A4 FE               mov         word ptr -0x15c[bp],ax 
3059    30 C0                     xor         al,al 
305B    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
305F    88 86 AA FE               mov         byte ptr -0x156[bp],al 
3063    88 86 AB FE               mov         byte ptr -0x155[bp],al 
3067    88 86 AC FE               mov         byte ptr -0x154[bp],al 
306B    30 E4                     xor         ah,ah 
306D    89 F3                     mov         bx,si 
306F    89 86 B0 FE               mov         word ptr -0x150[bp],ax 
3073    89 86 B2 FE               mov         word ptr -0x14e[bp],ax 
3077    89 86 B4 FE               mov         word ptr -0x14c[bp],ax 
307B    89 86 B6 FE               mov         word ptr -0x14a[bp],ax 
307F    88 86 9C FE               mov         byte ptr -0x164[bp],al 
3083    88 86 9D FE               mov         byte ptr -0x163[bp],al 
3087    8B 47 6A                  mov         ax,word ptr 0x6a[bx] 
308A    89 86 9C FE               mov         word ptr -0x164[bp],ax 
308E    8B 86 A0 00               mov         ax,word ptr 0xa0[bp] 
3092    89 86 9E FE               mov         word ptr -0x162[bp],ax 
3096    8B 86 CA 01               mov         ax,word ptr 0x1ca[bp] 
309A    8C D9                     mov         cx,ds 
309C    89 86 A0 FE               mov         word ptr -0x160[bp],ax 
30A0    8C D8                     mov         ax,ds 
30A2    31 D2                     xor         dx,dx 
30A4    31 C8                     xor         ax,cx 
30A6    8C 9E 82 01               mov         word ptr 0x182[bp],ds 
30AA    9A 00 00 00 00            call        void far operator delete []( void far * ) 
30AF    8E D9                     mov         ds,cx 
30B1    8B 87 88 00               mov         ax,word ptr 0x88[bx] 
30B5    81 C3 82 00               add         bx,0x0082 
30B9    89 86 A6 FE               mov         word ptr -0x15a[bp],ax 
30BD    89 86 A8 FE               mov         word ptr -0x158[bp],ax 
30C1    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
30C4    89 9E 80 01               mov         word ptr 0x180[bp],bx 
30C8    50                        push        ax 
30C9    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
30CC    8B 9E A8 FE               mov         bx,word ptr -0x158[bp] 
30D0    50                        push        ax 
30D1    89 D8                     mov         ax,bx 
30D3    D1 E0                     shl         ax,0x01 
30D5    D1 E0                     shl         ax,0x01 
30D7    29 D8                     sub         ax,bx 
30D9    D1 E0                     shl         ax,0x01 
30DB    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
30E0    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
30E5    89 86 A2 FE               mov         word ptr -0x15e[bp],ax 
30E9    89 96 A4 FE               mov         word ptr -0x15c[bp],dx 
30ED    31 DB                     xor         bx,bx 
30EF    31 C0                     xor         ax,ax 
30F1                          L$298:
30F1    C5 B6 80 01               lds         si,dword ptr 0x180[bp] 
30F5    8B 54 06                  mov         dx,word ptr 0x6[si] 
30F8    39 D3                     cmp         bx,dx 
30FA    7D 1A                     jge         L$299 
30FC    8B BE 80 01               mov         di,word ptr 0x180[bp] 
3100    43                        inc         bx 
3101    8B 34                     mov         si,word ptr [si] 
3103    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3106    01 C6                     add         si,ax 
3108    C4 BE A2 FE               les         di,dword ptr -0x15e[bp] 
310C    01 C7                     add         di,ax 
310E    05 06 00                  add         ax,0x0006 
3111    A5                        movsw       
3112    A5                        movsw       
3113    A5                        movsw       
3114    EB DB                     jmp         L$298 
3116                          L$299:
3116    8E 9E F8 FD               mov         ds,word ptr -0x208[bp] 
311A    8B 9E FA FD               mov         bx,word ptr -0x206[bp] 
311E    8A 87 9A 00               mov         al,byte ptr 0x9a[bx] 
3122    88 86 AA FE               mov         byte ptr -0x156[bp],al 
3126    8A 87 9C 00               mov         al,byte ptr 0x9c[bx] 
312A    88 86 AC FE               mov         byte ptr -0x154[bp],al 
312E    8B 87 A0 00               mov         ax,word ptr 0xa0[bx] 
3132    89 86 B0 FE               mov         word ptr -0x150[bp],ax 
3136    8B 87 A2 00               mov         ax,word ptr 0xa2[bx] 
313A    89 86 B2 FE               mov         word ptr -0x14e[bp],ax 
313E    8B 87 A8 00               mov         ax,word ptr 0xa8[bx] 
3142    B9 00 00                  mov         cx,game_DATA2 
3145    89 86 B4 FE               mov         word ptr -0x14c[bp],ax 
3149    8C D2                     mov         dx,ss 
314B    8B 87 AA 00               mov         ax,word ptr 0xaa[bx] 
314F    BB 1E 00                  mov         bx,offset L$562 
3152    89 86 B6 FE               mov         word ptr -0x14a[bp],ax 
3156    8D 86 9C FE               lea         ax,-0x164[bp] 
315A    9A 00 00 00 00            call        void far saveGameState( GameState const far &, char const far * ) 
315F    9A 00 00 00 00            call        __wcpp_4_destruct_all__ 
3164    8B 86 76 FF               mov         ax,word ptr -0x8a[bp] 
3168    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
316C    8B 86 78 FF               mov         ax,word ptr -0x88[bp] 
3170    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
3174    8D A6 E6 01               lea         sp,0x1e6[bp] 
3178    5D                        pop         bp 
3179    5F                        pop         di 
317A    5E                        pop         si 
317B    CB                        retf        

Routine Size: 8804 bytes,    Routine Base: game_TEXT + 0F18

317C                          void far Game::drawAppleCount():
317C    53                        push        bx 
317D    51                        push        cx 
317E    56                        push        si 
317F    57                        push        di 
3180    55                        push        bp 
3181    89 E5                     mov         bp,sp 
3183    83 EC 32                  sub         sp,0x0032 
3186    89 C7                     mov         di,ax 
3188    89 D6                     mov         si,dx 
318A    8D 56 F0                  lea         dx,-0x10[bp] 
318D    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
3192    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
3197    C7 46 F8 08 05            mov         word ptr -0x8[bp],offset L$436 
319C    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
31A1    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
31A6    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
31AA    89 FB                     mov         bx,di 
31AC    89 46 F0                  mov         word ptr -0x10[bp],ax 
31AF    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
31B4    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
31B8    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
31BD    8E DE                     mov         ds,si 
31BF    89 46 F2                  mov         word ptr -0xe[bp],ax 
31C2    8B 87 88 00               mov         ax,word ptr 0x88[bx] 
31C6    50                        push        ax 
31C7    89 F8                     mov         ax,di 
31C9    89 F2                     mov         dx,si 
31CB    05 8A 00                  add         ax,0x008a 
31CE    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
31D3    52                        push        dx 
31D4    50                        push        ax 
31D5    B8 10 00                  mov         ax,0x0010 
31D8    50                        push        ax 
31D9    8D 56 E0                  lea         dx,-0x20[bp] 
31DC    16                        push        ss 
31DD    8C D1                     mov         cx,ss 
31DF    52                        push        dx 
31E0    81 C3 82 00               add         bx,0x0082 
31E4    9A 00 00 00 00            call        snprintf_ 
31E9    83 C4 0C                  add         sp,0x000c 
31EC    31 C0                     xor         ax,ax 
31EE    8D 5E E0                  lea         bx,-0x20[bp] 
31F1    50                        push        ax 
31F2    8C D2                     mov         dx,ss 
31F4    50                        push        ax 
31F5    8D 46 CE                  lea         ax,-0x32[bp] 
31F8    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
31FD    B8 01 00                  mov         ax,0x0001 
3200    8D 5E CE                  lea         bx,-0x32[bp] 
3203    8E DE                     mov         ds,si 
3205    8C D1                     mov         cx,ss 
3207    89 46 FC                  mov         word ptr -0x4[bp],ax 
320A    50                        push        ax 
320B    B8 04 01                  mov         ax,0x0104 
320E    C5 75 04                  lds         si,dword ptr 0x4[di] 
3211    50                        push        ax 
3212    8B 44 02                  mov         ax,word ptr 0x2[si] 
3215    8B 54 04                  mov         dx,word ptr 0x4[si] 
3218    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
321D    8D 46 CE                  lea         ax,-0x32[bp] 
3220    8C D2                     mov         dx,ss 
3222    31 DB                     xor         bx,bx 
3224    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
3229    9A 00 00 00 00            call        far Text::~Text() 
322E    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
3231    83 C7 04                  add         di,0x0004 
3234    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
3238    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
323B    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
3240    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
3244    89 EC                     mov         sp,bp 
3246    5D                        pop         bp 
3247    5F                        pop         di 
3248    5E                        pop         si 
3249    59                        pop         cx 
324A    5B                        pop         bx 
324B    CB                        retf        

Routine Size: 208 bytes,    Routine Base: game_TEXT + 317C

324C                          void far Game::drawDeathCount():
324C    53                        push        bx 
324D    51                        push        cx 
324E    56                        push        si 
324F    57                        push        di 
3250    55                        push        bp 
3251    89 E5                     mov         bp,sp 
3253    83 EC 32                  sub         sp,0x0032 
3256    89 C6                     mov         si,ax 
3258    89 D7                     mov         di,dx 
325A    8D 56 F0                  lea         dx,-0x10[bp] 
325D    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
3262    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
3267    C7 46 F8 12 05            mov         word ptr -0x8[bp],offset L$437 
326C    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
3271    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
3275    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
327A    89 46 F0                  mov         word ptr -0x10[bp],ax 
327D    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
3281    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
3286    89 46 F2                  mov         word ptr -0xe[bp],ax 
3289    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
328E    8E DF                     mov         ds,di 
3290    89 FA                     mov         dx,di 
3292    FF B4 A2 00               push        word ptr 0xa2[si] 
3296    89 F0                     mov         ax,si 
3298    FF B4 A0 00               push        word ptr 0xa0[si] 
329C    05 8E 00                  add         ax,0x008e 
329F    9A 00 00 00 00            call        char const far * far TinyString::c_str() const 
32A4    52                        push        dx 
32A5    50                        push        ax 
32A6    B8 10 00                  mov         ax,0x0010 
32A9    50                        push        ax 
32AA    16                        push        ss 
32AB    8D 56 E0                  lea         dx,-0x20[bp] 
32AE    52                        push        dx 
32AF    8D 5E E0                  lea         bx,-0x20[bp] 
32B2    9A 00 00 00 00            call        snprintf_ 
32B7    83 C4 0E                  add         sp,0x000e 
32BA    31 C0                     xor         ax,ax 
32BC    8C D1                     mov         cx,ss 
32BE    50                        push        ax 
32BF    8C D2                     mov         dx,ss 
32C1    50                        push        ax 
32C2    8D 46 CE                  lea         ax,-0x32[bp] 
32C5    9A 00 00 00 00            call        far Text::Text( char const far *, int, bool ) 
32CA    B8 01 00                  mov         ax,0x0001 
32CD    8E DF                     mov         ds,di 
32CF    89 F3                     mov         bx,si 
32D1    8C D1                     mov         cx,ss 
32D3    89 46 FC                  mov         word ptr -0x4[bp],ax 
32D6    50                        push        ax 
32D7    83 C3 04                  add         bx,0x0004 
32DA    B8 0A 00                  mov         ax,0x000a 
32DD    8B 37                     mov         si,word ptr [bx] 
32DF    50                        push        ax 
32E0    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
32E3    8D 5E CE                  lea         bx,-0x32[bp] 
32E6    8B 44 02                  mov         ax,word ptr 0x2[si] 
32E9    8B 54 04                  mov         dx,word ptr 0x4[si] 
32EC    9A 00 00 00 00            call        void far VgaGfx::drawBackground( Drawable const far &, short, short ) 
32F1    8D 46 CE                  lea         ax,-0x32[bp] 
32F4    8C D2                     mov         dx,ss 
32F6    31 DB                     xor         bx,bx 
32F8    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
32FD    9A 00 00 00 00            call        far Text::~Text() 
3302    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
3305    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
3309    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
330C    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
3311    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
3315    89 EC                     mov         sp,bp 
3317    5D                        pop         bp 
3318    5F                        pop         di 
3319    5E                        pop         si 
331A    59                        pop         cx 
331B    5B                        pop         bx 
331C    CB                        retf        
331D    FC                        cld         

Routine Size: 210 bytes,    Routine Base: game_TEXT + 324C

331E                          void far Game::collectApple( Point ):
331E    56                        push        si 
331F    57                        push        di 
3320    55                        push        bp 
3321    89 E5                     mov         bp,sp 
3323    83 EC 14                  sub         sp,0x0014 
3326    50                        push        ax 
3327    52                        push        dx 
3328    53                        push        bx 
3329    51                        push        cx 
332A    8B 5E EA                  mov         bx,word ptr -0x16[bp] 
332D    31 C0                     xor         ax,ax 
332F    8E DA                     mov         ds,dx 
3331    89 46 EE                  mov         word ptr -0x12[bp],ax 
3334    89 46 F0                  mov         word ptr -0x10[bp],ax 
3337    89 D7                     mov         di,dx 
3339    8B 47 6A                  mov         ax,word ptr 0x6a[bx] 
333C    89 DE                     mov         si,bx 
333E    89 46 EC                  mov         word ptr -0x14[bp],ax 
3341    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
3344    89 4E F0                  mov         word ptr -0x10[bp],cx 
3347    89 46 EE                  mov         word ptr -0x12[bp],ax 
334A    89 56 FE                  mov         word ptr -0x2[bp],dx 
334D    8B 9C 88 00               mov         bx,word ptr 0x88[si] 
3351    81 C6 82 00               add         si,0x0082 
3355    43                        inc         bx 
3356    89 76 FC                  mov         word ptr -0x4[bp],si 
3359    3B 5C 04                  cmp         bx,word ptr 0x4[si] 
335C    7F 6C                     jg          L$305 
335E                          L$300:
335E    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
3361    8B 57 06                  mov         dx,word ptr 0x6[bx] 
3364    89 D0                     mov         ax,dx 
3366    D1 E0                     shl         ax,0x01 
3368    8D 76 EC                  lea         si,-0x14[bp] 
336B    D1 E0                     shl         ax,0x01 
336D    89 DF                     mov         di,bx 
336F    29 D0                     sub         ax,dx 
3371    8B 3D                     mov         di,word ptr [di] 
3373    D1 E0                     shl         ax,0x01 
3375    B9 FF FF                  mov         cx,0xffff 
3378    01 C7                     add         di,ax 
337A    8C D0                     mov         ax,ss 
337C    8E 47 02                  mov         es,word ptr 0x2[bx] 
337F    8E D8                     mov         ds,ax 
3381    8B 56 E8                  mov         dx,word ptr -0x18[bp] 
3384    A5                        movsw       
3385    A5                        movsw       
3386    A5                        movsw       
3387    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
338A    8B 76 EA                  mov         si,word ptr -0x16[bp] 
338D    FF 47 06                  inc         word ptr 0x6[bx] 
3390    8E 5E E8                  mov         ds,word ptr -0x18[bp] 
3393    8B 5E EA                  mov         bx,word ptr -0x16[bp] 
3396    89 F0                     mov         ax,si 
3398    8B 1F                     mov         bx,word ptr [bx] 
339A    8E 5C 02                  mov         ds,word ptr 0x2[si] 
339D    83 C6 44                  add         si,0x0044 
33A0    FF 5F 18                  call        dword ptr 0x18[bx] 
33A3    8E 46 E8                  mov         es,word ptr -0x18[bp] 
33A6    31 DB                     xor         bx,bx 
33A8    31 C0                     xor         ax,ax 
33AA                          L$301:
33AA    26 8B 54 06               mov         dx,word ptr es:0x6[si] 
33AE    39 D3                     cmp         bx,dx 
33B0    7D 12                     jge         L$303 
33B2    26 C5 3C                  lds         di,dword ptr es:[si] 
33B5    01 C7                     add         di,ax 
33B7    8B 15                     mov         dx,word ptr [di] 
33B9    3B 56 E6                  cmp         dx,word ptr -0x1a[bp] 
33BC    74 09                     je          L$304 
33BE                          L$302:
33BE    05 08 00                  add         ax,0x0008 
33C1    43                        inc         bx 
33C2    EB E6                     jmp         L$301 
33C4                          L$303:
33C4    E9 95 00                  jmp         L$310 
33C7                          L$304:
33C7    E9 7E 00                  jmp         L$308 
33CA                          L$305:
33CA    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
33CD    50                        push        ax 
33CE    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
33D1    50                        push        ax 
33D2    89 D8                     mov         ax,bx 
33D4    D1 E0                     shl         ax,0x01 
33D6    D1 E0                     shl         ax,0x01 
33D8    29 D8                     sub         ax,bx 
33DA    D1 E0                     shl         ax,0x01 
33DC    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
33E1    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
33E6    89 C1                     mov         cx,ax 
33E8    8E DF                     mov         ds,di 
33EA    89 46 F2                  mov         word ptr -0xe[bp],ax 
33ED    8B 44 06                  mov         ax,word ptr 0x6[si] 
33F0    40                        inc         ax 
33F1    89 56 F4                  mov         word ptr -0xc[bp],dx 
33F4    89 44 04                  mov         word ptr 0x4[si],ax 
33F7    31 DB                     xor         bx,bx 
33F9    83 7C 06 00               cmp         word ptr 0x6[si],0x0000 
33FD    7E 2B                     jle         L$307 
33FF    89 56 F6                  mov         word ptr -0xa[bp],dx 
3402    8E 46 F6                  mov         es,word ptr -0xa[bp] 
3405                          L$306:
3405    BA 06 00                  mov         dx,0x0006 
3408    89 D8                     mov         ax,bx 
340A    F7 EA                     imul        dx 
340C    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
340F    8B 7E FC                  mov         di,word ptr -0x4[bp] 
3412    8B 34                     mov         si,word ptr [si] 
3414    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3417    89 CF                     mov         di,cx 
3419    01 C6                     add         si,ax 
341B    43                        inc         bx 
341C    A5                        movsw       
341D    A5                        movsw       
341E    A5                        movsw       
341F    C5 76 FC                  lds         si,dword ptr -0x4[bp] 
3422    83 C1 06                  add         cx,0x0006 
3425    3B 5C 06                  cmp         bx,word ptr 0x6[si] 
3428    7C DB                     jl          L$306 
342A                          L$307:
342A    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
342D    8B 07                     mov         ax,word ptr [bx] 
342F    8B 57 02                  mov         dx,word ptr 0x2[bx] 
3432    9A 00 00 00 00            call        void far operator delete []( void far * ) 
3437    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
343A    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
343D    89 07                     mov         word ptr [bx],ax 
343F    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
3442    89 47 02                  mov         word ptr 0x2[bx],ax 
3445    E9 16 FF                  jmp         L$300 
3448                          L$308:
3448    8B 55 02                  mov         dx,word ptr 0x2[di] 
344B    3B 56 E4                  cmp         dx,word ptr -0x1c[bp] 
344E    74 03                     je          L$309 
3450    E9 6B FF                  jmp         L$302 
3453                          L$309:
3453    89 D9                     mov         cx,bx 
3455    05 08 00                  add         ax,0x0008 
3458    43                        inc         bx 
3459    E9 4E FF                  jmp         L$301 
345C                          L$310:
345C    85 C9                     test        cx,cx 
345E    7C 51                     jl          L$313 
3460    89 76 FA                  mov         word ptr -0x6[bp],si 
3463    8C 46 F8                  mov         word ptr -0x8[bp],es 
3466    39 D1                     cmp         cx,dx 
3468    7D 47                     jge         L$313 
346A    89 CB                     mov         bx,cx 
346C    43                        inc         bx 
346D    39 D3                     cmp         bx,dx 
346F    7D 37                     jge         L$312 
3471    B1 03                     mov         cl,0x03 
3473    89 DA                     mov         dx,bx 
3475    D3 E2                     shl         dx,cl 
3477    83 EA 08                  sub         dx,0x0008 
347A                          L$311:
347A    B1 03                     mov         cl,0x03 
347C    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
347F    89 DE                     mov         si,bx 
3481    8B 7E FA                  mov         di,word ptr -0x6[bp] 
3484    D3 E6                     shl         si,cl 
3486    8B 0D                     mov         cx,word ptr [di] 
3488    8B 45 02                  mov         ax,word ptr 0x2[di] 
348B    89 CF                     mov         di,cx 
348D    8E C0                     mov         es,ax 
348F    8E D8                     mov         ds,ax 
3491    01 CE                     add         si,cx 
3493    01 D7                     add         di,dx 
3495    43                        inc         bx 
3496    A5                        movsw       
3497    A5                        movsw       
3498    A5                        movsw       
3499    A5                        movsw       
349A    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
349D    8B 76 FA                  mov         si,word ptr -0x6[bp] 
34A0    83 C2 08                  add         dx,0x0008 
34A3    3B 5C 06                  cmp         bx,word ptr 0x6[si] 
34A6    7C D2                     jl          L$311 
34A8                          L$312:
34A8    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
34AB    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
34AE    FF 4F 06                  dec         word ptr 0x6[bx] 
34B1                          L$313:
34B1    8E 5E E8                  mov         ds,word ptr -0x18[bp] 
34B4    8B 76 EA                  mov         si,word ptr -0x16[bp] 
34B7    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
34BA    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
34BD    83 C1 44                  add         cx,0x0044 
34C0    8B 47 02                  mov         ax,word ptr 0x2[bx] 
34C3    8B 57 04                  mov         dx,word ptr 0x4[bx] 
34C6    89 CB                     mov         bx,cx 
34C8    8B 4E E8                  mov         cx,word ptr -0x18[bp] 
34CB    9A 00 00 00 00            call        void far Physics::setGuffins( tnd::vector<Rectangle far > const far & ) 
34D0    8E 5E E8                  mov         ds,word ptr -0x18[bp] 
34D3    8B 5E EA                  mov         bx,word ptr -0x16[bp] 
34D6    83 C6 5C                  add         si,0x005c 
34D9    C5 B7 92 00               lds         si,dword ptr 0x92[bx] 
34DD    8B 44 02                  mov         ax,word ptr 0x2[si] 
34E0    8B 54 04                  mov         dx,word ptr 0x4[si] 
34E3    81 C3 92 00               add         bx,0x0092 
34E7    9A 00 00 00 00            call        void far SoundController::playGuffinSound() 
34EC    89 EC                     mov         sp,bp 
34EE    5D                        pop         bp 
34EF    5F                        pop         di 
34F0    5E                        pop         si 
34F1    CB                        retf        

Routine Size: 468 bytes,    Routine Base: game_TEXT + 331E

34F2                          void far Game::collectJetPack( Point ):
34F2    56                        push        si 
34F3    57                        push        di 
34F4    55                        push        bp 
34F5    89 E5                     mov         bp,sp 
34F7    83 EC 04                  sub         sp,0x0004 
34FA    50                        push        ax 
34FB    52                        push        dx 
34FC    53                        push        bx 
34FD    51                        push        cx 
34FE    8E DA                     mov         ds,dx 
3500    89 C3                     mov         bx,ax 
3502    BF FF FF                  mov         di,0xffff 
3505    C6 87 9A 00 01            mov         byte ptr 0x9a[bx],0x01 
350A    83 C3 4C                  add         bx,0x004c 
350D    31 D2                     xor         dx,dx 
350F    31 C0                     xor         ax,ax 
3511    8E 46 F8                  mov         es,word ptr -0x8[bp] 
3514                          L$314:
3514    26 8B 4F 06               mov         cx,word ptr es:0x6[bx] 
3518    39 CA                     cmp         dx,cx 
351A    7D 1E                     jge         L$317 
351C    26 C5 37                  lds         si,dword ptr es:[bx] 
351F    01 C6                     add         si,ax 
3521    8B 0C                     mov         cx,word ptr [si] 
3523    3B 4E F6                  cmp         cx,word ptr -0xa[bp] 
3526    74 06                     je          L$316 
3528                          L$315:
3528    05 08 00                  add         ax,0x0008 
352B    42                        inc         dx 
352C    EB E6                     jmp         L$314 
352E                          L$316:
352E    8B 4C 02                  mov         cx,word ptr 0x2[si] 
3531    3B 4E F4                  cmp         cx,word ptr -0xc[bp] 
3534    75 F2                     jne         L$315 
3536    89 D7                     mov         di,dx 
3538    EB EE                     jmp         L$315 
353A                          L$317:
353A    85 FF                     test        di,di 
353C    7C 4A                     jl          L$320 
353E    8C 46 FE                  mov         word ptr -0x2[bp],es 
3541    39 CF                     cmp         di,cx 
3543    7D 43                     jge         L$320 
3545    89 FA                     mov         dx,di 
3547    42                        inc         dx 
3548    39 CA                     cmp         dx,cx 
354A    7D 36                     jge         L$319 
354C    B1 03                     mov         cl,0x03 
354E    89 D0                     mov         ax,dx 
3550    D3 E0                     shl         ax,cl 
3552    2D 08 00                  sub         ax,0x0008 
3555    89 46 FC                  mov         word ptr -0x4[bp],ax 
3558                          L$318:
3558    B1 03                     mov         cl,0x03 
355A    89 D6                     mov         si,dx 
355C    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
355F    D3 E6                     shl         si,cl 
3561    8B 0F                     mov         cx,word ptr [bx] 
3563    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3566    89 CF                     mov         di,cx 
3568    8E C0                     mov         es,ax 
356A    8E D8                     mov         ds,ax 
356C    01 CE                     add         si,cx 
356E    03 7E FC                  add         di,word ptr -0x4[bp] 
3571    42                        inc         dx 
3572    A5                        movsw       
3573    A5                        movsw       
3574    A5                        movsw       
3575    A5                        movsw       
3576    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3579    83 46 FC 08               add         word ptr -0x4[bp],0x0008 
357D    3B 57 06                  cmp         dx,word ptr 0x6[bx] 
3580    7C D6                     jl          L$318 
3582                          L$319:
3582    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3585    FF 4F 06                  dec         word ptr 0x6[bx] 
3588                          L$320:
3588    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
358B    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
358E    8B 76 FA                  mov         si,word ptr -0x6[bp] 
3591    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
3594    05 4C 00                  add         ax,0x004c 
3597    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
359A    83 C6 5C                  add         si,0x005c 
359D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
35A0    8B 77 04                  mov         si,word ptr 0x4[bx] 
35A3    89 C3                     mov         bx,ax 
35A5    89 D0                     mov         ax,dx 
35A7    89 F2                     mov         dx,si 
35A9    9A 00 00 00 00            call        void far Physics::setJetPacks( tnd::vector<Rectangle far > const far & ) 
35AE    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
35B1    8B 76 FA                  mov         si,word ptr -0x6[bp] 
35B4    C5 9C 92 00               lds         bx,dword ptr 0x92[si] 
35B8    8B 47 02                  mov         ax,word ptr 0x2[bx] 
35BB    8B 57 04                  mov         dx,word ptr 0x4[bx] 
35BE    81 C6 92 00               add         si,0x0092 
35C2    9A 00 00 00 00            call        void far SoundController::playJetpackSound() 
35C7    89 EC                     mov         sp,bp 
35C9    5D                        pop         bp 
35CA    5F                        pop         di 
35CB    5E                        pop         si 
35CC    CB                        retf        
35CD    FC                        cld         

Routine Size: 220 bytes,    Routine Base: game_TEXT + 34F2

35CE                          void far Game::collectSunItem( Point ):
35CE    56                        push        si 
35CF    57                        push        di 
35D0    55                        push        bp 
35D1    89 E5                     mov         bp,sp 
35D3    83 EC 04                  sub         sp,0x0004 
35D6    50                        push        ax 
35D7    52                        push        dx 
35D8    53                        push        bx 
35D9    51                        push        cx 
35DA    8E DA                     mov         ds,dx 
35DC    89 C3                     mov         bx,ax 
35DE    BF FF FF                  mov         di,0xffff 
35E1    C6 87 9B 00 01            mov         byte ptr 0x9b[bx],0x01 
35E6    83 C3 54                  add         bx,0x0054 
35E9    31 D2                     xor         dx,dx 
35EB    31 C0                     xor         ax,ax 
35ED    8E 46 F8                  mov         es,word ptr -0x8[bp] 
35F0                          L$321:
35F0    26 8B 4F 06               mov         cx,word ptr es:0x6[bx] 
35F4    39 CA                     cmp         dx,cx 
35F6    7D 1E                     jge         L$324 
35F8    26 C5 37                  lds         si,dword ptr es:[bx] 
35FB    01 C6                     add         si,ax 
35FD    8B 0C                     mov         cx,word ptr [si] 
35FF    3B 4E F6                  cmp         cx,word ptr -0xa[bp] 
3602    74 06                     je          L$323 
3604                          L$322:
3604    05 08 00                  add         ax,0x0008 
3607    42                        inc         dx 
3608    EB E6                     jmp         L$321 
360A                          L$323:
360A    8B 4C 02                  mov         cx,word ptr 0x2[si] 
360D    3B 4E F4                  cmp         cx,word ptr -0xc[bp] 
3610    75 F2                     jne         L$322 
3612    89 D7                     mov         di,dx 
3614    EB EE                     jmp         L$322 
3616                          L$324:
3616    85 FF                     test        di,di 
3618    7C 4A                     jl          L$327 
361A    8C 46 FE                  mov         word ptr -0x2[bp],es 
361D    39 CF                     cmp         di,cx 
361F    7D 43                     jge         L$327 
3621    89 FA                     mov         dx,di 
3623    42                        inc         dx 
3624    39 CA                     cmp         dx,cx 
3626    7D 36                     jge         L$326 
3628    B1 03                     mov         cl,0x03 
362A    89 D0                     mov         ax,dx 
362C    D3 E0                     shl         ax,cl 
362E    2D 08 00                  sub         ax,0x0008 
3631    89 46 FC                  mov         word ptr -0x4[bp],ax 
3634                          L$325:
3634    B1 03                     mov         cl,0x03 
3636    89 D6                     mov         si,dx 
3638    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
363B    D3 E6                     shl         si,cl 
363D    8B 0F                     mov         cx,word ptr [bx] 
363F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3642    89 CF                     mov         di,cx 
3644    8E C0                     mov         es,ax 
3646    8E D8                     mov         ds,ax 
3648    01 CE                     add         si,cx 
364A    03 7E FC                  add         di,word ptr -0x4[bp] 
364D    42                        inc         dx 
364E    A5                        movsw       
364F    A5                        movsw       
3650    A5                        movsw       
3651    A5                        movsw       
3652    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3655    83 46 FC 08               add         word ptr -0x4[bp],0x0008 
3659    3B 57 06                  cmp         dx,word ptr 0x6[bx] 
365C    7C D6                     jl          L$325 
365E                          L$326:
365E    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
3661    FF 4F 06                  dec         word ptr 0x6[bx] 
3664                          L$327:
3664    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
3667    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
366A    8B 76 FA                  mov         si,word ptr -0x6[bp] 
366D    8B 4E F8                  mov         cx,word ptr -0x8[bp] 
3670    05 54 00                  add         ax,0x0054 
3673    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
3676    83 C6 5C                  add         si,0x005c 
3679    8B 57 02                  mov         dx,word ptr 0x2[bx] 
367C    8B 77 04                  mov         si,word ptr 0x4[bx] 
367F    89 C3                     mov         bx,ax 
3681    89 D0                     mov         ax,dx 
3683    89 F2                     mov         dx,si 
3685    9A 00 00 00 00            call        void far Physics::setSunItems( tnd::vector<Rectangle far > const far & ) 
368A    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
368D    8B 76 FA                  mov         si,word ptr -0x6[bp] 
3690    C5 9C 92 00               lds         bx,dword ptr 0x92[si] 
3694    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3697    8B 57 04                  mov         dx,word ptr 0x4[bx] 
369A    81 C6 92 00               add         si,0x0092 
369E    9A 00 00 00 00            call        void far SoundController::playJetpackSound() 
36A3    89 EC                     mov         sp,bp 
36A5    5D                        pop         bp 
36A6    5F                        pop         di 
36A7    5E                        pop         si 
36A8    CB                        retf        
36A9    FC                        cld         

Routine Size: 220 bytes,    Routine Base: game_TEXT + 35CE

36AA                          void far Game::touchButton( short unsigned, ButtonType ):
36AA    56                        push        si 
36AB    57                        push        di 
36AC    55                        push        bp 
36AD    89 E5                     mov         bp,sp 
36AF    83 EC 02                  sub         sp,0x0002 
36B2    89 C6                     mov         si,ax 
36B4    89 56 FE                  mov         word ptr -0x2[bp],dx 
36B7    83 FB 01                  cmp         bx,0x0001 
36BA    75 2E                     jne         L$328 
36BC    80 F9 01                  cmp         cl,0x01 
36BF    75 29                     jne         L$328 
36C1    8E DA                     mov         ds,dx 
36C3    80 BC 9C 00 00            cmp         byte ptr 0x9c[si],0x00 
36C8    75 20                     jne         L$328 
36CA    89 C7                     mov         di,ax 
36CC    81 C7 92 00               add         di,0x0092 
36D0    88 8C 9C 00               mov         byte ptr 0x9c[si],cl 
36D4    C5 15                     lds         dx,dword ptr [di] 
36D6    89 D7                     mov         di,dx 
36D8    8B 45 02                  mov         ax,word ptr 0x2[di] 
36DB    8B 55 04                  mov         dx,word ptr 0x4[di] 
36DE    9A 00 00 00 00            call        void far SoundController::playSwitchSound() 
36E3    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
36E6    88 8C A4 00               mov         byte ptr 0xa4[si],cl 
36EA                          L$328:
36EA    83 FB 01                  cmp         bx,0x0001 
36ED    75 0F                     jne         L$329 
36EF    80 F9 02                  cmp         cl,0x02 
36F2    75 0A                     jne         L$329 
36F4    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
36F7    80 BC 9C 00 01            cmp         byte ptr 0x9c[si],0x01 
36FC    74 06                     je          L$330 
36FE                          L$329:
36FE    89 EC                     mov         sp,bp 
3700    5D                        pop         bp 
3701    5F                        pop         di 
3702    5E                        pop         si 
3703    CB                        retf        
3704                          L$330:
3704    89 F7                     mov         di,si 
3706    C6 84 9C 00 00            mov         byte ptr 0x9c[si],0x00 
370B    C5 9D 92 00               lds         bx,dword ptr 0x92[di] 
370F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3712    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3715    9A 00 00 00 00            call        void far SoundController::playSwitchSound() 
371A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
371D    81 C7 92 00               add         di,0x0092 
3721    C6 84 A4 00 01            mov         byte ptr 0xa4[si],0x01 
3726    89 EC                     mov         sp,bp 
3728    5D                        pop         bp 
3729    5F                        pop         di 
372A    5E                        pop         si 
372B    CB                        retf        

Routine Size: 130 bytes,    Routine Base: game_TEXT + 36AA

372C                          void far Game::onDeath():
372C    53                        push        bx 
372D    51                        push        cx 
372E    56                        push        si 
372F    89 C3                     mov         bx,ax 
3731    89 D1                     mov         cx,dx 
3733    8E DA                     mov         ds,dx 
3735    83 87 A0 00 01            add         word ptr 0xa0[bx],0x0001 
373A    83 97 A2 00 00            adc         word ptr 0xa2[bx],0x0000 
373F    C5 37                     lds         si,dword ptr [bx] 
3741    FF 5C 1C                  call        dword ptr 0x1c[si] 
3744    8E D9                     mov         ds,cx 
3746    C5 77 04                  lds         si,dword ptr 0x4[bx] 
3749    8B 44 02                  mov         ax,word ptr 0x2[si] 
374C    8B 54 04                  mov         dx,word ptr 0x4[si] 
374F    83 C3 04                  add         bx,0x0004 
3752    9A 00 00 00 00            call        void far VgaGfx::drawDeathEffect() 
3757    5E                        pop         si 
3758    59                        pop         cx 
3759    5B                        pop         bx 
375A    CB                        retf        
375B    FC                        cld         
375C                          L$331:
375C    3D 3D                                           DW	offset L$376
375E    67 3D                                           DW	offset L$377
3760    91 3D                                           DW	offset L$378
3762    BB 3D                                           DW	offset L$379
3764    E5 3D                                           DW	offset L$380
3766    17 3E                                           DW	offset L$382

Routine Size: 60 bytes,    Routine Base: game_TEXT + 372C

3768                          void far Game::drawFrame():
3768    53                        push        bx 
3769    51                        push        cx 
376A    56                        push        si 
376B    57                        push        di 
376C    55                        push        bp 
376D    89 E5                     mov         bp,sp 
376F    81 EC DE 00               sub         sp,0x00de 
3773    50                        push        ax 
3774    52                        push        dx 
3775    81 ED 80 00               sub         bp,0x0080 
3779    8D 56 A2                  lea         dx,-0x5e[bp] 
377C    C7 46 A6 00 00            mov         word ptr -0x5a[bp],offset __wcpp_4_fs_handler_rtn__ 
3781    C7 46 A8 00 00            mov         word ptr -0x58[bp],seg __wcpp_4_fs_handler_rtn__ 
3786    C7 46 AA 1C 05            mov         word ptr -0x56[bp],offset L$438 
378B    C7 46 AC 00 00            mov         word ptr -0x54[bp],game_DATA1 
3790    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
3794    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3797    89 46 A2                  mov         word ptr -0x5e[bp],ax 
379A    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
379E    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
37A3    89 46 A4                  mov         word ptr -0x5c[bp],ax 
37A6    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
37AB    31 C0                     xor         ax,ax 
37AD    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
37B0    89 46 AE                  mov         word ptr -0x52[bp],ax 
37B3    83 87 A8 00 01            add         word ptr 0xa8[bx],0x0001 
37B8    11 87 AA 00               adc         word ptr 0xaa[bx],ax 
37BC    80 7F 6C FF               cmp         byte ptr 0x6c[bx],0xff 
37C0    74 03                     je          L$332 
37C2    E9 45 02                  jmp         L$351 
37C5                          L$332:
37C5    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
37C8    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
37CB    80 BF A4 00 00            cmp         byte ptr 0xa4[bx],0x00 
37D0    74 14                     je          L$333 
37D2    B9 02 00                  mov         cx,0x0002 
37D5    8B 46 A0                  mov         ax,word ptr -0x60[bp] 
37D8    C6 87 A4 00 00            mov         byte ptr 0xa4[bx],0x00 
37DD    8C DA                     mov         dx,ds 
37DF    8B 5F 6A                  mov         bx,word ptr 0x6a[bx] 
37E2    0E                        push        cs 
37E3    E8 00 00                  call        void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ) 
37E6                          L$333:
37E6    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
37E9    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
37EC    C5 77 04                  lds         si,dword ptr 0x4[bx] 
37EF    83 C3 04                  add         bx,0x0004 
37F2    8B 44 02                  mov         ax,word ptr 0x2[si] 
37F5    8B 54 04                  mov         dx,word ptr 0x4[si] 
37F8    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
37FB    9A 00 00 00 00            call        void far VgaGfx::clear() 
3800    8D 56 EE                  lea         dx,-0x12[bp] 
3803    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
3806    16                        push        ss 
3807    89 DE                     mov         si,bx 
3809    52                        push        dx 
380A    8D 56 4A                  lea         dx,0x4a[bp] 
380D    16                        push        ss 
380E    8C DF                     mov         di,ds 
3810    52                        push        dx 
3811    8B 57 64                  mov         dx,word ptr 0x64[bx] 
3814    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
3817    8B 47 02                  mov         ax,word ptr 0x2[bx] 
381A    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
381D    89 D3                     mov         bx,dx 
381F    89 CA                     mov         dx,cx 
3821    9A 00 00 00 00            call        void far Physics::getActorPos( int, short far &, short far & ) 
3826    8E DF                     mov         ds,di 
3828    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
382B    8B 47 02                  mov         ax,word ptr 0x2[bx] 
382E    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3831    83 C6 5C                  add         si,0x005c 
3834    9A 00 00 00 00            call        bool far Physics::jetpackIsActive() 
3839    84 C0                     test        al,al 
383B    74 02                     je          L$334 
383D    B0 01                     mov         al,0x01 
383F                          L$334:
383F    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
3842    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3845    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
3848    8B 4E 4A                  mov         cx,word ptr 0x4a[bp] 
384B    88 46 7E                  mov         byte ptr 0x7e[bp],al 
384E    8B 46 4A                  mov         ax,word ptr 0x4a[bp] 
3851    83 C3 6E                  add         bx,0x006e 
3854    8C 5E 4C                  mov         word ptr 0x4c[bp],ds 
3857    89 D7                     mov         di,dx 
3859    2B 4F 04                  sub         cx,word ptr 0x4[bx] 
385C    89 47 04                  mov         word ptr 0x4[bx],ax 
385F    89 DE                     mov         si,bx 
3861    2B 7F 06                  sub         di,word ptr 0x6[bx] 
3864    89 57 06                  mov         word ptr 0x6[bx],dx 
3867    85 FF                     test        di,di 
3869    7F 03                     jg          L$335 
386B    E9 B8 01                  jmp         L$352 
386E                          L$335:
386E    B0 01                     mov         al,0x01 
3870                          L$336:
3870    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3873    88 C7                     mov         bh,al 
3875    89 F8                     mov         ax,di 
3877    8A 5C 08                  mov         bl,byte ptr 0x8[si] 
387A    99                        cwd         
387B    33 C2                     xor         ax,dx 
387D    2B C2                     sub         ax,dx 
387F    3D 02 00                  cmp         ax,0x0002 
3882    7C 03                     jl          L$337 
3884    E9 92 04                  jmp         L$372 
3887                          L$337:
3887    80 7C 09 01               cmp         byte ptr 0x9[si],0x01 
388B    74 03                     je          L$338 
388D    E9 22 02                  jmp         L$355 
3890                          L$338:
3890    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3893    C7 44 0C 00 00            mov         word ptr 0xc[si],0x0000 
3898    85 C9                     test        cx,cx 
389A    7F 03                     jg          L$339 
389C    E9 B1 02                  jmp         L$359 
389F                          L$339:
389F    B3 01                     mov         bl,0x01 
38A1                          L$340:
38A1    C6 44 0A 01               mov         byte ptr 0xa[si],0x01 
38A5                          L$341:
38A5    85 FF                     test        di,di 
38A7    74 06                     je          L$342 
38A9    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
38AC    88 7C 09                  mov         byte ptr 0x9[si],bh 
38AF                          L$342:
38AF    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
38B2    3A 5C 08                  cmp         bl,byte ptr 0x8[si] 
38B5    74 03                     je          L$343 
38B7    E9 8F 05                  jmp         L$384 
38BA                          L$343:
38BA    C7 46 AE 01 00            mov         word ptr -0x52[bp],0x0001 
38BF    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
38C2    31 C0                     xor         ax,ax 
38C4    C7 46 66 00 00            mov         word ptr 0x66[bp],0x0000 
38C9    89 46 DE                  mov         word ptr -0x22[bp],ax 
38CC    89 46 E0                  mov         word ptr -0x20[bp],ax 
38CF    89 46 DA                  mov         word ptr -0x26[bp],ax 
38D2    89 46 DC                  mov         word ptr -0x24[bp],ax 
38D5    83 C3 10                  add         bx,0x0010 
38D8    89 46 32                  mov         word ptr 0x32[bp],ax 
38DB    89 5E 3E                  mov         word ptr 0x3e[bp],bx 
38DE    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
38E1    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
38E4    83 C3 04                  add         bx,0x0004 
38E7    89 46 40                  mov         word ptr 0x40[bp],ax 
38EA    89 5E EA                  mov         word ptr -0x16[bp],bx 
38ED    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
38F0    89 46 42                  mov         word ptr 0x42[bp],ax 
38F3    83 C3 24                  add         bx,0x0024 
38F6    89 46 52                  mov         word ptr 0x52[bp],ax 
38F9    89 5E 50                  mov         word ptr 0x50[bp],bx 
38FC                          L$344:
38FC    C5 5E 50                  lds         bx,dword ptr 0x50[bp] 
38FF    8B 47 06                  mov         ax,word ptr 0x6[bx] 
3902    3B 46 32                  cmp         ax,word ptr 0x32[bp] 
3905    7E 03                     jle         L$345 
3907    E9 58 05                  jmp         L$386 
390A                          L$345:
390A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
390D    C7 46 16 00 00            mov         word ptr 0x16[bp],0x0000 
3912    83 C3 14                  add         bx,0x0014 
3915    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3918    89 5E 46                  mov         word ptr 0x46[bp],bx 
391B    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
391E    C7 46 68 00 00            mov         word ptr 0x68[bp],0x0000 
3923    83 C3 04                  add         bx,0x0004 
3926    89 46 F2                  mov         word ptr -0xe[bp],ax 
3929    89 5E F4                  mov         word ptr -0xc[bp],bx 
392C    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
392F    89 46 F6                  mov         word ptr -0xa[bp],ax 
3932    83 C3 2C                  add         bx,0x002c 
3935    89 46 56                  mov         word ptr 0x56[bp],ax 
3938    89 5E 54                  mov         word ptr 0x54[bp],bx 
393B                          L$346:
393B    C5 5E 54                  lds         bx,dword ptr 0x54[bp] 
393E    8B 47 06                  mov         ax,word ptr 0x6[bx] 
3941    3B 46 16                  cmp         ax,word ptr 0x16[bp] 
3944    7E 03                     jle         L$347 
3946    E9 10 06                  jmp         L$390 
3949                          L$347:
3949    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
394C    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
3951    83 C3 1C                  add         bx,0x001c 
3954    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3957    89 5E FE                  mov         word ptr -0x2[bp],bx 
395A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
395D    C7 46 6A 00 00            mov         word ptr 0x6a[bp],0x0000 
3962    83 C3 04                  add         bx,0x0004 
3965    89 46 00                  mov         word ptr [bp],ax 
3968    89 5E 04                  mov         word ptr 0x4[bp],bx 
396B    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
396E    89 46 48                  mov         word ptr 0x48[bp],ax 
3971    83 C3 34                  add         bx,0x0034 
3974    89 46 5A                  mov         word ptr 0x5a[bp],ax 
3977    89 5E 58                  mov         word ptr 0x58[bp],bx 
397A                          L$348:
397A    C5 5E 58                  lds         bx,dword ptr 0x58[bp] 
397D    8B 47 06                  mov         ax,word ptr 0x6[bx] 
3980    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
3983    7E 03                     jle         L$349 
3985    E9 E2 06                  jmp         L$394 
3988                          L$349:
3988    C7 46 3A 00 00            mov         word ptr 0x3a[bp],0x0000 
398D    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3990    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3993    8B 76 A0                  mov         si,word ptr -0x60[bp] 
3996    C7 46 6C 00 00            mov         word ptr 0x6c[bp],0x0000 
399B    89 46 0A                  mov         word ptr 0xa[bp],ax 
399E    83 C3 18                  add         bx,0x0018 
39A1    89 46 0E                  mov         word ptr 0xe[bp],ax 
39A4    89 5E 08                  mov         word ptr 0x8[bp],bx 
39A7    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
39AA    89 46 5C                  mov         word ptr 0x5c[bp],ax 
39AD    83 C3 04                  add         bx,0x0004 
39B0    83 C6 44                  add         si,0x0044 
39B3    89 5E 0C                  mov         word ptr 0xc[bp],bx 
39B6                          L$350:
39B6    8E 5E 5C                  mov         ds,word ptr 0x5c[bp] 
39B9    8B 44 06                  mov         ax,word ptr 0x6[si] 
39BC    3B 46 3A                  cmp         ax,word ptr 0x3a[bp] 
39BF    7E 6A                     jle         L$353 
39C1    8B 1C                     mov         bx,word ptr [si] 
39C3    03 5E 6C                  add         bx,word ptr 0x6c[bp] 
39C6    8E 5C 02                  mov         ds,word ptr 0x2[si] 
39C9    B1 04                     mov         cl,0x04 
39CB    8B 47 02                  mov         ax,word ptr 0x2[bx] 
39CE    D3 F8                     sar         ax,cl 
39D0    8B 7E 08                  mov         di,word ptr 0x8[bp] 
39D3    50                        push        ax 
39D4    8B 07                     mov         ax,word ptr [bx] 
39D6    C5 5E 08                  lds         bx,dword ptr 0x8[bp] 
39D9    D3 F8                     sar         ax,cl 
39DB    8B 1F                     mov         bx,word ptr [bx] 
39DD    8E 5D 02                  mov         ds,word ptr 0x2[di] 
39E0    50                        push        ax 
39E1    8B 47 02                  mov         ax,word ptr 0x2[bx] 
39E4    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
39E7    C5 5E 0C                  lds         bx,dword ptr 0xc[bp] 
39EA    8B 7E 0C                  mov         di,word ptr 0xc[bp] 
39ED    8B 1F                     mov         bx,word ptr [bx] 
39EF    8E 5D 02                  mov         ds,word ptr 0x2[di] 
39F2    FF 46 3A                  inc         word ptr 0x3a[bp] 
39F5    8B 7F 02                  mov         di,word ptr 0x2[bx] 
39F8    8B 57 04                  mov         dx,word ptr 0x4[bx] 
39FB    89 C3                     mov         bx,ax 
39FD    89 F8                     mov         ax,di 
39FF    83 46 6C 08               add         word ptr 0x6c[bp],0x0008 
3A03    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
3A08    EB AC                     jmp         L$350 
3A0A                          L$351:
3A0A    B9 01 00                  mov         cx,0x0001 
3A0D    8B 46 A0                  mov         ax,word ptr -0x60[bp] 
3A10    8C DA                     mov         dx,ds 
3A12    8B 5F 6C                  mov         bx,word ptr 0x6c[bx] 
3A15    0E                        push        cs 
3A16    E8 00 00                  call        void far Game::loadLevel( LevelNumber, ActorPosition::ActorPositionT ) 
3A19    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
3A1C    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3A1F    C6 47 6C FF               mov         byte ptr 0x6c[bx],0xff 
3A23    E9 9F FD                  jmp         L$332 
3A26                          L$352:
3A26    30 C0                     xor         al,al 
3A28    E9 45 FE                  jmp         L$336 
3A2B                          L$353:
3A2B    C7 46 10 00 00            mov         word ptr 0x10[bp],0x0000 
3A30    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3A33    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3A36    8B 76 A0                  mov         si,word ptr -0x60[bp] 
3A39    C7 46 6E 00 00            mov         word ptr 0x6e[bp],0x0000 
3A3E    89 46 14                  mov         word ptr 0x14[bp],ax 
3A41    83 C3 20                  add         bx,0x0020 
3A44    89 46 4E                  mov         word ptr 0x4e[bp],ax 
3A47    89 5E 12                  mov         word ptr 0x12[bp],bx 
3A4A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3A4D    89 46 5E                  mov         word ptr 0x5e[bp],ax 
3A50    83 C3 04                  add         bx,0x0004 
3A53    83 C6 4C                  add         si,0x004c 
3A56    89 5E 18                  mov         word ptr 0x18[bp],bx 
3A59                          L$354:
3A59    8E 5E 5E                  mov         ds,word ptr 0x5e[bp] 
3A5C    8B 44 06                  mov         ax,word ptr 0x6[si] 
3A5F    3B 46 10                  cmp         ax,word ptr 0x10[bp] 
3A62    7E 68                     jle         L$357 
3A64    8B 1C                     mov         bx,word ptr [si] 
3A66    03 5E 6E                  add         bx,word ptr 0x6e[bp] 
3A69    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3A6C    B1 04                     mov         cl,0x04 
3A6E    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3A71    D3 F8                     sar         ax,cl 
3A73    8B 7E 12                  mov         di,word ptr 0x12[bp] 
3A76    50                        push        ax 
3A77    8B 07                     mov         ax,word ptr [bx] 
3A79    C5 5E 12                  lds         bx,dword ptr 0x12[bp] 
3A7C    D3 F8                     sar         ax,cl 
3A7E    8B 1F                     mov         bx,word ptr [bx] 
3A80    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3A83    50                        push        ax 
3A84    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3A87    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
3A8A    8E 5E 4E                  mov         ds,word ptr 0x4e[bp] 
3A8D    8B 5E 18                  mov         bx,word ptr 0x18[bp] 
3A90    8B 7E 18                  mov         di,word ptr 0x18[bp] 
3A93    8B 1F                     mov         bx,word ptr [bx] 
3A95    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3A98    FF 46 10                  inc         word ptr 0x10[bp] 
3A9B    8B 57 02                  mov         dx,word ptr 0x2[bx] 
3A9E    8B 7F 04                  mov         di,word ptr 0x4[bx] 
3AA1    89 C3                     mov         bx,ax 
3AA3    89 D0                     mov         ax,dx 
3AA5    89 FA                     mov         dx,di 
3AA7    83 46 6E 08               add         word ptr 0x6e[bp],0x0008 
3AAB    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
3AB0    EB A7                     jmp         L$354 
3AB2                          L$355:
3AB2    8B 44 0C                  mov         ax,word ptr 0xc[si] 
3AB5    89 C2                     mov         dx,ax 
3AB7    42                        inc         dx 
3AB8    89 54 0C                  mov         word ptr 0xc[si],dx 
3ABB    3D 04 00                  cmp         ax,0x0004 
3ABE    7E 03                     jle         L$356 
3AC0    E9 CD FD                  jmp         L$338 
3AC3                          L$356:
3AC3    8A 5C 08                  mov         bl,byte ptr 0x8[si] 
3AC6    FF 44 0C                  inc         word ptr 0xc[si] 
3AC9    E9 D9 FD                  jmp         L$341 
3ACC                          L$357:
3ACC    C7 46 1A 00 00            mov         word ptr 0x1a[bp],0x0000 
3AD1    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3AD4    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3AD7    8B 76 A0                  mov         si,word ptr -0x60[bp] 
3ADA    C7 46 70 00 00            mov         word ptr 0x70[bp],0x0000 
3ADF    89 46 1E                  mov         word ptr 0x1e[bp],ax 
3AE2    83 C3 20                  add         bx,0x0020 
3AE5    89 46 22                  mov         word ptr 0x22[bp],ax 
3AE8    89 5E 1C                  mov         word ptr 0x1c[bp],bx 
3AEB    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3AEE    89 46 60                  mov         word ptr 0x60[bp],ax 
3AF1    83 C3 04                  add         bx,0x0004 
3AF4    83 C6 54                  add         si,0x0054 
3AF7    89 5E 20                  mov         word ptr 0x20[bp],bx 
3AFA                          L$358:
3AFA    8E 5E 60                  mov         ds,word ptr 0x60[bp] 
3AFD    8B 44 06                  mov         ax,word ptr 0x6[si] 
3B00    3B 46 1A                  cmp         ax,word ptr 0x1a[bp] 
3B03    7E 6B                     jle         L$363 
3B05    8B 1C                     mov         bx,word ptr [si] 
3B07    03 5E 70                  add         bx,word ptr 0x70[bp] 
3B0A    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3B0D    B1 04                     mov         cl,0x04 
3B0F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3B12    8B 7E 1C                  mov         di,word ptr 0x1c[bp] 
3B15    D3 F8                     sar         ax,cl 
3B17    FF 46 1A                  inc         word ptr 0x1a[bp] 
3B1A    50                        push        ax 
3B1B    8B 07                     mov         ax,word ptr [bx] 
3B1D    C5 5E 1C                  lds         bx,dword ptr 0x1c[bp] 
3B20    D3 F8                     sar         ax,cl 
3B22    8B 1F                     mov         bx,word ptr [bx] 
3B24    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3B27    50                        push        ax 
3B28    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3B2B    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
3B2E    C5 5E 20                  lds         bx,dword ptr 0x20[bp] 
3B31    8B 7E 20                  mov         di,word ptr 0x20[bp] 
3B34    8B 1F                     mov         bx,word ptr [bx] 
3B36    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3B39    89 46 44                  mov         word ptr 0x44[bp],ax 
3B3C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3B3F    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3B42    8B 5E 44                  mov         bx,word ptr 0x44[bp] 
3B45    83 46 70 08               add         word ptr 0x70[bp],0x0008 
3B49    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
3B4E    EB AA                     jmp         L$358 
3B50                          L$359:
3B50    7C 10                     jl          L$361 
3B52    74 03                     je          L$360 
3B54    E9 4E FD                  jmp         L$341 
3B57                          L$360:
3B57    80 7C 0A 01               cmp         byte ptr 0xa[si],0x01 
3B5B    75 0E                     jne         L$362 
3B5D    B3 03                     mov         bl,0x03 
3B5F    E9 43 FD                  jmp         L$341 
3B62                          L$361:
3B62    B3 02                     mov         bl,0x02 
3B64    C6 44 0A 00               mov         byte ptr 0xa[si],0x00 
3B68    E9 3A FD                  jmp         L$341 
3B6B                          L$362:
3B6B    B3 04                     mov         bl,0x04 
3B6D    E9 35 FD                  jmp         L$341 
3B70                          L$363:
3B70    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3B73    C7 46 24 00 00            mov         word ptr 0x24[bp],0x0000 
3B78    83 C3 1C                  add         bx,0x001c 
3B7B    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
3B7E    89 5E 30                  mov         word ptr 0x30[bp],bx 
3B81    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3B84    C7 46 74 00 00            mov         word ptr 0x74[bp],0x0000 
3B89    83 C3 04                  add         bx,0x0004 
3B8C    89 46 34                  mov         word ptr 0x34[bp],ax 
3B8F    89 5E 36                  mov         word ptr 0x36[bp],bx 
3B92    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
3B95    89 46 38                  mov         word ptr 0x38[bp],ax 
3B98    83 C3 3C                  add         bx,0x003c 
3B9B    89 46 64                  mov         word ptr 0x64[bp],ax 
3B9E    89 5E 62                  mov         word ptr 0x62[bp],bx 
3BA1                          L$364:
3BA1    C5 5E 62                  lds         bx,dword ptr 0x62[bp] 
3BA4    8B 47 06                  mov         ax,word ptr 0x6[bx] 
3BA7    3B 46 24                  cmp         ax,word ptr 0x24[bp] 
3BAA    7F 03                     jg          L$365 
3BAC    E9 B9 05                  jmp         L$398 
3BAF                          L$365:
3BAF    89 DF                     mov         di,bx 
3BB1    8B 3D                     mov         di,word ptr [di] 
3BB3    8B 46 4A                  mov         ax,word ptr 0x4a[bp] 
3BB6    03 7E 74                  add         di,word ptr 0x74[bp] 
3BB9    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
3BBC    8C D1                     mov         cx,ss 
3BBE    8B 35                     mov         si,word ptr [di] 
3BC0    8B 7D 02                  mov         di,word ptr 0x2[di] 
3BC3    89 46 BA                  mov         word ptr -0x46[bp],ax 
3BC6    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
3BC9    8D 5E BA                  lea         bx,-0x46[bp] 
3BCC    89 46 BC                  mov         word ptr -0x44[bp],ax 
3BCF    B8 01 00                  mov         ax,0x0001 
3BD2    89 FA                     mov         dx,di 
3BD4    89 46 BE                  mov         word ptr -0x42[bp],ax 
3BD7    89 46 C0                  mov         word ptr -0x40[bp],ax 
3BDA    89 F0                     mov         ax,si 
3BDC    9A 00 00 00 00            call        void far Boss1::walk( Rectangle const far & ) 
3BE1    8D 5E B2                  lea         bx,-0x4e[bp] 
3BE4    8C D1                     mov         cx,ss 
3BE6    89 F0                     mov         ax,si 
3BE8    89 FA                     mov         dx,di 
3BEA    C7 46 76 00 00            mov         word ptr 0x76[bp],0x0000 
3BEF    9A 00 00 00 00            call        tnd::vector<Rectangle far > far Boss1::getProjectiles() const 
3BF4    C7 46 AE 02 00            mov         word ptr -0x52[bp],0x0002 
3BF9    83 7E B8 00               cmp         word ptr -0x48[bp],0x0000 
3BFD    7F 03                     jg          L$366 
3BFF    E9 F7 00                  jmp         L$371 
3C02                          L$366:
3C02    C7 46 72 00 00            mov         word ptr 0x72[bp],0x0000 
3C07                          L$367:
3C07    8B 5E B2                  mov         bx,word ptr -0x4e[bp] 
3C0A    03 5E 72                  add         bx,word ptr 0x72[bp] 
3C0D    8B 46 B4                  mov         ax,word ptr -0x4c[bp] 
3C10    89 5E 26                  mov         word ptr 0x26[bp],bx 
3C13    89 5E 2A                  mov         word ptr 0x2a[bp],bx 
3C16    8B 5E E0                  mov         bx,word ptr -0x20[bp] 
3C19    89 46 28                  mov         word ptr 0x28[bp],ax 
3C1C    43                        inc         bx 
3C1D    89 46 2C                  mov         word ptr 0x2c[bp],ax 
3C20    3B 5E DE                  cmp         bx,word ptr -0x22[bp] 
3C23    7E 67                     jle         L$370 
3C25    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
3C28    50                        push        ax 
3C29    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
3C2C    B1 03                     mov         cl,0x03 
3C2E    50                        push        ax 
3C2F    89 D8                     mov         ax,bx 
3C31    D3 E0                     shl         ax,cl 
3C33    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
3C38    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
3C3D    89 C6                     mov         si,ax 
3C3F    89 D3                     mov         bx,dx 
3C41    89 46 78                  mov         word ptr 0x78[bp],ax 
3C44    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
3C47    89 56 2E                  mov         word ptr 0x2e[bp],dx 
3C4A    40                        inc         ax 
3C4B    31 D2                     xor         dx,dx 
3C4D    89 46 DE                  mov         word ptr -0x22[bp],ax 
3C50    83 7E E0 00               cmp         word ptr -0x20[bp],0x0000 
3C54    7E 1F                     jle         L$369 
3C56    B1 03                     mov         cl,0x03 
3C58    89 F0                     mov         ax,si 
3C5A    8E C3                     mov         es,bx 
3C5C                          L$368:
3C5C    89 D6                     mov         si,dx 
3C5E    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
3C61    D3 E6                     shl         si,cl 
3C63    89 C7                     mov         di,ax 
3C65    03 76 DA                  add         si,word ptr -0x26[bp] 
3C68    42                        inc         dx 
3C69    A5                        movsw       
3C6A    A5                        movsw       
3C6B    A5                        movsw       
3C6C    A5                        movsw       
3C6D    05 08 00                  add         ax,0x0008 
3C70    3B 56 E0                  cmp         dx,word ptr -0x20[bp] 
3C73    7C E7                     jl          L$368 
3C75                          L$369:
3C75    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
3C78    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
3C7B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
3C80    8B 46 78                  mov         ax,word ptr 0x78[bp] 
3C83    89 46 DA                  mov         word ptr -0x26[bp],ax 
3C86    8B 46 2E                  mov         ax,word ptr 0x2e[bp] 
3C89    89 46 DC                  mov         word ptr -0x24[bp],ax 
3C8C                          L$370:
3C8C    B1 03                     mov         cl,0x03 
3C8E    8B 7E E0                  mov         di,word ptr -0x20[bp] 
3C91    8E 46 DC                  mov         es,word ptr -0x24[bp] 
3C94    8E 5E 2C                  mov         ds,word ptr 0x2c[bp] 
3C97    D3 E7                     shl         di,cl 
3C99    8B 76 2A                  mov         si,word ptr 0x2a[bp] 
3C9C    03 7E DA                  add         di,word ptr -0x26[bp] 
3C9F    A5                        movsw       
3CA0    A5                        movsw       
3CA1    A5                        movsw       
3CA2    A5                        movsw       
3CA3    8B 5E 26                  mov         bx,word ptr 0x26[bp] 
3CA6    FF 46 E0                  inc         word ptr -0x20[bp] 
3CA9    8E 5E 28                  mov         ds,word ptr 0x28[bp] 
3CAC    B1 04                     mov         cl,0x04 
3CAE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3CB1    D3 F8                     sar         ax,cl 
3CB3    8B 76 30                  mov         si,word ptr 0x30[bp] 
3CB6    50                        push        ax 
3CB7    8B 07                     mov         ax,word ptr [bx] 
3CB9    8E 5E 34                  mov         ds,word ptr 0x34[bp] 
3CBC    8B 5E 30                  mov         bx,word ptr 0x30[bp] 
3CBF    D3 F8                     sar         ax,cl 
3CC1    8B 1F                     mov         bx,word ptr [bx] 
3CC3    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3CC6    50                        push        ax 
3CC7    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3CCA    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
3CCD    C5 5E 36                  lds         bx,dword ptr 0x36[bp] 
3CD0    8B 76 36                  mov         si,word ptr 0x36[bp] 
3CD3    8B 1F                     mov         bx,word ptr [bx] 
3CD5    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3CD8    8B 77 02                  mov         si,word ptr 0x2[bx] 
3CDB    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3CDE    89 C3                     mov         bx,ax 
3CE0    89 F0                     mov         ax,si 
3CE2    FF 46 76                  inc         word ptr 0x76[bp] 
3CE5    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
3CEA    8B 46 76                  mov         ax,word ptr 0x76[bp] 
3CED    83 46 72 08               add         word ptr 0x72[bp],0x0008 
3CF1    3B 46 B8                  cmp         ax,word ptr -0x48[bp] 
3CF4    7D 03                     jge         L$371 
3CF6    E9 0E FF                  jmp         L$367 
3CF9                          L$371:
3CF9    8B 46 B2                  mov         ax,word ptr -0x4e[bp] 
3CFC    8B 56 B4                  mov         dx,word ptr -0x4c[bp] 
3CFF    C7 46 AE 01 00            mov         word ptr -0x52[bp],0x0001 
3D04    9A 00 00 00 00            call        void far operator delete []( void far * ) 
3D09    B8 01 00                  mov         ax,0x0001 
3D0C    83 46 74 04               add         word ptr 0x74[bp],0x0004 
3D10    89 46 AE                  mov         word ptr -0x52[bp],ax 
3D13    01 46 24                  add         word ptr 0x24[bp],ax 
3D16    E9 88 FE                  jmp         L$364 
3D19                          L$372:
3D19    85 C9                     test        cx,cx 
3D1B    7E 05                     jle         L$373 
3D1D    B3 05                     mov         bl,0x05 
3D1F    E9 7F FB                  jmp         L$340 
3D22                          L$373:
3D22    7C 0B                     jl          L$374 
3D24    80 7C 0A 01               cmp         byte ptr 0xa[si],0x01 
3D28    75 0E                     jne         L$375 
3D2A    B3 05                     mov         bl,0x05 
3D2C    E9 76 FB                  jmp         L$341 
3D2F                          L$374:
3D2F    B3 06                     mov         bl,0x06 
3D31    C6 44 0A 00               mov         byte ptr 0xa[si],0x00 
3D35    E9 6D FB                  jmp         L$341 
3D38                          L$375:
3D38    B3 06                     mov         bl,0x06 
3D3A    E9 68 FB                  jmp         L$341 
3D3D                          L$376:
3D3D    C5 1C                     lds         bx,dword ptr [si] 
3D3F    B9 00 00                  mov         cx,game_DATA2 
3D42    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3D45    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3D48    BB 27 00                  mov         bx,offset L$563 
3D4B    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3D50    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3D53    C5 5C 0E                  lds         bx,dword ptr 0xe[si] 
3D56    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3D59    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3D5C    83 C6 0E                  add         si,0x000e 
3D5F    9A 00 00 00 00            call        void far SoundController::playWalkSound() 
3D64    E9 53 FB                  jmp         L$343 
3D67                          L$377:
3D67    C5 1C                     lds         bx,dword ptr [si] 
3D69    B9 00 00                  mov         cx,game_DATA2 
3D6C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3D6F    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3D72    BB 2D 00                  mov         bx,offset L$564 
3D75    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3D7A    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3D7D    C5 5C 0E                  lds         bx,dword ptr 0xe[si] 
3D80    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3D83    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3D86    83 C6 0E                  add         si,0x000e 
3D89    9A 00 00 00 00            call        void far SoundController::playWalkSound() 
3D8E    E9 29 FB                  jmp         L$343 
3D91                          L$378:
3D91    C5 1C                     lds         bx,dword ptr [si] 
3D93    B9 00 00                  mov         cx,game_DATA2 
3D96    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3D99    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3D9C    BB 33 00                  mov         bx,offset L$565 
3D9F    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3DA4    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3DA7    C5 5C 0E                  lds         bx,dword ptr 0xe[si] 
3DAA    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3DAD    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3DB0    83 C6 0E                  add         si,0x000e 
3DB3    9A 00 00 00 00            call        void far SoundController::playStandSound() 
3DB8    E9 FF FA                  jmp         L$343 
3DBB                          L$379:
3DBB    C5 1C                     lds         bx,dword ptr [si] 
3DBD    B9 00 00                  mov         cx,game_DATA2 
3DC0    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3DC3    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3DC6    BB 3A 00                  mov         bx,offset L$566 
3DC9    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3DCE    8E 5E 4C                  mov         ds,word ptr 0x4c[bp] 
3DD1    C5 5C 0E                  lds         bx,dword ptr 0xe[si] 
3DD4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3DD7    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3DDA    83 C6 0E                  add         si,0x000e 
3DDD    9A 00 00 00 00            call        void far SoundController::playStandSound() 
3DE2    E9 D5 FA                  jmp         L$343 
3DE5                          L$380:
3DE5    80 7E 7E 00               cmp         byte ptr 0x7e[bp],0x00 
3DE9    74 16                     je          L$381 
3DEB    C5 1C                     lds         bx,dword ptr [si] 
3DED    B9 00 00                  mov         cx,game_DATA2 
3DF0    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3DF3    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3DF6    BB 41 00                  mov         bx,offset L$567 
3DF9    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3DFE    E9 B9 FA                  jmp         L$343 
3E01                          L$381:
3E01    C5 1C                     lds         bx,dword ptr [si] 
3E03    B9 00 00                  mov         cx,game_DATA2 
3E06    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3E09    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3E0C    BB 4A 00                  mov         bx,offset L$568 
3E0F    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3E14    E9 A3 FA                  jmp         L$343 
3E17                          L$382:
3E17    80 7E 7E 00               cmp         byte ptr 0x7e[bp],0x00 
3E1B    74 16                     je          L$383 
3E1D    C5 1C                     lds         bx,dword ptr [si] 
3E1F    B9 00 00                  mov         cx,game_DATA2 
3E22    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3E25    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3E28    BB 50 00                  mov         bx,offset L$569 
3E2B    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3E30    E9 87 FA                  jmp         L$343 
3E33                          L$383:
3E33    C5 1C                     lds         bx,dword ptr [si] 
3E35    B9 00 00                  mov         cx,game_DATA2 
3E38    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3E3B    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3E3E    BB 59 00                  mov         bx,offset L$570 
3E41    9A 00 00 00 00            call        void far Animation::useTag( char const far * ) 
3E46    E9 71 FA                  jmp         L$343 
3E49                          L$384:
3E49    88 D8                     mov         al,bl 
3E4B    FE C8                     dec         al 
3E4D    88 5C 08                  mov         byte ptr 0x8[si],bl 
3E50    3C 05                     cmp         al,0x05 
3E52    76 03                     jbe         L$385 
3E54    E9 63 FA                  jmp         L$343 
3E57                          L$385:
3E57    30 E4                     xor         ah,ah 
3E59    89 C3                     mov         bx,ax 
3E5B    D1 E3                     shl         bx,0x01 
3E5D    2E FF A7 5C 37            jmp         word ptr cs:L$331[bx] 
3E62                          L$386:
3E62    89 DF                     mov         di,bx 
3E64    8B 3D                     mov         di,word ptr [di] 
3E66    03 7E 66                  add         di,word ptr 0x66[bp] 
3E69    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
3E6C    8C D1                     mov         cx,ss 
3E6E    8B 35                     mov         si,word ptr [di] 
3E70    8B 7D 02                  mov         di,word ptr 0x2[di] 
3E73    89 F0                     mov         ax,si 
3E75    89 FA                     mov         dx,di 
3E77    8D 5E CA                  lea         bx,-0x36[bp] 
3E7A    9A 00 00 00 00            call        void far Enemy::walk() 
3E7F    89 F0                     mov         ax,si 
3E81    89 FA                     mov         dx,di 
3E83    9A 00 00 00 00            call        Rectangle far Enemy::getPos() 
3E88    8B 5E E0                  mov         bx,word ptr -0x20[bp] 
3E8B    43                        inc         bx 
3E8C    3B 5E DE                  cmp         bx,word ptr -0x22[bp] 
3E8F    7E 67                     jle         L$389 
3E91    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
3E94    50                        push        ax 
3E95    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
3E98    B1 03                     mov         cl,0x03 
3E9A    50                        push        ax 
3E9B    89 D8                     mov         ax,bx 
3E9D    D3 E0                     shl         ax,cl 
3E9F    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
3EA4    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
3EA9    89 C6                     mov         si,ax 
3EAB    89 46 06                  mov         word ptr 0x6[bp],ax 
3EAE    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
3EB1    89 D3                     mov         bx,dx 
3EB3    40                        inc         ax 
3EB4    89 56 F0                  mov         word ptr -0x10[bp],dx 
3EB7    89 46 DE                  mov         word ptr -0x22[bp],ax 
3EBA    31 C0                     xor         ax,ax 
3EBC    83 7E E0 00               cmp         word ptr -0x20[bp],0x0000 
3EC0    7E 1F                     jle         L$388 
3EC2    B1 03                     mov         cl,0x03 
3EC4    89 F2                     mov         dx,si 
3EC6    8E C3                     mov         es,bx 
3EC8                          L$387:
3EC8    89 C6                     mov         si,ax 
3ECA    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
3ECD    D3 E6                     shl         si,cl 
3ECF    89 D7                     mov         di,dx 
3ED1    03 76 DA                  add         si,word ptr -0x26[bp] 
3ED4    40                        inc         ax 
3ED5    A5                        movsw       
3ED6    A5                        movsw       
3ED7    A5                        movsw       
3ED8    A5                        movsw       
3ED9    83 C2 08                  add         dx,0x0008 
3EDC    3B 46 E0                  cmp         ax,word ptr -0x20[bp] 
3EDF    7C E7                     jl          L$387 
3EE1                          L$388:
3EE1    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
3EE4    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
3EE7    9A 00 00 00 00            call        void far operator delete []( void far * ) 
3EEC    8B 46 06                  mov         ax,word ptr 0x6[bp] 
3EEF    89 46 DA                  mov         word ptr -0x26[bp],ax 
3EF2    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
3EF5    89 46 DC                  mov         word ptr -0x24[bp],ax 
3EF8                          L$389:
3EF8    B1 03                     mov         cl,0x03 
3EFA    8B 7E E0                  mov         di,word ptr -0x20[bp] 
3EFD    8E 46 DC                  mov         es,word ptr -0x24[bp] 
3F00    8D 76 CA                  lea         si,-0x36[bp] 
3F03    8B 5E 3E                  mov         bx,word ptr 0x3e[bp] 
3F06    8C D0                     mov         ax,ss 
3F08    D3 E7                     shl         di,cl 
3F0A    8E D8                     mov         ds,ax 
3F0C    03 7E DA                  add         di,word ptr -0x26[bp] 
3F0F    83 46 66 04               add         word ptr 0x66[bp],0x0004 
3F13    A5                        movsw       
3F14    A5                        movsw       
3F15    A5                        movsw       
3F16    A5                        movsw       
3F17    B1 04                     mov         cl,0x04 
3F19    8B 46 CC                  mov         ax,word ptr -0x34[bp] 
3F1C    FF 46 E0                  inc         word ptr -0x20[bp] 
3F1F    C5 76 3E                  lds         si,dword ptr 0x3e[bp] 
3F22    D3 F8                     sar         ax,cl 
3F24    8B 1F                     mov         bx,word ptr [bx] 
3F26    50                        push        ax 
3F27    8E 5C 02                  mov         ds,word ptr 0x2[si] 
3F2A    8B 46 CA                  mov         ax,word ptr -0x36[bp] 
3F2D    8B 77 04                  mov         si,word ptr 0x4[bx] 
3F30    D3 F8                     sar         ax,cl 
3F32    8B 4F 02                  mov         cx,word ptr 0x2[bx] 
3F35    8E 5E 42                  mov         ds,word ptr 0x42[bp] 
3F38    8B 5E EA                  mov         bx,word ptr -0x16[bp] 
3F3B    8B 7E EA                  mov         di,word ptr -0x16[bp] 
3F3E    8B 1F                     mov         bx,word ptr [bx] 
3F40    8E 5D 02                  mov         ds,word ptr 0x2[di] 
3F43    50                        push        ax 
3F44    8B 47 02                  mov         ax,word ptr 0x2[bx] 
3F47    8B 57 04                  mov         dx,word ptr 0x4[bx] 
3F4A    89 CB                     mov         bx,cx 
3F4C    89 F1                     mov         cx,si 
3F4E    FF 46 32                  inc         word ptr 0x32[bp] 
3F51    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
3F56    E9 A3 F9                  jmp         L$344 
3F59                          L$390:
3F59    89 DF                     mov         di,bx 
3F5B    8B 3D                     mov         di,word ptr [di] 
3F5D    8B 46 4A                  mov         ax,word ptr 0x4a[bp] 
3F60    03 7E 68                  add         di,word ptr 0x68[bp] 
3F63    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
3F66    8C D1                     mov         cx,ss 
3F68    8B 35                     mov         si,word ptr [di] 
3F6A    8B 7D 02                  mov         di,word ptr 0x2[di] 
3F6D    89 46 D2                  mov         word ptr -0x2e[bp],ax 
3F70    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
3F73    8D 5E D2                  lea         bx,-0x2e[bp] 
3F76    89 46 D4                  mov         word ptr -0x2c[bp],ax 
3F79    B8 01 00                  mov         ax,0x0001 
3F7C    89 FA                     mov         dx,di 
3F7E    89 46 D6                  mov         word ptr -0x2a[bp],ax 
3F81    89 46 D8                  mov         word ptr -0x28[bp],ax 
3F84    89 F0                     mov         ax,si 
3F86    9A 00 00 00 00            call        void far SeekerEnemy::walk( Rectangle const far & ) 
3F8B    8D 5E E2                  lea         bx,-0x1e[bp] 
3F8E    8C D1                     mov         cx,ss 
3F90    89 F0                     mov         ax,si 
3F92    89 FA                     mov         dx,di 
3F94    9A 00 00 00 00            call        Rectangle far SeekerEnemy::getPos() 
3F99    8B 5E E0                  mov         bx,word ptr -0x20[bp] 
3F9C    43                        inc         bx 
3F9D    3B 5E DE                  cmp         bx,word ptr -0x22[bp] 
3FA0    7E 67                     jle         L$393 
3FA2    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
3FA5    50                        push        ax 
3FA6    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
3FA9    B1 03                     mov         cl,0x03 
3FAB    50                        push        ax 
3FAC    89 D8                     mov         ax,bx 
3FAE    D3 E0                     shl         ax,cl 
3FB0    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
3FB5    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
3FBA    89 C6                     mov         si,ax 
3FBC    89 46 EC                  mov         word ptr -0x14[bp],ax 
3FBF    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
3FC2    89 D3                     mov         bx,dx 
3FC4    40                        inc         ax 
3FC5    89 56 02                  mov         word ptr 0x2[bp],dx 
3FC8    89 46 DE                  mov         word ptr -0x22[bp],ax 
3FCB    31 C0                     xor         ax,ax 
3FCD    83 7E E0 00               cmp         word ptr -0x20[bp],0x0000 
3FD1    7E 1F                     jle         L$392 
3FD3    B1 03                     mov         cl,0x03 
3FD5    89 F2                     mov         dx,si 
3FD7    8E C3                     mov         es,bx 
3FD9                          L$391:
3FD9    89 C6                     mov         si,ax 
3FDB    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
3FDE    D3 E6                     shl         si,cl 
3FE0    89 D7                     mov         di,dx 
3FE2    03 76 DA                  add         si,word ptr -0x26[bp] 
3FE5    40                        inc         ax 
3FE6    A5                        movsw       
3FE7    A5                        movsw       
3FE8    A5                        movsw       
3FE9    A5                        movsw       
3FEA    83 C2 08                  add         dx,0x0008 
3FED    3B 46 E0                  cmp         ax,word ptr -0x20[bp] 
3FF0    7C E7                     jl          L$391 
3FF2                          L$392:
3FF2    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
3FF5    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
3FF8    9A 00 00 00 00            call        void far operator delete []( void far * ) 
3FFD    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
4000    89 46 DA                  mov         word ptr -0x26[bp],ax 
4003    8B 46 02                  mov         ax,word ptr 0x2[bp] 
4006    89 46 DC                  mov         word ptr -0x24[bp],ax 
4009                          L$393:
4009    B1 03                     mov         cl,0x03 
400B    8B 7E E0                  mov         di,word ptr -0x20[bp] 
400E    8E 46 DC                  mov         es,word ptr -0x24[bp] 
4011    8D 76 E2                  lea         si,-0x1e[bp] 
4014    8B 5E 46                  mov         bx,word ptr 0x46[bp] 
4017    8C D0                     mov         ax,ss 
4019    D3 E7                     shl         di,cl 
401B    8E D8                     mov         ds,ax 
401D    03 7E DA                  add         di,word ptr -0x26[bp] 
4020    83 46 68 04               add         word ptr 0x68[bp],0x0004 
4024    A5                        movsw       
4025    A5                        movsw       
4026    A5                        movsw       
4027    A5                        movsw       
4028    B1 04                     mov         cl,0x04 
402A    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
402D    FF 46 E0                  inc         word ptr -0x20[bp] 
4030    8E 5E F2                  mov         ds,word ptr -0xe[bp] 
4033    8B 76 46                  mov         si,word ptr 0x46[bp] 
4036    D3 F8                     sar         ax,cl 
4038    8B 1F                     mov         bx,word ptr [bx] 
403A    50                        push        ax 
403B    8E 5C 02                  mov         ds,word ptr 0x2[si] 
403E    8B 46 E2                  mov         ax,word ptr -0x1e[bp] 
4041    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4044    D3 F8                     sar         ax,cl 
4046    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
4049    C5 5E F4                  lds         bx,dword ptr -0xc[bp] 
404C    8B 76 F4                  mov         si,word ptr -0xc[bp] 
404F    8B 1F                     mov         bx,word ptr [bx] 
4051    8E 5C 02                  mov         ds,word ptr 0x2[si] 
4054    50                        push        ax 
4055    8B 47 02                  mov         ax,word ptr 0x2[bx] 
4058    8B 77 04                  mov         si,word ptr 0x4[bx] 
405B    89 D3                     mov         bx,dx 
405D    89 F2                     mov         dx,si 
405F    FF 46 16                  inc         word ptr 0x16[bp] 
4062    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
4067    E9 D1 F8                  jmp         L$346 
406A                          L$394:
406A    89 DF                     mov         di,bx 
406C    8B 3D                     mov         di,word ptr [di] 
406E    03 7E 6A                  add         di,word ptr 0x6a[bp] 
4071    8E 5F 02                  mov         ds,word ptr 0x2[bx] 
4074    8C D1                     mov         cx,ss 
4076    8B 35                     mov         si,word ptr [di] 
4078    8B 7D 02                  mov         di,word ptr 0x2[di] 
407B    89 F0                     mov         ax,si 
407D    89 FA                     mov         dx,di 
407F    8D 5E C2                  lea         bx,-0x3e[bp] 
4082    9A 00 00 00 00            call        void far FireBall::walk() 
4087    89 F0                     mov         ax,si 
4089    89 FA                     mov         dx,di 
408B    9A 00 00 00 00            call        Rectangle far FireBall::getPos() 
4090    8B 5E E0                  mov         bx,word ptr -0x20[bp] 
4093    43                        inc         bx 
4094    3B 5E DE                  cmp         bx,word ptr -0x22[bp] 
4097    7E 69                     jle         L$397 
4099    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
409C    50                        push        ax 
409D    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
40A0    B1 03                     mov         cl,0x03 
40A2    50                        push        ax 
40A3    89 D8                     mov         ax,bx 
40A5    D3 E0                     shl         ax,cl 
40A7    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
40AC    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
40B1    89 C3                     mov         bx,ax 
40B3    89 46 FA                  mov         word ptr -0x6[bp],ax 
40B6    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
40B9    89 D1                     mov         cx,dx 
40BB    40                        inc         ax 
40BC    89 56 FC                  mov         word ptr -0x4[bp],dx 
40BF    89 46 DE                  mov         word ptr -0x22[bp],ax 
40C2    31 C0                     xor         ax,ax 
40C4    83 7E E0 00               cmp         word ptr -0x20[bp],0x0000 
40C8    7E 21                     jle         L$396 
40CA    89 DA                     mov         dx,bx 
40CC    89 CB                     mov         bx,cx 
40CE    B1 03                     mov         cl,0x03 
40D0    8E C3                     mov         es,bx 
40D2                          L$395:
40D2    89 C6                     mov         si,ax 
40D4    8E 5E DC                  mov         ds,word ptr -0x24[bp] 
40D7    D3 E6                     shl         si,cl 
40D9    89 D7                     mov         di,dx 
40DB    03 76 DA                  add         si,word ptr -0x26[bp] 
40DE    40                        inc         ax 
40DF    A5                        movsw       
40E0    A5                        movsw       
40E1    A5                        movsw       
40E2    A5                        movsw       
40E3    83 C2 08                  add         dx,0x0008 
40E6    3B 46 E0                  cmp         ax,word ptr -0x20[bp] 
40E9    7C E7                     jl          L$395 
40EB                          L$396:
40EB    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
40EE    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
40F1    9A 00 00 00 00            call        void far operator delete []( void far * ) 
40F6    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
40F9    89 46 DA                  mov         word ptr -0x26[bp],ax 
40FC    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
40FF    89 46 DC                  mov         word ptr -0x24[bp],ax 
4102                          L$397:
4102    B1 03                     mov         cl,0x03 
4104    8B 7E E0                  mov         di,word ptr -0x20[bp] 
4107    8E 46 DC                  mov         es,word ptr -0x24[bp] 
410A    8D 76 C2                  lea         si,-0x3e[bp] 
410D    8C D0                     mov         ax,ss 
410F    D3 E7                     shl         di,cl 
4111    8E D8                     mov         ds,ax 
4113    03 7E DA                  add         di,word ptr -0x26[bp] 
4116    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
4119    A5                        movsw       
411A    A5                        movsw       
411B    A5                        movsw       
411C    A5                        movsw       
411D    B1 04                     mov         cl,0x04 
411F    8B 46 C4                  mov         ax,word ptr -0x3c[bp] 
4122    FF 46 E0                  inc         word ptr -0x20[bp] 
4125    8E 5E 00                  mov         ds,word ptr [bp] 
4128    D3 F8                     sar         ax,cl 
412A    8B 76 FE                  mov         si,word ptr -0x2[bp] 
412D    50                        push        ax 
412E    8B 46 C2                  mov         ax,word ptr -0x3e[bp] 
4131    8B 1F                     mov         bx,word ptr [bx] 
4133    D3 F8                     sar         ax,cl 
4135    8E 5C 02                  mov         ds,word ptr 0x2[si] 
4138    50                        push        ax 
4139    8B 4F 04                  mov         cx,word ptr 0x4[bx] 
413C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
413F    8E 5E 48                  mov         ds,word ptr 0x48[bp] 
4142    8B 5E 04                  mov         bx,word ptr 0x4[bp] 
4145    8B 76 04                  mov         si,word ptr 0x4[bp] 
4148    8B 1F                     mov         bx,word ptr [bx] 
414A    8E 5C 02                  mov         ds,word ptr 0x2[si] 
414D    83 46 6A 04               add         word ptr 0x6a[bp],0x0004 
4151    8B 57 02                  mov         dx,word ptr 0x2[bx] 
4154    8B 77 04                  mov         si,word ptr 0x4[bx] 
4157    89 C3                     mov         bx,ax 
4159    89 D0                     mov         ax,dx 
415B    89 F2                     mov         dx,si 
415D    FF 46 F8                  inc         word ptr -0x8[bp] 
4160    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
4165    E9 12 F8                  jmp         L$348 
4168                          L$398:
4168    B1 04                     mov         cl,0x04 
416A    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
416D    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4170    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
4173    D3 F8                     sar         ax,cl 
4175    8B 77 0C                  mov         si,word ptr 0xc[bx] 
4178    50                        push        ax 
4179    8B 46 4A                  mov         ax,word ptr 0x4a[bp] 
417C    8E 5F 0E                  mov         ds,word ptr 0xe[bx] 
417F    D3 F8                     sar         ax,cl 
4181    8B 54 02                  mov         dx,word ptr 0x2[si] 
4184    50                        push        ax 
4185    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4188    8B 46 9E                  mov         ax,word ptr -0x62[bp] 
418B    8B 76 A0                  mov         si,word ptr -0x60[bp] 
418E    8E D8                     mov         ds,ax 
4190    83 C3 0C                  add         bx,0x000c 
4193    C5 5C 04                  lds         bx,dword ptr 0x4[si] 
4196    89 46 3C                  mov         word ptr 0x3c[bp],ax 
4199    8B 47 02                  mov         ax,word ptr 0x2[bx] 
419C    8B 7F 04                  mov         di,word ptr 0x4[bx] 
419F    89 D3                     mov         bx,dx 
41A1    89 FA                     mov         dx,di 
41A3    9A 00 00 00 00            call        void far VgaGfx::draw( Drawable const far &, short, short ) 
41A8    8E 5E 3C                  mov         ds,word ptr 0x3c[bp] 
41AB    C5 5C 04                  lds         bx,dword ptr 0x4[si] 
41AE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
41B1    8B 57 04                  mov         dx,word ptr 0x4[bx] 
41B4    83 C6 04                  add         si,0x0004 
41B7    9A 00 00 00 00            call        void far VgaGfx::drawScreen() 
41BC    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
41BF    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
41C2    83 C3 5C                  add         bx,0x005c 
41C5    8C D1                     mov         cx,ss 
41C7    C5 37                     lds         si,dword ptr [bx] 
41C9    8D 5E DA                  lea         bx,-0x26[bp] 
41CC    8B 44 02                  mov         ax,word ptr 0x2[si] 
41CF    8B 54 04                  mov         dx,word ptr 0x4[si] 
41D2    9A 00 00 00 00            call        void far Physics::setEnemyDeath( tnd::vector<Rectangle far > const far & ) 
41D7    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
41DA    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
41DD    83 47 60 01               add         word ptr 0x60[bx],0x0001 
41E1    83 57 62 00               adc         word ptr 0x62[bx],0x0000 
41E5    9A 00 00 00 00            call        char unsigned far readJoystick() 
41EA    88 46 7A                  mov         byte ptr 0x7a[bp],al 
41ED    36 80 3E 00 00 00         cmp         byte ptr ss:char unsigned volatile far s_keyRight,0x00 
41F3    75 03                     jne         L$399 
41F5    E9 11 02                  jmp         L$414 
41F8                          L$399:
41F8    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
41FB    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
41FE    83 C3 5C                  add         bx,0x005c 
4201    B9 10 00                  mov         cx,0x0010 
4204    8B 47 08                  mov         ax,word ptr 0x8[bx] 
4207    C5 37                     lds         si,dword ptr [bx] 
4209    89 C3                     mov         bx,ax 
420B    8B 54 02                  mov         dx,word ptr 0x2[si] 
420E    8B 74 04                  mov         si,word ptr 0x4[si] 
4211    89 D0                     mov         ax,dx 
4213    89 F2                     mov         dx,si 
4215    9A 00 00 00 00            call        void far Physics::setActorSpeedX( int, short ) 
421A                          L$400:
421A    36 80 3E 00 00 00         cmp         byte ptr ss:char unsigned volatile far s_keyLeft,0x00 
4220    75 03                     jne         L$401 
4222    E9 EE 01                  jmp         L$416 
4225                          L$401:
4225    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4228    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
422B    B9 F0 FF                  mov         cx,0xfff0 
422E    89 DE                     mov         si,bx 
4230    8B 47 64                  mov         ax,word ptr 0x64[bx] 
4233    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
4236    83 C6 5C                  add         si,0x005c 
4239    8B 57 02                  mov         dx,word ptr 0x2[bx] 
423C    8B 77 04                  mov         si,word ptr 0x4[bx] 
423F    89 C3                     mov         bx,ax 
4241    89 D0                     mov         ax,dx 
4243    89 F2                     mov         dx,si 
4245    9A 00 00 00 00            call        void far Physics::setActorSpeedX( int, short ) 
424A                          L$402:
424A    36 80 3E 00 00 00         cmp         byte ptr ss:char unsigned volatile far s_keyAlt,0x00 
4250    75 03                     jne         L$403 
4252    E9 CA 01                  jmp         L$418 
4255                          L$403:
4255    B0 01                     mov         al,0x01 
4257                          L$404:
4257    88 46 7C                  mov         byte ptr 0x7c[bp],al 
425A    84 C0                     test        al,al 
425C    74 10                     je          L$405 
425E    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4261    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
4264    80 BF 80 00 00            cmp         byte ptr 0x80[bx],0x00 
4269    75 03                     jne         L$405 
426B    E9 D5 01                  jmp         L$421 
426E                          L$405:
426E    8A 46 7C                  mov         al,byte ptr 0x7c[bp] 
4271    84 C0                     test        al,al 
4273    74 02                     je          L$406 
4275    B0 01                     mov         al,0x01 
4277                          L$406:
4277    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
427A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
427D    88 87 80 00               mov         byte ptr 0x80[bx],al 
4281    80 7E 7C 00               cmp         byte ptr 0x7c[bp],0x00 
4285    74 1E                     je          L$407 
4287    80 BF 9A 00 00            cmp         byte ptr 0x9a[bx],0x00 
428C    76 17                     jbe         L$407 
428E    83 C3 5C                  add         bx,0x005c 
4291    8B 47 08                  mov         ax,word ptr 0x8[bx] 
4294    C5 37                     lds         si,dword ptr [bx] 
4296    89 C3                     mov         bx,ax 
4298    8B 4C 02                  mov         cx,word ptr 0x2[si] 
429B    8B 54 04                  mov         dx,word ptr 0x4[si] 
429E    89 C8                     mov         ax,cx 
42A0    9A 00 00 00 00            call        void far Physics::activateJetpack( int ) 
42A5                          L$407:
42A5    36 80 3E 00 00 00         cmp         byte ptr ss:char unsigned volatile far s_keyDown,0x00 
42AB    75 03                     jne         L$408 
42AD    E9 AB 01                  jmp         L$422 
42B0                          L$408:
42B0    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
42B3    8B 7E A0                  mov         di,word ptr -0x60[bp] 
42B6    8B 76 A0                  mov         si,word ptr -0x60[bp] 
42B9    8B 7D 64                  mov         di,word ptr 0x64[di] 
42BC    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
42BF    B9 01 00                  mov         cx,0x0001 
42C2    8B 47 02                  mov         ax,word ptr 0x2[bx] 
42C5    8B 57 04                  mov         dx,word ptr 0x4[bx] 
42C8    89 FB                     mov         bx,di 
42CA    83 C6 5C                  add         si,0x005c 
42CD                          L$409:
42CD    9A 00 00 00 00            call        void far Physics::setActorDuck( int, bool ) 
42D2    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
42D5    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
42D8    80 BF 9B 00 00            cmp         byte ptr 0x9b[bx],0x00 
42DD    76 2A                     jbe         L$411 
42DF    36 80 3E 00 00 00         cmp         byte ptr ss:char unsigned volatile far s_keyCtrl,0x00 
42E5    75 03                     jne         L$410 
42E7    E9 98 01                  jmp         L$424 
42EA                          L$410:
42EA    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
42ED    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
42F0    83 C3 5C                  add         bx,0x005c 
42F3    8B 47 08                  mov         ax,word ptr 0x8[bx] 
42F6    C5 37                     lds         si,dword ptr [bx] 
42F8    89 C3                     mov         bx,ax 
42FA    8B 54 02                  mov         dx,word ptr 0x2[si] 
42FD    8B 4C 04                  mov         cx,word ptr 0x4[si] 
4300    89 D0                     mov         ax,dx 
4302    89 CA                     mov         dx,cx 
4304    9A 00 00 00 00            call        void far Physics::activateSunPull( int ) 
4309                          L$411:
4309    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
430C    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
430F    B1 0F                     mov         cl,0x0f 
4311    8B 47 62                  mov         ax,word ptr 0x62[bx] 
4314    D3 F8                     sar         ax,cl 
4316    8B 5F 60                  mov         bx,word ptr 0x60[bx] 
4319    99                        cwd         
431A    31 C3                     xor         bx,ax 
431C    29 C3                     sub         bx,ax 
431E    83 E3 03                  and         bx,0x0003 
4321    31 C3                     xor         bx,ax 
4323    29 C3                     sub         bx,ax 
4325    89 D0                     mov         ax,dx 
4327    19 D0                     sbb         ax,dx 
4329    09 D8                     or          ax,bx 
432B    75 70                     jne         L$412 
432D    8B 76 A0                  mov         si,word ptr -0x60[bp] 
4330    C5 5C 0C                  lds         bx,dword ptr 0xc[si] 
4333    8B 47 02                  mov         ax,word ptr 0x2[bx] 
4336    8B 57 04                  mov         dx,word ptr 0x4[bx] 
4339    9A 00 00 00 00            call        void far Animation::nextFrame() 
433E    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4341    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
4344    83 C6 0C                  add         si,0x000c 
4347    C5 77 10                  lds         si,dword ptr 0x10[bx] 
434A    83 C3 10                  add         bx,0x0010 
434D    8B 44 02                  mov         ax,word ptr 0x2[si] 
4350    8B 54 04                  mov         dx,word ptr 0x4[si] 
4353    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
4356    9A 00 00 00 00            call        void far Animation::nextFrame() 
435B    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
435E    C5 77 14                  lds         si,dword ptr 0x14[bx] 
4361    83 C3 14                  add         bx,0x0014 
4364    8B 44 02                  mov         ax,word ptr 0x2[si] 
4367    8B 54 04                  mov         dx,word ptr 0x4[si] 
436A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
436D    9A 00 00 00 00            call        void far Animation::nextFrame() 
4372    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4375    C5 77 1C                  lds         si,dword ptr 0x1c[bx] 
4378    8B 44 02                  mov         ax,word ptr 0x2[si] 
437B    8B 54 04                  mov         dx,word ptr 0x4[si] 
437E    9A 00 00 00 00            call        void far Animation::nextFrame() 
4383    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4386    8B 76 A0                  mov         si,word ptr -0x60[bp] 
4389    83 C3 1C                  add         bx,0x001c 
438C    C5 5C 20                  lds         bx,dword ptr 0x20[si] 
438F    8B 47 02                  mov         ax,word ptr 0x2[bx] 
4392    8B 57 04                  mov         dx,word ptr 0x4[bx] 
4395    83 C6 20                  add         si,0x0020 
4398    9A 00 00 00 00            call        void far Animation::nextFrame() 
439D                          L$412:
439D    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
43A0    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
43A3    B1 0F                     mov         cl,0x0f 
43A5    8B 47 62                  mov         ax,word ptr 0x62[bx] 
43A8    D3 F8                     sar         ax,cl 
43AA    8B 5F 60                  mov         bx,word ptr 0x60[bx] 
43AD    99                        cwd         
43AE    89 D9                     mov         cx,bx 
43B0    89 D3                     mov         bx,dx 
43B2    31 C1                     xor         cx,ax 
43B4    29 C1                     sub         cx,ax 
43B6    83 E1 0F                  and         cx,0x000f 
43B9    31 C1                     xor         cx,ax 
43BB    29 C1                     sub         cx,ax 
43BD    89 C8                     mov         ax,cx 
43BF    19 D3                     sbb         bx,dx 
43C1    09 D8                     or          ax,bx 
43C3    74 68                     je          L$420 
43C5                          L$413:
43C5    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
43C8    8B 76 A0                  mov         si,word ptr -0x60[bp] 
43CB    C5 5C 5C                  lds         bx,dword ptr 0x5c[si] 
43CE    8B 47 02                  mov         ax,word ptr 0x2[bx] 
43D1    8B 57 04                  mov         dx,word ptr 0x4[bx] 
43D4    9A 00 00 00 00            call        void far Physics::calc() 
43D9    8B 46 DA                  mov         ax,word ptr -0x26[bp] 
43DC    8B 56 DC                  mov         dx,word ptr -0x24[bp] 
43DF    C7 46 AE 00 00            mov         word ptr -0x52[bp],0x0000 
43E4    9A 00 00 00 00            call        void far operator delete []( void far * ) 
43E9    8B 46 A2                  mov         ax,word ptr -0x5e[bp] 
43EC    83 C6 5C                  add         si,0x005c 
43EF    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
43F3    8B 46 A4                  mov         ax,word ptr -0x5c[bp] 
43F6    C7 46 AE 00 00            mov         word ptr -0x52[bp],0x0000 
43FB    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
43FF    8D A6 80 00               lea         sp,0x80[bp] 
4403    5D                        pop         bp 
4404    5F                        pop         di 
4405    5E                        pop         si 
4406    59                        pop         cx 
4407    5B                        pop         bx 
4408    CB                        retf        
4409                          L$414:
4409    A8 02                     test        al,0x02 
440B    74 03                     je          L$415 
440D    E9 E8 FD                  jmp         L$399 
4410                          L$415:
4410    E9 07 FE                  jmp         L$400 
4413                          L$416:
4413    F6 46 7A 01               test        byte ptr 0x7a[bp],0x01 
4417    74 03                     je          L$417 
4419    E9 09 FE                  jmp         L$401 
441C                          L$417:
441C    E9 2B FE                  jmp         L$402 
441F                          L$418:
441F    F6 46 7A 10               test        byte ptr 0x7a[bp],0x10 
4423    74 03                     je          L$419 
4425    E9 2D FE                  jmp         L$403 
4428                          L$419:
4428    30 C0                     xor         al,al 
442A    E9 2A FE                  jmp         L$404 
442D                          L$420:
442D    8B 76 A0                  mov         si,word ptr -0x60[bp] 
4430    C5 5C 18                  lds         bx,dword ptr 0x18[si] 
4433    8B 47 02                  mov         ax,word ptr 0x2[bx] 
4436    8B 57 04                  mov         dx,word ptr 0x4[bx] 
4439    83 C6 18                  add         si,0x0018 
443C    9A 00 00 00 00            call        void far Animation::nextFrame() 
4441    EB 82                     jmp         L$413 
4443                          L$421:
4443    83 C3 5C                  add         bx,0x005c 
4446    8B 4F 08                  mov         cx,word ptr 0x8[bx] 
4449    C5 37                     lds         si,dword ptr [bx] 
444B    89 CB                     mov         bx,cx 
444D    8B 44 02                  mov         ax,word ptr 0x2[si] 
4450    8B 54 04                  mov         dx,word ptr 0x4[si] 
4453    9A 00 00 00 00            call        void far Physics::startActorJump( int ) 
4458    E9 13 FE                  jmp         L$405 
445B                          L$422:
445B    F6 46 7A 08               test        byte ptr 0x7a[bp],0x08 
445F    74 03                     je          L$423 
4461    E9 4C FE                  jmp         L$408 
4464                          L$423:
4464    8E 5E 9E                  mov         ds,word ptr -0x62[bp] 
4467    8B 7E A0                  mov         di,word ptr -0x60[bp] 
446A    8B 5E A0                  mov         bx,word ptr -0x60[bp] 
446D    31 C9                     xor         cx,cx 
446F    83 C3 5C                  add         bx,0x005c 
4472    8B 7D 64                  mov         di,word ptr 0x64[di] 
4475    C5 37                     lds         si,dword ptr [bx] 
4477    89 FB                     mov         bx,di 
4479    8B 44 02                  mov         ax,word ptr 0x2[si] 
447C    8B 54 04                  mov         dx,word ptr 0x4[si] 
447F    E9 4B FE                  jmp         L$409 
4482                          L$424:
4482    F6 46 7A 20               test        byte ptr 0x7a[bp],0x20 
4486    74 03                     je          L$425 
4488    E9 5F FE                  jmp         L$410 
448B                          L$425:
448B    E9 7B FE                  jmp         L$411 
448E                          L$426:
448E    AE 44                                           DW	offset L$427
4490    B9 44                                           DW	offset L$429
4492    C4 44                                           DW	offset L$430
4494    CF 44                                           DW	offset L$431

Routine Size: 3374 bytes,    Routine Base: game_TEXT + 3768

4496                          void far Game::levelTransition( LevelTransition ):
4496    56                        push        si 
4497    89 C6                     mov         si,ax 
4499    8E DA                     mov         ds,dx 
449B    88 D8                     mov         al,bl 
449D    FE C8                     dec         al 
449F    3C 03                     cmp         al,0x03 
44A1    77 14                     ja          L$428 
44A3    30 E4                     xor         ah,ah 
44A5    89 C3                     mov         bx,ax 
44A7    D1 E3                     shl         bx,0x01 
44A9    2E FF A7 8E 44            jmp         word ptr cs:L$426[bx] 
44AE                          L$427:
44AE    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
44B1    89 44 6C                  mov         word ptr 0x6c[si],ax 
44B4    FE 44 6C                  inc         byte ptr 0x6c[si] 
44B7                          L$428:
44B7    5E                        pop         si 
44B8    CB                        retf        
44B9                          L$429:
44B9    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
44BC    89 44 6C                  mov         word ptr 0x6c[si],ax 
44BF    FE 4C 6C                  dec         byte ptr 0x6c[si] 
44C2    5E                        pop         si 
44C3    CB                        retf        
44C4                          L$430:
44C4    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
44C7    89 44 6C                  mov         word ptr 0x6c[si],ax 
44CA    FE 44 6D                  inc         byte ptr 0x6d[si] 
44CD    5E                        pop         si 
44CE    CB                        retf        
44CF                          L$431:
44CF    8B 44 6A                  mov         ax,word ptr 0x6a[si] 
44D2    89 44 6C                  mov         word ptr 0x6c[si],ax 
44D5    FE 4C 6D                  dec         byte ptr 0x6d[si] 
44D8    5E                        pop         si 
44D9    CB                        retf        

Routine Size: 68 bytes,    Routine Base: game_TEXT + 4496

No disassembly errors

Segment: CONST BYTE USE16 00000000 bytes

Segment: CONST2 WORD USE16 00000000 bytes

Segment: _DATA BYTE USE16 00000000 bytes

Segment: _BSS BYTE USE16 00000000 bytes

BSS Size: 0 bytes

Segment: game_DATA1 PARA USE16 0000099C bytes
0000                          L$432:
0000    00 00 00 00 00 00                               ......
0006    24 06 00 00                                     DD	L$456
000A    00 00 00 00                                     ....
000E    2E 06 00 00                                     DD	L$457
0012    00 00 00 00                                     ....
0016    38 06 00 00                                     DD	L$458
001A    00 00 00 00                                     ....
001E    90 09 00 00                                     DD	L$549
0022    00 00 00 00                                     ....
0026    42 06 00 00                                     DD	L$459
002A    00 00 00 00                                     ....
002E    4C 06 00 00                                     DD	L$460
0032    00 00 00 00                                     ....
0036    56 06 00 00                                     DD	L$461
003A    00 00 00 00                                     ....
003E    60 06 00 00                                     DD	L$462
0042    00 00 00 00                                     ....
0046    6A 06 00 00                                     DD	L$463
004A    00 00 00 00                                     ....
004E    74 06 00 00                                     DD	L$464
0052    00 00 00 00                                     ....
0056    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
005A    00 00 00 00                                     ....
005E    7E 06 00 00                                     DD	L$465
0062    00 00 00 00                                     ....
0066    88 06 00 00                                     DD	L$466
006A    00 00 00 00                                     ....
006E    92 06 00 00                                     DD	L$467
0072    00 00 00 00                                     ....
0076    9C 06 00 00                                     DD	L$468
007A    00 00 00 00                                     ....
007E    A6 06 00 00                                     DD	L$469
0082    00 00 00 00                                     ....
0086    B0 06 00 00                                     DD	L$470
008A    00 00 00 00                                     ....
008E    BA 06 00 00                                     DD	L$471
0092    00 00 00 00                                     ....
0096    C4 06 00 00                                     DD	L$472
009A    00 00 00 00                                     ....
009E    CE 06 00 00                                     DD	L$473
00A2    00 00 00 00                                     ....
00A6    D8 06 00 00                                     DD	L$474
00AA    00 00 00 00                                     ....
00AE    94 09 00 00                                     DD	L$550
00B2    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
00B6    2C 00 00 00                                     ,...
00BA    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
00BE    28 00 00 00 00 00 00 00                         (.......
00C6    E2 06 00 00                                     DD	L$475
00CA    00 00 00 00                                     ....
00CE    EC 06 00 00                                     DD	L$476
00D2    00 00 00 00                                     ....
00D6    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
00DA    00 00 00 00                                     ....
00DE    F6 06 00 00                                     DD	L$477
00E2    00 00 00 00                                     ....
00E6    00 07 00 00                                     DD	L$478
00EA    00 00 00 00                                     ....
00EE    0A 07 00 00                                     DD	L$479
00F2    00 00 00 00                                     ....
00F6    14 07 00 00                                     DD	L$480
00FA    00 00 00 00                                     ....
00FE    1E 07 00 00                                     DD	L$481
0102    00 00 00 00                                     DD	far TinyString::~TinyString()
0106    30 00 00 00 00 00 00 00                         0.......
010E    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0112    00 00 00 00                                     DD	far TinyString::~TinyString()
0116    34 00 00 00 00 00 00 00                         4.......
011E    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0122    00 00 00 00                                     DD	far GameState::~GameState()
0126    A0 FF 00 00                                     ....
012A    00 00 00 00                                     DD	far Text::~Text()
012E    BC FF 00 00 00 00 00 00                         ........
0136    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
013A    00 00 00 00                                     DD	far Text::~Text()
013E    CE FF 00 00                                     ....
0142                          L$433:
0142    00 00 00 00 00 00                               ......
0148    28 07 00 00                                     DD	L$482
014C    00 00 00 00                                     ....
0150    32 07 00 00                                     DD	L$483
0154    00 00 00 00                                     ....
0158    3C 07 00 00                                     DD	L$484
015C    00 00 00 00                                     ....
0160    46 07 00 00                                     DD	L$485
0164    00 00 00 00                                     ....
0168    50 07 00 00                                     DD	L$486
016C    00 00 00 00                                     ....
0170    5A 07 00 00                                     DD	L$487
0174    00 00 00 00                                     ....
0178    64 07 00 00                                     DD	L$488
017C    00 00 00 00                                     ....
0180    6E 07 00 00                                     DD	L$489
0184    00 00 00 00                                     ....
0188    78 07 00 00                                     DD	L$490
018C    00 00 00 00                                     ....
0190    82 07 00 00                                     DD	L$491
0194    00 00 00 00                                     ....
0198    8C 07 00 00                                     DD	L$492
019C    00 00 00 00                                     ....
01A0    96 07 00 00                                     DD	L$493
01A4    00 00 00 00                                     ....
01A8    A0 07 00 00                                     DD	L$494
01AC    00 00 00 00                                     ....
01B0    AA 07 00 00                                     DD	L$495
01B4    00 00 00 00                                     ....
01B8    B4 07 00 00                                     DD	L$496
01BC    00 00 00 00                                     ....
01C0    BE 07 00 00                                     DD	L$497
01C4    00 00 00 00                                     ....
01C8    C8 07 00 00                                     DD	L$498
01CC    00 00 00 00                                     ....
01D0    D2 07 00 00                                     DD	L$499
01D4    00 00 00 00                                     ....
01D8    DC 07 00 00                                     DD	L$500
01DC    00 00 00 00                                     ....
01E0    E6 07 00 00                                     DD	L$501
01E4    00 00 00 00                                     ....
01E8    F0 07 00 00                                     DD	L$502
01EC    00 00 00 00                                     ....
01F0    FA 07 00 00                                     DD	L$503
01F4    00 00 00 00                                     ....
01F8    04 08 00 00                                     DD	L$504
01FC    00 00 00 00                                     ....
0200    0E 08 00 00                                     DD	L$505
0204    00 00 00 00                                     ....
0208    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
020C    00 00 00 00                                     ....
0210    B8 08 00 00                                     DD	L$522
0214    00 00 00 00                                     ....
0218    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
021C    00 00 00 00                                     ....
0220    C0 08 00 00                                     DD	L$523
0224    00 00 00 00                                     ....
0228    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
022C    00 00 00 00                                     ....
0230    C8 08 00 00                                     DD	L$524
0234    00 00 00 00                                     ....
0238    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
023C    00 00 00 00                                     ....
0240    D0 08 00 00                                     DD	L$525
0244    00 00 00 00                                     ....
0248    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
024C    00 00 00 00                                     ....
0250    18 08 00 00                                     DD	L$506
0254    00 00 00 00                                     ....
0258    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
025C    00 00 00 00                                     ....
0260    22 08 00 00                                     DD	L$507
0264    00 00 00 00                                     ....
0268    D8 08 00 00                                     DD	L$526
026C    00 00 00 00                                     ....
0270    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0274    00 00 00 00                                     ....
0278    2C 08 00 00                                     DD	L$508
027C    00 00 00 00                                     ....
0280    E0 08 00 00                                     DD	L$527
0284    00 00 00 00                                     ....
0288    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
028C    00 00 00 00                                     ....
0290    36 08 00 00                                     DD	L$509
0294    00 00 00 00                                     ....
0298    E8 08 00 00                                     DD	L$528
029C                          L$434:
029C    00 00                                           ..
029E                          L$435:
029E    00 00                                           ..
02A0    00 00 00 00                                     DD	far TinyString::~TinyString()
02A4    DE 00 00 00 00 00 00 00                         ........
02AC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
02B0    00 00 00 00                                     DD	far TinyString::~TinyString()
02B4    DA 00 00 00                                     ....
02B8    00 00 00 00                                     DD	far TinyString::~TinyString()
02BC    F6 00 00 00 00 00 00 00                         ........
02C4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
02C8    00 00 00 00                                     DD	far TinyString::~TinyString()
02CC    F2 00 00 00 00 00 00 00                         ........
02D4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
02D8    00 00 00 00                                     DD	far Level::~Level()
02DC    86 FE 00 00 00 00 00 00                         ........
02E4    98 09 00 00                                     DD	L$551
02E8    00 00 00 00                                     DD	far tnd::shared_ptr<ImageBase far >::~shared_ptr()
02EC    D2 00 00 00 00 00 00 00                         ........
02F4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
02F8    00 00 00 00                                     ....
02FC    F0 08 00 00                                     DD	L$529
0300    00 00 00 00                                     ....
0304    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0308    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
030C    98 00 00 00 00 00 00 00                         ........
0314    F8 08 00 00                                     DD	L$530
0318    00 00 00 00                                     ....
031C    F4 05 00 00                                     DD	L$450
0320    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0324    02 01 00 00 00 00 00 00                         ........
032C    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0330    00 00 00 00                                     ....
0334    00 09 00 00                                     DD	L$531
0338    00 00 00 00                                     ....
033C    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0340    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
0344    40 00 00 00 00 00 00 00                         @.......
034C    08 09 00 00                                     DD	L$532
0350    00 00 00 00                                     ....
0354    FC 05 00 00                                     DD	L$451
0358    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
035C    FE 00 00 00 00 00 00 00                         ........
0364    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0368    00 00 00 00                                     ....
036C    10 09 00 00                                     DD	L$533
0370    00 00 00 00                                     ....
0374    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0378    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
037C    50 00 00 00 00 00 00 00                         P.......
0384    18 09 00 00                                     DD	L$534
0388    00 00 00 00                                     ....
038C    04 06 00 00                                     DD	L$452
0390    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0394    1E 01 00 00 00 00 00 00                         ........
039C    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
03A0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
03A4    10 00 00 00 00 00 00 00                         ........
03AC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
03B0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
03B4    90 00 00 00 00 00 00 00                         ........
03BC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
03C0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
03C4    58 00 00 00 00 00 00 00                         X.......
03CC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
03D0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
03D4    38 00 00 00 00 00 00 00                         8.......
03DC    20 09 00 00                                     DD	L$535
03E0    00 00 00 00                                     ....
03E4    0C 06 00 00                                     DD	L$453
03E8    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
03EC    B8 00 00 00                                     ....
03F0    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
03F4    D6 00 00 00 00 00 00 00                         ........
03FC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0400    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
0404    20 00 00 00 00 00 00 00                          .......
040C    28 09 00 00                                     DD	L$536
0410    00 00 00 00                                     ....
0414    14 06 00 00                                     DD	L$454
0418    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
041C    80 00 00 00                                     ....
0420    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0424    CA 00 00 00 00 00 00 00                         ........
042C    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0430    00 00 00 00                                     ....
0434    30 09 00 00                                     DD	L$537
0438    00 00 00 00                                     ....
043C    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0440    00 00 00 00                                     ....
0444    38 09 00 00                                     DD	L$538
0448    00 00 00 00                                     ....
044C    1C 06 00 00                                     DD	L$455
0450    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
0454    E2 00 00 00                                     ....
0458    00 00 00 00                                     DD	far tnd::shared_ptr<PhysicsCallback far >::~shared_ptr()
045C    C6 00 00 00                                     ....
0460    00 00 00 00                                     DD	far tnd::shared_ptr<Physics far >::~shared_ptr()
0464    E6 00 00 00 00 00 00 00                         ........
046C    40 09 00 00                                     DD	L$539
0470    00 00 00 00                                     ....
0474    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0478    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
047C    48 00 00 00                                     H...
0480    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
0484    78 00 00 00                                     x...
0488    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
048C    30 00 00 00 00 00 00 00                         0.......
0494    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
0498    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
049C    70 00 00 00 00 00 00 00                         p.......
04A4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
04A8    00 00 00 00                                     DD	far tnd::vector<Button far >::~vector()
04AC    A8 00 00 00 00 00 00 00                         ........
04B4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
04B8    00 00 00 00                                     DD	far tnd::vector<MessageBox far >::~vector()
04BC    28 00 00 00                                     (...
04C0    00 00 00 00                                     DD	far TinyString::~TinyString()
04C4    0E 01 00 00                                     ....
04C8    00 00 00 00                                     DD	far Text::~Text()
04CC    CC FF 00 00 00 00 00 00                         ........
04D4    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
04D8    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
04DC    60 00 00 00                                     `...
04E0    00 00 00 00                                     DD	far Text::~Text()
04E4    BA FF 00 00 00 00 00 00                         ........
04EC    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
04F0    00 00 00 00                                     DD	far TinyString::~TinyString()
04F4    EE 00 00 00                                     ....
04F8    00 00 00 00                                     DD	far Text::~Text()
04FC    DE FF 00 00                                     ....
0500    00 00 00 00                                     DD	far GameState::~GameState()
0504    26 FF 00 00                                     &...
0508                          L$436:
0508    00 00                                           ..
050A    00 00 00 00                                     DD	far Text::~Text()
050E    DE FF 00 00                                     ....
0512                          L$437:
0512    00 00                                           ..
0514    00 00 00 00                                     DD	far Text::~Text()
0518    DE FF 00 00                                     ....
051C                          L$438:
051C    00 00                                           ..
051E    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
0522    38 00 00 00                                     8...
0526    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
052A    10 00 00 00                                     ....
052E                          L$439:
052E    00 00 00 00 00 00                               ......
0534    40 08 00 00                                     DD	L$510
0538    00 00 00 00                                     ....
053C    4A 08 00 00                                     DD	L$511
0540    00 00 00 00                                     ....
0544    54 08 00 00                                     DD	L$512
0548    00 00 00 00                                     ....
054C    5E 08 00 00                                     DD	L$513
0550    00 00 00 00                                     ....
0554    68 08 00 00                                     DD	L$514
0558    00 00 00 00                                     ....
055C    72 08 00 00                                     DD	L$515
0560                          L$440:
0560    00 00 00 00 00 00                               ......
0566    7C 08 00 00                                     DD	L$516
056A    00 00 00 00                                     ....
056E    86 08 00 00                                     DD	L$517
0572    00 00 00 00                                     ....
0576    00 00 00 00                                     DD	char unsigned const far __stattabcmd[]
057A    00 00 00 00                                     ....
057E    48 09 00 00                                     DD	L$540
0582                          L$441:
0582    00 00 00 00 00 00                               ......
0588    50 09 00 00                                     DD	L$541
058C                          L$442:
058C    00 00 00 00 00 00                               ......
0592    58 09 00 00                                     DD	L$542
0596                          L$443:
0596    00 00 00 00 00 00                               ......
059C    60 09 00 00                                     DD	L$543
05A0                          L$444:
05A0    00 00 00 00 00 00                               ......
05A6    68 09 00 00                                     DD	L$544
05AA                          L$445:
05AA    00 00 00 00 00 00                               ......
05B0    70 09 00 00                                     DD	L$545
05B4                          L$446:
05B4    00 00 00 00 00 00                               ......
05BA    90 08 00 00                                     DD	L$518
05BE    00 00 00 00                                     ....
05C2    78 09 00 00                                     DD	L$546
05C6                          L$447:
05C6    00 00 00 00 00 00                               ......
05CC    9A 08 00 00                                     DD	L$519
05D0    00 00 00 00                                     ....
05D4    80 09 00 00                                     DD	L$547
05D8                          L$448:
05D8    00 00 00 00 00 00                               ......
05DE    A4 08 00 00                                     DD	L$520
05E2    00 00 00 00                                     ....
05E6    88 09 00 00                                     DD	L$548
05EA                          L$449:
05EA    00 00 00 00 00 00                               ......
05F0    AE 08 00 00                                     DD	L$521
05F4                          L$450:
05F4    05 00 01 00 0F 00 0E 00                         ........
05FC                          L$451:
05FC    05 00 01 00 16 00 15 00                         ........
0604                          L$452:
0604    05 00 01 00 1D 00 1C 00                         ........
060C                          L$453:
060C    05 00 01 00 28 00 27 00                         ....(.'.
0614                          L$454:
0614    05 00 01 00 2E 00 2D 00                         ......-.
061C                          L$455:
061C    05 00 01 00 35 00 1C 00                         ....5...
0624                          L$456:
0624    08 00 1C 00 04 00                               ......
062A    00 00 00 00                                     DD	L$660
062E                          L$457:
062E    08 00 1C 00 08 00                               ......
0634    00 00 00 00                                     DD	far tnd::shared_ptr<ImageBase far >::~shared_ptr()
0638                          L$458:
0638    08 00 1C 00 0C 00                               ......
063E    00 00 00 00                                     DD	L$572
0642                          L$459:
0642    07 00 10 00 00 00                               ......
0648    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
064C                          L$460:
064C    07 00 10 00 04 00                               ......
0652    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0656                          L$461:
0656    07 00 10 00 08 00                               ......
065C    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0660                          L$462:
0660    07 00 10 00 0C 00                               ......
0666    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
066A                          L$463:
066A    07 00 10 00 10 00                               ......
0670    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0674                          L$464:
0674    07 00 10 00 14 00                               ......
067A    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
067E                          L$465:
067E    08 00 1C 00 24 00                               ....$.
0684    00 00 00 00                                     DD	L$626
0688                          L$466:
0688    08 00 1C 00 2C 00                               ....,.
068E    00 00 00 00                                     DD	L$627
0692                          L$467:
0692    08 00 1C 00 34 00                               ....4.
0698    00 00 00 00                                     DD	L$628
069C                          L$468:
069C    08 00 1C 00 3C 00                               ....<.
06A2    00 00 00 00                                     DD	L$629
06A6                          L$469:
06A6    08 00 1C 00 44 00                               ....D.
06AC    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
06B0                          L$470:
06B0    08 00 1C 00 4C 00                               ....L.
06B6    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
06BA                          L$471:
06BA    08 00 1C 00 54 00                               ....T.
06C0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
06C4                          L$472:
06C4    08 00 1C 00 5C 00                               ....\.
06CA    00 00 00 00                                     DD	far tnd::shared_ptr<Physics far >::~shared_ptr()
06CE                          L$473:
06CE    08 00 1C 00 66 00                               ....f.
06D4    00 00 00 00                                     DD	far TinyString::~TinyString()
06D8                          L$474:
06D8    08 00 1C 00 6E 00                               ....n.
06DE    00 00 00 00                                     DD	L$608
06E2                          L$475:
06E2    08 00 10 00 00 00                               ......
06E8    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
06EC                          L$476:
06EC    08 00 10 00 0E 00                               ......
06F2    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
06F6                          L$477:
06F6    08 00 1C 00 82 00                               ......
06FC    00 00 00 00                                     DD	L$630
0700                          L$478:
0700    08 00 1C 00 8A 00                               ......
0706    00 00 00 00                                     DD	far TinyString::~TinyString()
070A                          L$479:
070A    08 00 1C 00 8E 00                               ......
0710    00 00 00 00                                     DD	far TinyString::~TinyString()
0714                          L$480:
0714    08 00 1C 00 92 00                               ......
071A    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
071E                          L$481:
071E    08 00 1C 00 96 00                               ......
0724    00 00 00 00                                     DD	L$666
0728                          L$482:
0728    08 00 1A 00 04 00                               ......
072E    00 00 00 00                                     DD	L$660
0732                          L$483:
0732    08 00 1A 00 08 00                               ......
0738    00 00 00 00                                     DD	far tnd::shared_ptr<ImageBase far >::~shared_ptr()
073C                          L$484:
073C    08 00 1A 00 0C 00                               ......
0742    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0746                          L$485:
0746    08 00 1A 00 10 00                               ......
074C    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0750                          L$486:
0750    08 00 1A 00 14 00                               ......
0756    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
075A                          L$487:
075A    08 00 1A 00 18 00                               ......
0760    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0764                          L$488:
0764    08 00 1A 00 1C 00                               ......
076A    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
076E                          L$489:
076E    08 00 1A 00 20 00                               .... .
0774    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0778                          L$490:
0778    08 00 1A 00 24 00                               ....$.
077E    00 00 00 00                                     DD	L$692
0782                          L$491:
0782    08 00 1A 00 2C 00                               ....,.
0788    00 00 00 00                                     DD	L$697
078C                          L$492:
078C    08 00 1A 00 34 00                               ....4.
0792    00 00 00 00                                     DD	L$702
0796                          L$493:
0796    08 00 1A 00 3C 00                               ....<.
079C    00 00 00 00                                     DD	L$707
07A0                          L$494:
07A0    08 00 1A 00 44 00                               ....D.
07A6    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
07AA                          L$495:
07AA    08 00 1A 00 4C 00                               ....L.
07B0    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
07B4                          L$496:
07B4    08 00 1A 00 54 00                               ....T.
07BA    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
07BE                          L$497:
07BE    08 00 1A 00 5C 00                               ....\.
07C4    00 00 00 00                                     DD	far tnd::shared_ptr<Physics far >::~shared_ptr()
07C8                          L$498:
07C8    08 00 1A 00 66 00                               ....f.
07CE    00 00 00 00                                     DD	far TinyString::~TinyString()
07D2                          L$499:
07D2    08 00 1A 00 6E 00                               ....n.
07D8    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
07DC                          L$500:
07DC    08 00 1A 00 7C 00                               ....|.
07E2    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
07E6                          L$501:
07E6    08 00 1A 00 82 00                               ......
07EC    00 00 00 00                                     DD	L$630
07F0                          L$502:
07F0    08 00 1A 00 8A 00                               ......
07F6    00 00 00 00                                     DD	far TinyString::~TinyString()
07FA                          L$503:
07FA    08 00 1A 00 8E 00                               ......
0800    00 00 00 00                                     DD	far TinyString::~TinyString()
0804                          L$504:
0804    08 00 1A 00 92 00                               ......
080A    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
080E                          L$505:
080E    08 00 1A 00 96 00                               ......
0814    00 00 00 00                                     DD	L$666
0818                          L$506:
0818    08 00 0E 00 00 00                               ......
081E    00 00 00 00                                     DD	L$629
0822                          L$507:
0822    08 00 0E 00 00 00                               ......
0828    00 00 00 00                                     DD	L$628
082C                          L$508:
082C    08 00 0E 00 00 00                               ......
0832    00 00 00 00                                     DD	L$627
0836                          L$509:
0836    08 00 0E 00 00 00                               ......
083C    00 00 00 00                                     DD	L$626
0840                          L$510:
0840    08 00 0E 00 00 00                               ......
0846    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
084A                          L$511:
084A    08 00 0E 00 04 00                               ......
0850    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0854                          L$512:
0854    08 00 0E 00 08 00                               ......
085A    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
085E                          L$513:
085E    08 00 0E 00 0C 00                               ......
0864    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0868                          L$514:
0868    08 00 0E 00 10 00                               ......
086E    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0872                          L$515:
0872    08 00 0E 00 14 00                               ......
0878    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
087C                          L$516:
087C    08 00 0E 00 00 00                               ......
0882    00 00 00 00                                     DD	far tnd::shared_ptr<Animation far >::~shared_ptr()
0886                          L$517:
0886    08 00 0E 00 0E 00                               ......
088C    00 00 00 00                                     DD	far tnd::shared_ptr<SoundController far >::~shared_ptr()
0890                          L$518:
0890    08 00 0E 00 00 00                               ......
0896    00 00 00 00                                     DD	L$626
089A                          L$519:
089A    08 00 0E 00 00 00                               ......
08A0    00 00 00 00                                     DD	L$627
08A4                          L$520:
08A4    08 00 0E 00 00 00                               ......
08AA    00 00 00 00                                     DD	L$628
08AE                          L$521:
08AE    08 00 0E 00 00 00                               ......
08B4    00 00 00 00                                     DD	L$629
08B8                          L$522:
08B8    0A 00 D8 FF                                     ....
08BC    00 00 00 00                                     DD	void far operator delete( void far * )
08C0                          L$523:
08C0    0A 00 EC FF                                     ....
08C4    00 00 00 00                                     DD	void far operator delete( void far * )
08C8                          L$524:
08C8    0A 00 74 FF                                     ..t.
08CC    00 00 00 00                                     DD	void far operator delete( void far * )
08D0                          L$525:
08D0    0A 00 C4 FF                                     ....
08D4    00 00 00 00                                     DD	void far operator delete( void far * )
08D8                          L$526:
08D8    0A 00 9C FF                                     ....
08DC    00 00 00 00                                     DD	void far operator delete( void far * )
08E0                          L$527:
08E0    0A 00 88 FF                                     ....
08E4    00 00 00 00                                     DD	void far operator delete( void far * )
08E8                          L$528:
08E8    0A 00 B0 FF                                     ....
08EC    00 00 00 00                                     DD	void far operator delete( void far * )
08F0                          L$529:
08F0    0A 00 42 FF                                     ..B.
08F4    00 00 00 00                                     DD	void far operator delete( void far * )
08F8                          L$530:
08F8    0A 00 0A 01                                     ....
08FC    00 00 00 00                                     DD	void far operator delete( void far * )
0900                          L$531:
0900    0A 00 7E FF                                     ..~.
0904    00 00 00 00                                     DD	void far operator delete( void far * )
0908                          L$532:
0908    0A 00 0A 01                                     ....
090C    00 00 00 00                                     DD	void far operator delete( void far * )
0910                          L$533:
0910    0A 00 92 FF                                     ....
0914    00 00 00 00                                     DD	void far operator delete( void far * )
0918                          L$534:
0918    0A 00 0A 01                                     ....
091C    00 00 00 00                                     DD	void far operator delete( void far * )
0920                          L$535:
0920    0A 00 0A 01                                     ....
0924    00 00 00 00                                     DD	void far operator delete( void far * )
0928                          L$536:
0928    0A 00 0A 01                                     ....
092C    00 00 00 00                                     DD	void far operator delete( void far * )
0930                          L$537:
0930    0A 00 56 FF                                     ..V.
0934    00 00 00 00                                     DD	void far operator delete( void far * )
0938                          L$538:
0938    0A 00 0A 01                                     ....
093C    00 00 00 00                                     DD	void far operator delete( void far * )
0940                          L$539:
0940    0A 00 A6 FF                                     ....
0944    00 00 00 00                                     DD	void far operator delete( void far * )
0948                          L$540:
0948    0A 00 EC FF                                     ....
094C    00 00 00 00                                     DD	void far operator delete( void far * )
0950                          L$541:
0950    0A 00 EC FF                                     ....
0954    00 00 00 00                                     DD	void far operator delete( void far * )
0958                          L$542:
0958    0A 00 EC FF                                     ....
095C    00 00 00 00                                     DD	void far operator delete( void far * )
0960                          L$543:
0960    0A 00 EC FF                                     ....
0964    00 00 00 00                                     DD	void far operator delete( void far * )
0968                          L$544:
0968    0A 00 EC FF                                     ....
096C    00 00 00 00                                     DD	void far operator delete( void far * )
0970                          L$545:
0970    0A FF EC FF                                     ....
0974    00 00 00 00                                     DD	void far operator delete( void far * )
0978                          L$546:
0978    0A FF EC FF                                     ....
097C    00 00 00 00                                     DD	void far operator delete( void far * )
0980                          L$547:
0980    0A 00 EC FF                                     ....
0984    00 00 00 00                                     DD	void far operator delete( void far * )
0988                          L$548:
0988    0A 00 EC FF                                     ....
098C    00 00 00 00                                     DD	void far operator delete( void far * )
0990                          L$549:
0990    0E 00 00 00                                     ....
0994                          L$550:
0994    0E 00 00 00                                     ....
0998                          L$551:
0998    0E 00 00 00                                     ....

Comdat: far Point::Point() SEGMENT ANY 'game_TEXT' 00000010 bytes
0000                          far Point::Point():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 07 00 00               mov         word ptr [bx],0x0000 
0009    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
000E    5B                        pop         bx 
000F    CB                        retf        

Routine Size: 16 bytes,    Routine Base: W?$ct:Point$f()_ + 0000

No disassembly errors

Comdat: far Rectangle::Rectangle() SEGMENT ANY 'game_TEXT' 0000001A bytes
0000                          L$552:
0000                          far Rectangle::Rectangle():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 07 00 00               mov         word ptr [bx],0x0000 
0009    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
000E    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0013    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
0018    5B                        pop         bx 
0019    CB                        retf        

Routine Size: 26 bytes,    Routine Base: W?$ct:Rectangle$f()_ + 0000

No disassembly errors

Comdat: far Rectangle::Rectangle( Rectangle const far & ) SEGMENT ANY 'game_TEXT' 00000026 bytes
0000                          L$553:
0000                          far Rectangle::Rectangle( Rectangle const far & ):
0000    56                        push        si 
0001    89 C6                     mov         si,ax 
0003    8E DA                     mov         ds,dx 
0005    8E C1                     mov         es,cx 
0007    26 8B 07                  mov         ax,word ptr es:[bx] 
000A    89 04                     mov         word ptr [si],ax 
000C    26 8B 47 02               mov         ax,word ptr es:0x2[bx] 
0010    89 44 02                  mov         word ptr 0x2[si],ax 
0013    26 8B 47 04               mov         ax,word ptr es:0x4[bx] 
0017    89 44 04                  mov         word ptr 0x4[si],ax 
001A    26 8B 47 06               mov         ax,word ptr es:0x6[bx] 
001E    89 44 06                  mov         word ptr 0x6[si],ax 
0021    89 F0                     mov         ax,si 
0023    5E                        pop         si 
0024    CB                        retf        
0025    FC                        cld         

Routine Size: 38 bytes,    Routine Base: W?$ct:Rectangle$f(rfx$0$)_ + 0000

No disassembly errors

Comdat: far Button::Button() SEGMENT ANY 'game_TEXT' 0000001A bytes
0000                          L$554:
0000                          far Button::Button():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 07 00 00               mov         word ptr [bx],0x0000 
0009    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
000E    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0013    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
0018    5B                        pop         bx 
0019    CB                        retf        

Routine Size: 26 bytes,    Routine Base: W?$ct:Button$f()_ + 0000

No disassembly errors

Comdat: far MessageBox::MessageBox() SEGMENT ANY 'game_TEXT' 00000020 bytes
0000                          L$555:
0000                          far MessageBox::MessageBox():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 07 00 00               mov         word ptr [bx],0x0000 
0009    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
000E    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
0013    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
0018    C7 47 08 00 00            mov         word ptr 0x8[bx],0x0000 
001D    5B                        pop         bx 
001E    CB                        retf        
001F    FC                        cld         

Routine Size: 32 bytes,    Routine Base: W?$ct:MessageBox$f()_ + 0000

No disassembly errors

Comdat: far GameState::GameState() SEGMENT ANY 'game_TEXT' 00000052 bytes
0000                          L$556:
0000                          far GameState::GameState():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    83 C3 02                  add         bx,0x0002 
0008    C7 07 00 00               mov         word ptr [bx],0x0000 
000C    83 C3 04                  add         bx,0x0004 
000F    C7 47 FE 00 00            mov         word ptr -0x2[bx],0x0000 
0014    C7 07 00 00               mov         word ptr [bx],0x0000 
0018    83 EB 06                  sub         bx,0x0006 
001B    C7 47 0A 00 00            mov         word ptr 0xa[bx],0x0000 
0020    C7 47 0C 00 00            mov         word ptr 0xc[bx],0x0000 
0025    C7 47 08 00 00            mov         word ptr 0x8[bx],0x0000 
002A    C7 47 0E 00 00            mov         word ptr 0xe[bx],0x0000 
002F    C6 47 10 00               mov         byte ptr 0x10[bx],0x00 
0033    C7 47 14 00 00            mov         word ptr 0x14[bx],0x0000 
0038    C7 47 16 00 00            mov         word ptr 0x16[bx],0x0000 
003D    C7 47 18 00 00            mov         word ptr 0x18[bx],0x0000 
0042    C7 47 1A 00 00            mov         word ptr 0x1a[bx],0x0000 
0047    C6 47 01 00               mov         byte ptr 0x1[bx],0x00 
004B    89 D8                     mov         ax,bx 
004D    C6 07 00                  mov         byte ptr [bx],0x00 
0050    5B                        pop         bx 
0051    CB                        retf        

Routine Size: 82 bytes,    Routine Base: W?$ct:GameState$f()_ + 0000

No disassembly errors

Segment: game_DATA2 BYTE USE16 0000005F bytes
0000                          L$557:
0000    67 61 6D 65 2E 73 61 76 00                      game.sav.
0009                          L$558:
0009    72 62 00                                        rb.
000C                          L$559:
000C    2E 6D 61 70 00                                  .map.
0011                          L$560:
0011    62 31 2E 6D 61 70 00                            b1.map.
0018                          L$561:
0018    4C 6F 6F 70 52 00                               LoopR.
001E                          L$562:
001E    67 61 6D 65 2E 73 61 76 00                      game.sav.
0027                          L$563:
0027    57 61 6C 6B 52 00                               WalkR.
002D                          L$564:
002D    57 61 6C 6B 4C 00                               WalkL.
0033                          L$565:
0033    53 74 61 6E 64 52 00                            StandR.
003A                          L$566:
003A    53 74 61 6E 64 4C 00                            StandL.
0041                          L$567:
0041    4A 75 6D 70 52 4A 65 74 00                      JumpRJet.
004A                          L$568:
004A    4A 75 6D 70 52 00                               JumpR.
0050                          L$569:
0050    4A 75 6D 70 4C 4A 65 74 00                      JumpLJet.
0059                          L$570:
0059    4A 75 6D 70 4C 00                               JumpL.

Comdat: far GameState::~GameState() SEGMENT ANY 'game_TEXT' 0000001E bytes
0000                          far GameState::~GameState():
0000    56                        push        si 
0001    89 D3                     mov         bx,dx 
0003    8E DA                     mov         ds,dx 
0005    89 C6                     mov         si,ax 
0007    8B 44 06                  mov         ax,word ptr 0x6[si] 
000A    8B 54 08                  mov         dx,word ptr 0x8[si] 
000D    83 C6 06                  add         si,0x0006 
0010    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0015    89 F0                     mov         ax,si 
0017    89 DA                     mov         dx,bx 
0019    2D 06 00                  sub         ax,0x0006 
001C    5E                        pop         si 
001D    CB                        retf        

Routine Size: 30 bytes,    Routine Base: W?$dt:GameState$f()_ + 0000

No disassembly errors

Comdat: far CollectedGuffin::CollectedGuffin() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$571:
0000                          far CollectedGuffin::CollectedGuffin():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    83 C3 02                  add         bx,0x0002 
0008    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
000D    89 D8                     mov         ax,bx 
000F    C7 07 00 00               mov         word ptr [bx],0x0000 
0013    2D 02 00                  sub         ax,0x0002 
0016    5B                        pop         bx 
0017    CB                        retf        

Routine Size: 24 bytes,    Routine Base: W?$ct:CollectedGuffin$f()_ + 0000

No disassembly errors

Comdat: far GameAnimations::~GameAnimations() SEGMENT ANY 'game_TEXT' 0000028E bytes
0000                          L$572:
0000                          far GameAnimations::~GameAnimations():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 3E                  sub         sp,0x003e 
0009    89 C1                     mov         cx,ax 
000B    C7 46 C6 00 00            mov         word ptr -0x3a[bp],offset __wcpp_4_fs_handler_rtn__ 
0010    C7 46 C8 00 00            mov         word ptr -0x38[bp],seg __wcpp_4_fs_handler_rtn__ 
0015    C7 46 CA 2E 05            mov         word ptr -0x36[bp],offset L$439 
001A    C7 46 CC 00 00            mov         word ptr -0x34[bp],game_DATA1 
001F    C7 46 CE 05 00            mov         word ptr -0x32[bp],0x0005 
0024    89 46 D0                  mov         word ptr -0x30[bp],ax 
0027    89 56 D2                  mov         word ptr -0x2e[bp],dx 
002A    88 5E D4                  mov         byte ptr -0x2c[bp],bl 
002D    89 56 F6                  mov         word ptr -0xa[bp],dx 
0030    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0034    8D 5E C2                  lea         bx,-0x3e[bp] 
0037    89 46 C2                  mov         word ptr -0x3e[bp],ax 
003A    36 89 1E 00 00            mov         word ptr ss:__wint_thread_data,bx 
003F    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0043    89 CB                     mov         bx,cx 
0045    89 46 C4                  mov         word ptr -0x3c[bp],ax 
0048    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
004D    83 C3 14                  add         bx,0x0014 
0050    89 D1                     mov         cx,dx 
0052    8E DA                     mov         ds,dx 
0054    89 5E E0                  mov         word ptr -0x20[bp],bx 
0057    89 5E F2                  mov         word ptr -0xe[bp],bx 
005A    8B 47 02                  mov         ax,word ptr 0x2[bx] 
005D    8B 17                     mov         dx,word ptr [bx] 
005F    85 C0                     test        ax,ax 
0061    75 04                     jne         L$573 
0063    85 D2                     test        dx,dx 
0065    74 35                     je          L$577 
0067                          L$573:
0067    89 D6                     mov         si,dx 
0069    8E D8                     mov         ds,ax 
006B    83 3C 01                  cmp         word ptr [si],0x0001 
006E    74 03                     je          L$574 
0070    E9 FD 01                  jmp         L$602 
0073                          L$574:
0073    8B 54 04                  mov         dx,word ptr 0x4[si] 
0076    8B 7C 02                  mov         di,word ptr 0x2[si] 
0079    85 D2                     test        dx,dx 
007B    75 04                     jne         L$575 
007D    85 FF                     test        di,di 
007F    74 0B                     je          L$576 
0081                          L$575:
0081    8E DA                     mov         ds,dx 
0083    BB 02 00                  mov         bx,0x0002 
0086    C5 35                     lds         si,dword ptr [di] 
0088    89 F8                     mov         ax,di 
008A    FF 1C                     call        dword ptr [si] 
008C                          L$576:
008C    8E 5E F6                  mov         ds,word ptr -0xa[bp] 
008F    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
0092    8B 07                     mov         ax,word ptr [bx] 
0094    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0097    9A 00 00 00 00            call        void far operator delete( void far * ) 
009C                          L$577:
009C    B8 04 00                  mov         ax,0x0004 
009F    8B 5E E0                  mov         bx,word ptr -0x20[bp] 
00A2    8E D9                     mov         ds,cx 
00A4    89 4E FE                  mov         word ptr -0x2[bp],cx 
00A7    29 C3                     sub         bx,ax 
00A9    89 46 CE                  mov         word ptr -0x32[bp],ax 
00AC    89 5E E4                  mov         word ptr -0x1c[bp],bx 
00AF    89 5E EC                  mov         word ptr -0x14[bp],bx 
00B2    8B 57 02                  mov         dx,word ptr 0x2[bx] 
00B5    8B 07                     mov         ax,word ptr [bx] 
00B7    85 D2                     test        dx,dx 
00B9    75 04                     jne         L$578 
00BB    85 C0                     test        ax,ax 
00BD    74 34                     je          L$582 
00BF                          L$578:
00BF    89 C6                     mov         si,ax 
00C1    8E DA                     mov         ds,dx 
00C3    83 3C 01                  cmp         word ptr [si],0x0001 
00C6    74 03                     je          L$579 
00C8    E9 AA 01                  jmp         L$603 
00CB                          L$579:
00CB    8B 54 04                  mov         dx,word ptr 0x4[si] 
00CE    8B 7C 02                  mov         di,word ptr 0x2[si] 
00D1    85 D2                     test        dx,dx 
00D3    75 04                     jne         L$580 
00D5    85 FF                     test        di,di 
00D7    74 0B                     je          L$581 
00D9                          L$580:
00D9    8E DA                     mov         ds,dx 
00DB    BB 02 00                  mov         bx,0x0002 
00DE    C5 35                     lds         si,dword ptr [di] 
00E0    89 F8                     mov         ax,di 
00E2    FF 1C                     call        dword ptr [si] 
00E4                          L$581:
00E4    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
00E7    8E D9                     mov         ds,cx 
00E9    8B 07                     mov         ax,word ptr [bx] 
00EB    8B 57 02                  mov         dx,word ptr 0x2[bx] 
00EE    9A 00 00 00 00            call        void far operator delete( void far * ) 
00F3                          L$582:
00F3    C7 46 CE 03 00            mov         word ptr -0x32[bp],0x0003 
00F8    8B 5E E4                  mov         bx,word ptr -0x1c[bp] 
00FB    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00FE    83 EB 04                  sub         bx,0x0004 
0101    8C 5E FA                  mov         word ptr -0x6[bp],ds 
0104    8C 5E F8                  mov         word ptr -0x8[bp],ds 
0107    8B 17                     mov         dx,word ptr [bx] 
0109    8B 47 02                  mov         ax,word ptr 0x2[bx] 
010C    89 D9                     mov         cx,bx 
010E    89 5E F4                  mov         word ptr -0xc[bp],bx 
0111    85 C0                     test        ax,ax 
0113    75 04                     jne         L$583 
0115    85 D2                     test        dx,dx 
0117    74 35                     je          L$587 
0119                          L$583:
0119    89 D6                     mov         si,dx 
011B    8E D8                     mov         ds,ax 
011D    83 3C 01                  cmp         word ptr [si],0x0001 
0120    74 03                     je          L$584 
0122    E9 55 01                  jmp         L$604 
0125                          L$584:
0125    8B 54 04                  mov         dx,word ptr 0x4[si] 
0128    8B 7C 02                  mov         di,word ptr 0x2[si] 
012B    85 D2                     test        dx,dx 
012D    75 04                     jne         L$585 
012F    85 FF                     test        di,di 
0131    74 0B                     je          L$586 
0133                          L$585:
0133    8E DA                     mov         ds,dx 
0135    BB 02 00                  mov         bx,0x0002 
0138    C5 35                     lds         si,dword ptr [di] 
013A    89 F8                     mov         ax,di 
013C    FF 1C                     call        dword ptr [si] 
013E                          L$586:
013E    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
0141    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
0144    8B 07                     mov         ax,word ptr [bx] 
0146    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0149    9A 00 00 00 00            call        void far operator delete( void far * ) 
014E                          L$587:
014E    C7 46 CE 02 00            mov         word ptr -0x32[bp],0x0002 
0153    89 CB                     mov         bx,cx 
0155    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
0158    83 EB 04                  sub         bx,0x0004 
015B    8C D9                     mov         cx,ds 
015D    8C 5E F0                  mov         word ptr -0x10[bp],ds 
0160    8B 07                     mov         ax,word ptr [bx] 
0162    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0165    89 5E DC                  mov         word ptr -0x24[bp],bx 
0168    89 5E EE                  mov         word ptr -0x12[bp],bx 
016B    85 D2                     test        dx,dx 
016D    75 04                     jne         L$588 
016F    85 C0                     test        ax,ax 
0171    74 32                     je          L$592 
0173                          L$588:
0173    89 C6                     mov         si,ax 
0175    8E DA                     mov         ds,dx 
0177    83 3C 01                  cmp         word ptr [si],0x0001 
017A    74 03                     je          L$589 
017C    E9 00 01                  jmp         L$605 
017F                          L$589:
017F    8B 54 04                  mov         dx,word ptr 0x4[si] 
0182    8B 7C 02                  mov         di,word ptr 0x2[si] 
0185    85 D2                     test        dx,dx 
0187    75 04                     jne         L$590 
0189    85 FF                     test        di,di 
018B    74 0B                     je          L$591 
018D                          L$590:
018D    8E DA                     mov         ds,dx 
018F    BB 02 00                  mov         bx,0x0002 
0192    C5 35                     lds         si,dword ptr [di] 
0194    89 F8                     mov         ax,di 
0196    FF 1C                     call        dword ptr [si] 
0198                          L$591:
0198    C5 5E EE                  lds         bx,dword ptr -0x12[bp] 
019B    8B 07                     mov         ax,word ptr [bx] 
019D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
01A0    9A 00 00 00 00            call        void far operator delete( void far * ) 
01A5                          L$592:
01A5    C7 46 CE 01 00            mov         word ptr -0x32[bp],0x0001 
01AA    8B 5E DC                  mov         bx,word ptr -0x24[bp] 
01AD    8E D9                     mov         ds,cx 
01AF    83 EB 04                  sub         bx,0x0004 
01B2    89 4E FC                  mov         word ptr -0x4[bp],cx 
01B5    8B 17                     mov         dx,word ptr [bx] 
01B7    8B 47 02                  mov         ax,word ptr 0x2[bx] 
01BA    89 5E DE                  mov         word ptr -0x22[bp],bx 
01BD    89 5E E6                  mov         word ptr -0x1a[bp],bx 
01C0    85 C0                     test        ax,ax 
01C2    75 04                     jne         L$593 
01C4    85 D2                     test        dx,dx 
01C6    74 34                     je          L$597 
01C8                          L$593:
01C8    89 D6                     mov         si,dx 
01CA    8E D8                     mov         ds,ax 
01CC    83 3C 01                  cmp         word ptr [si],0x0001 
01CF    74 03                     je          L$594 
01D1    E9 B0 00                  jmp         L$606 
01D4                          L$594:
01D4    8B 54 04                  mov         dx,word ptr 0x4[si] 
01D7    8B 7C 02                  mov         di,word ptr 0x2[si] 
01DA    85 D2                     test        dx,dx 
01DC    75 04                     jne         L$595 
01DE    85 FF                     test        di,di 
01E0    74 0B                     je          L$596 
01E2                          L$595:
01E2    8E DA                     mov         ds,dx 
01E4    BB 02 00                  mov         bx,0x0002 
01E7    C5 35                     lds         si,dword ptr [di] 
01E9    89 F8                     mov         ax,di 
01EB    FF 1C                     call        dword ptr [si] 
01ED                          L$596:
01ED    8B 5E E6                  mov         bx,word ptr -0x1a[bp] 
01F0    8E D9                     mov         ds,cx 
01F2    8B 07                     mov         ax,word ptr [bx] 
01F4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
01F7    9A 00 00 00 00            call        void far operator delete( void far * ) 
01FC                          L$597:
01FC    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
01FF    8B 5E DE                  mov         bx,word ptr -0x22[bp] 
0202    C7 46 CE 00 00            mov         word ptr -0x32[bp],0x0000 
0207    83 EB 04                  sub         bx,0x0004 
020A    8C D9                     mov         cx,ds 
020C    8C 5E EA                  mov         word ptr -0x16[bp],ds 
020F    8B 17                     mov         dx,word ptr [bx] 
0211    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0214    89 5E E2                  mov         word ptr -0x1e[bp],bx 
0217    89 5E E8                  mov         word ptr -0x18[bp],bx 
021A    85 C0                     test        ax,ax 
021C    75 04                     jne         L$598 
021E    85 D2                     test        dx,dx 
0220    74 2F                     je          L$601 
0222                          L$598:
0222    89 D6                     mov         si,dx 
0224    8E D8                     mov         ds,ax 
0226    83 3C 01                  cmp         word ptr [si],0x0001 
0229    75 5E                     jne         L$607 
022B    8B 54 04                  mov         dx,word ptr 0x4[si] 
022E    8B 7C 02                  mov         di,word ptr 0x2[si] 
0231    85 D2                     test        dx,dx 
0233    75 04                     jne         L$599 
0235    85 FF                     test        di,di 
0237    74 0B                     je          L$600 
0239                          L$599:
0239    8E DA                     mov         ds,dx 
023B    BB 02 00                  mov         bx,0x0002 
023E    C5 35                     lds         si,dword ptr [di] 
0240    89 F8                     mov         ax,di 
0242    FF 1C                     call        dword ptr [si] 
0244                          L$600:
0244    C5 5E E8                  lds         bx,dword ptr -0x18[bp] 
0247    8B 07                     mov         ax,word ptr [bx] 
0249    8B 57 02                  mov         dx,word ptr 0x2[bx] 
024C    9A 00 00 00 00            call        void far operator delete( void far * ) 
0251                          L$601:
0251    8B 46 C2                  mov         ax,word ptr -0x3e[bp] 
0254    C7 46 CE 00 00            mov         word ptr -0x32[bp],0x0000 
0259    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
025D    8B 46 C4                  mov         ax,word ptr -0x3c[bp] 
0260    89 CA                     mov         dx,cx 
0262    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
0266    8B 46 E2                  mov         ax,word ptr -0x1e[bp] 
0269    89 EC                     mov         sp,bp 
026B    5D                        pop         bp 
026C    5F                        pop         di 
026D    5E                        pop         si 
026E    59                        pop         cx 
026F    CB                        retf        
0270                          L$602:
0270    FF 0C                     dec         word ptr [si] 
0272    E9 27 FE                  jmp         L$577 
0275                          L$603:
0275    FF 0C                     dec         word ptr [si] 
0277    E9 79 FE                  jmp         L$582 
027A                          L$604:
027A    FF 0C                     dec         word ptr [si] 
027C    E9 CF FE                  jmp         L$587 
027F                          L$605:
027F    FF 0C                     dec         word ptr [si] 
0281    E9 21 FF                  jmp         L$592 
0284                          L$606:
0284    FF 0C                     dec         word ptr [si] 
0286    E9 73 FF                  jmp         L$597 
0289                          L$607:
0289    FF 0C                     dec         word ptr [si] 
028B    EB C4                     jmp         L$601 
028D    FC                        cld         

Routine Size: 654 bytes,    Routine Base: W?$dt:GameAnimations$f()_ + 0000

No disassembly errors

Comdat: far ActorAnimationController::~ActorAnimationController() SEGMENT ANY 'game_TEXT' 0000012E bytes
0000                          L$608:
0000                          far ActorAnimationController::~ActorAnimationController():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 38                  sub         sp,0x0038 
0009    89 C6                     mov         si,ax 
000B    C7 46 E0 00 00            mov         word ptr -0x20[bp],offset __wcpp_4_fs_handler_rtn__ 
0010    C7 46 E2 00 00            mov         word ptr -0x1e[bp],seg __wcpp_4_fs_handler_rtn__ 
0015    C7 46 E4 60 05            mov         word ptr -0x1c[bp],offset L$440 
001A    C7 46 E6 00 00            mov         word ptr -0x1a[bp],game_DATA1 
001F    C7 46 E8 01 00            mov         word ptr -0x18[bp],0x0001 
0024    89 46 EA                  mov         word ptr -0x16[bp],ax 
0027    89 56 EC                  mov         word ptr -0x14[bp],dx 
002A    88 5E EE                  mov         byte ptr -0x12[bp],bl 
002D    89 D7                     mov         di,dx 
002F    89 56 FA                  mov         word ptr -0x6[bp],dx 
0032    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0036    8D 5E DC                  lea         bx,-0x24[bp] 
0039    89 46 DC                  mov         word ptr -0x24[bp],ax 
003C    36 89 1E 00 00            mov         word ptr ss:__wint_thread_data,bx 
0041    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0045    89 F3                     mov         bx,si 
0047    89 46 DE                  mov         word ptr -0x22[bp],ax 
004A    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
004F    83 C3 0E                  add         bx,0x000e 
0052    8E DA                     mov         ds,dx 
0054    89 D9                     mov         cx,bx 
0056    89 5E FC                  mov         word ptr -0x4[bp],bx 
0059    8B 47 02                  mov         ax,word ptr 0x2[bx] 
005C    8B 17                     mov         dx,word ptr [bx] 
005E    85 C0                     test        ax,ax 
0060    75 04                     jne         L$609 
0062    85 D2                     test        dx,dx 
0064    74 4B                     je          L$613 
0066                          L$609:
0066    89 D6                     mov         si,dx 
0068    8E D8                     mov         ds,ax 
006A    83 3C 01                  cmp         word ptr [si],0x0001 
006D    74 03                     je          L$610 
006F    E9 B4 00                  jmp         L$618 
0072                          L$610:
0072    8B 54 04                  mov         dx,word ptr 0x4[si] 
0075    8B 44 02                  mov         ax,word ptr 0x2[si] 
0078    85 D2                     test        dx,dx 
007A    75 04                     jne         L$611 
007C    85 C0                     test        ax,ax 
007E    74 1C                     je          L$612 
0080                          L$611:
0080    C7 46 E8 04 00            mov         word ptr -0x18[bp],0x0004 
0085    89 46 C8                  mov         word ptr -0x38[bp],ax 
0088    31 DB                     xor         bx,bx 
008A    89 56 CA                  mov         word ptr -0x36[bp],dx 
008D    9A 00 00 00 00            call        far SoundController::~SoundController() 
0092    C7 46 E8 01 00            mov         word ptr -0x18[bp],0x0001 
0097    9A 00 00 00 00            call        void far operator delete( void far * ) 
009C                          L$612:
009C    8E 5E FA                  mov         ds,word ptr -0x6[bp] 
009F    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
00A2    8B 07                     mov         ax,word ptr [bx] 
00A4    8B 57 02                  mov         dx,word ptr 0x2[bx] 
00A7    9A 00 00 00 00            call        void far operator delete( void far * ) 
00AC    C7 46 E8 01 00            mov         word ptr -0x18[bp],0x0001 
00B1                          L$613:
00B1    C7 46 E8 00 00            mov         word ptr -0x18[bp],0x0000 
00B6    8E DF                     mov         ds,di 
00B8    89 CB                     mov         bx,cx 
00BA    89 7E FE                  mov         word ptr -0x2[bp],di 
00BD    83 EB 0E                  sub         bx,0x000e 
00C0    89 F9                     mov         cx,di 
00C2    8B 17                     mov         dx,word ptr [bx] 
00C4    8B 47 02                  mov         ax,word ptr 0x2[bx] 
00C7    89 5E F6                  mov         word ptr -0xa[bp],bx 
00CA    89 5E F8                  mov         word ptr -0x8[bp],bx 
00CD    85 C0                     test        ax,ax 
00CF    75 04                     jne         L$614 
00D1    85 D2                     test        dx,dx 
00D3    74 32                     je          L$617 
00D5                          L$614:
00D5    89 D6                     mov         si,dx 
00D7    8E D8                     mov         ds,ax 
00D9    83 3C 01                  cmp         word ptr [si],0x0001 
00DC    75 4C                     jne         L$619 
00DE    8B 54 04                  mov         dx,word ptr 0x4[si] 
00E1    8B 7C 02                  mov         di,word ptr 0x2[si] 
00E4    85 D2                     test        dx,dx 
00E6    75 04                     jne         L$615 
00E8    85 FF                     test        di,di 
00EA    74 0B                     je          L$616 
00EC                          L$615:
00EC    8E DA                     mov         ds,dx 
00EE    BB 02 00                  mov         bx,0x0002 
00F1    C5 35                     lds         si,dword ptr [di] 
00F3    89 F8                     mov         ax,di 
00F5    FF 1C                     call        dword ptr [si] 
00F7                          L$616:
00F7    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00FA    8B 5E F8                  mov         bx,word ptr -0x8[bp] 
00FD    8B 07                     mov         ax,word ptr [bx] 
00FF    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0102    9A 00 00 00 00            call        void far operator delete( void far * ) 
0107                          L$617:
0107    8B 46 DC                  mov         ax,word ptr -0x24[bp] 
010A    C7 46 E8 00 00            mov         word ptr -0x18[bp],0x0000 
010F    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
0113    8B 46 DE                  mov         ax,word ptr -0x22[bp] 
0116    89 CA                     mov         dx,cx 
0118    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
011C    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
011F    89 EC                     mov         sp,bp 
0121    5D                        pop         bp 
0122    5F                        pop         di 
0123    5E                        pop         si 
0124    59                        pop         cx 
0125    CB                        retf        
0126                          L$618:
0126    FF 0C                     dec         word ptr [si] 
0128    EB 87                     jmp         L$613 
012A                          L$619:
012A    FF 0C                     dec         word ptr [si] 
012C    EB D9                     jmp         L$617 

Routine Size: 302 bytes,    Routine Base: W?$dt:ActorAnimationController$f()_ + 0000

No disassembly errors

Comdat: Rectangle far & far Rectangle::operator =( Rectangle const far & ) SEGMENT ANY 'game_TEXT' 00000012 bytes
0000                          Rectangle far & far Rectangle::operator =( Rectangle const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    8E C2                     mov         es,dx 
0004    89 C7                     mov         di,ax 
0006    8E D9                     mov         ds,cx 
0008    89 DE                     mov         si,bx 
000A    A5                        movsw       
000B    A5                        movsw       
000C    A5                        movsw       
000D    A5                        movsw       
000E    5F                        pop         di 
000F    5E                        pop         si 
0010    CB                        retf        
0011    FC                        cld         

Routine Size: 18 bytes,    Routine Base: W?$aa:Rectangle$f(rfx$0$)rf$0$ + 0000

No disassembly errors

Comdat: far tnd::vector<Rectangle far >::vector( tnd::vector<Rectangle far > const far & ) SEGMENT ANY 'game_TEXT' 00000090 bytes
0000                          L$620:
0000                          far tnd::vector<Rectangle far >::vector( tnd::vector<Rectangle far > const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    50                        push        ax 
0006    52                        push        dx 
0007    53                        push        bx 
0008    51                        push        cx 
0009    8E D9                     mov         ds,cx 
000B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
000E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0011    8E DA                     mov         ds,dx 
0013    89 47 04                  mov         word ptr 0x4[bx],ax 
0016    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0019    8E D9                     mov         ds,cx 
001B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
001E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0021    8E DA                     mov         ds,dx 
0023    89 47 06                  mov         word ptr 0x6[bx],ax 
0026    89 C3                     mov         bx,ax 
0028    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
002B    50                        push        ax 
002C    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
002F    B1 03                     mov         cl,0x03 
0031    50                        push        ax 
0032    89 D8                     mov         ax,bx 
0034    D3 E0                     shl         ax,cl 
0036    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
003B    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
0040    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0043    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0046    89 07                     mov         word ptr [bx],ax 
0048    89 57 02                  mov         word ptr 0x2[bx],dx 
004B    31 D2                     xor         dx,dx 
004D    31 C0                     xor         ax,ax 
004F                          L$621:
004F    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
0052    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0055    8B 5F 06                  mov         bx,word ptr 0x6[bx] 
0058    39 DA                     cmp         dx,bx 
005A    7D 28                     jge         L$622 
005C    8B 76 FA                  mov         si,word ptr -0x6[bp] 
005F    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0062    8B 7E FE                  mov         di,word ptr -0x2[bp] 
0065    8B 34                     mov         si,word ptr [si] 
0067    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
006A    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
006D    42                        inc         dx 
006E    8B 0D                     mov         cx,word ptr [di] 
0070    01 C6                     add         si,ax 
0072    8E 45 02                  mov         es,word ptr 0x2[di] 
0075    89 CF                     mov         di,cx 
0077    8E DB                     mov         ds,bx 
0079    01 C7                     add         di,ax 
007B    05 08 00                  add         ax,0x0008 
007E    A5                        movsw       
007F    A5                        movsw       
0080    A5                        movsw       
0081    A5                        movsw       
0082    EB CB                     jmp         L$621 
0084                          L$622:
0084    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0087    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
008A    89 EC                     mov         sp,bp 
008C    5D                        pop         bp 
008D    5F                        pop         di 
008E    5E                        pop         si 
008F    CB                        retf        

Routine Size: 144 bytes,    Routine Base: W?$ct:vector$::1f$Rectangle$$:tnd$f(rfx$0::1f$1$:2$)_ + 0000

No disassembly errors

Comdat: far tnd::vector<Rectangle far >::vector() SEGMENT ANY 'game_TEXT' 0000001A bytes
0000                          L$623:
0000                          far tnd::vector<Rectangle far >::vector():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
000A    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000F    C7 07 00 00               mov         word ptr [bx],0x0000 
0013    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
0018    5B                        pop         bx 
0019    CB                        retf        

Routine Size: 26 bytes,    Routine Base: W?$ct:vector$::1f$Rectangle$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<Rectangle far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          far tnd::vector<Rectangle far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1f$Rectangle$$:tnd$f()_ + 0000

No disassembly errors

Comdat: int far tnd::vector<Rectangle far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<Rectangle far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1f$Rectangle$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: far tnd::vector<Button far >::vector( tnd::vector<Button far > const far & ) SEGMENT ANY 'game_TEXT' 00000098 bytes
0000                          far tnd::vector<Button far >::vector( tnd::vector<Button far > const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    50                        push        ax 
0006    52                        push        dx 
0007    53                        push        bx 
0008    51                        push        cx 
0009    8E D9                     mov         ds,cx 
000B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
000E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0011    8E DA                     mov         ds,dx 
0013    89 47 04                  mov         word ptr 0x4[bx],ax 
0016    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0019    8E D9                     mov         ds,cx 
001B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
001E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0021    8E DA                     mov         ds,dx 
0023    89 47 06                  mov         word ptr 0x6[bx],ax 
0026    89 C3                     mov         bx,ax 
0028    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
002B    50                        push        ax 
002C    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
002F    50                        push        ax 
0030    89 D8                     mov         ax,bx 
0032    D1 E0                     shl         ax,0x01 
0034    D1 E0                     shl         ax,0x01 
0036    29 D8                     sub         ax,bx 
0038    D1 E0                     shl         ax,0x01 
003A    D1 E0                     shl         ax,0x01 
003C    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
0041    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
0046    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0049    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
004C    89 07                     mov         word ptr [bx],ax 
004E    89 57 02                  mov         word ptr 0x2[bx],dx 
0051    31 D2                     xor         dx,dx 
0053    31 C0                     xor         ax,ax 
0055                          L$624:
0055    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
0058    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
005B    8B 5F 06                  mov         bx,word ptr 0x6[bx] 
005E    39 DA                     cmp         dx,bx 
0060    7D 2A                     jge         L$625 
0062    8B 76 FA                  mov         si,word ptr -0x6[bp] 
0065    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0068    8B 7E FE                  mov         di,word ptr -0x2[bp] 
006B    8B 34                     mov         si,word ptr [si] 
006D    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
0070    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0073    42                        inc         dx 
0074    8B 0D                     mov         cx,word ptr [di] 
0076    01 C6                     add         si,ax 
0078    8E 45 02                  mov         es,word ptr 0x2[di] 
007B    89 CF                     mov         di,cx 
007D    8E DB                     mov         ds,bx 
007F    01 C7                     add         di,ax 
0081    05 0C 00                  add         ax,0x000c 
0084    A5                        movsw       
0085    A5                        movsw       
0086    A5                        movsw       
0087    A5                        movsw       
0088    A5                        movsw       
0089    A5                        movsw       
008A    EB C9                     jmp         L$624 
008C                          L$625:
008C    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
008F    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
0092    89 EC                     mov         sp,bp 
0094    5D                        pop         bp 
0095    5F                        pop         di 
0096    5E                        pop         si 
0097    CB                        retf        

Routine Size: 152 bytes,    Routine Base: W?$ct:vector$::1f$Button$$:tnd$f(rfx$0::1f$1$:2$)_ + 0000

No disassembly errors

Comdat: far tnd::vector<Button far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          far tnd::vector<Button far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1f$Button$$:tnd$f()_ + 0000

No disassembly errors

Comdat: int far tnd::vector<Button far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<Button far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1f$Button$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: far tnd::vector<Enemy far * far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$626:
0000                          far tnd::vector<Enemy far * far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1fpf$Enemy$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<SeekerEnemy far * far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$627:
0000                          far tnd::vector<SeekerEnemy far * far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1fpf$SeekerEnemy$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<FireBall far * far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$628:
0000                          far tnd::vector<FireBall far * far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1fpf$FireBall$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<Boss1 far * far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$629:
0000                          far tnd::vector<Boss1 far * far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1fpf$Boss1$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<CollectedGuffin far >::vector() SEGMENT ANY 'game_TEXT' 0000001A bytes
0000                          far tnd::vector<CollectedGuffin far >::vector():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 04 00 00            mov         word ptr 0x4[bx],0x0000 
000A    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000F    C7 07 00 00               mov         word ptr [bx],0x0000 
0013    C7 47 02 00 00            mov         word ptr 0x2[bx],0x0000 
0018    5B                        pop         bx 
0019    CB                        retf        

Routine Size: 26 bytes,    Routine Base: W?$ct:vector$::1f$CollectedGuffin$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::vector<CollectedGuffin far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          L$630:
0000                          far tnd::vector<CollectedGuffin far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1f$CollectedGuffin$$:tnd$f()_ + 0000

No disassembly errors

Comdat: int far tnd::vector<CollectedGuffin far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<CollectedGuffin far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1f$CollectedGuffin$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: far tnd::vector<MessageBox far >::vector( tnd::vector<MessageBox far > const far & ) SEGMENT ANY 'game_TEXT' 00000096 bytes
0000                          L$631:
0000                          far tnd::vector<MessageBox far >::vector( tnd::vector<MessageBox far > const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    50                        push        ax 
0006    52                        push        dx 
0007    53                        push        bx 
0008    51                        push        cx 
0009    8E D9                     mov         ds,cx 
000B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
000E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0011    8E DA                     mov         ds,dx 
0013    89 47 04                  mov         word ptr 0x4[bx],ax 
0016    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0019    8E D9                     mov         ds,cx 
001B    8B 47 06                  mov         ax,word ptr 0x6[bx] 
001E    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0021    8E DA                     mov         ds,dx 
0023    89 47 06                  mov         word ptr 0x6[bx],ax 
0026    89 C3                     mov         bx,ax 
0028    B8 00 00                  mov         ax,seg char unsigned const far __typesig[] 
002B    50                        push        ax 
002C    B8 00 00                  mov         ax,offset char unsigned const far __typesig[] 
002F    50                        push        ax 
0030    89 D8                     mov         ax,bx 
0032    D1 E0                     shl         ax,0x01 
0034    D1 E0                     shl         ax,0x01 
0036    01 D8                     add         ax,bx 
0038    D1 E0                     shl         ax,0x01 
003A    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
003F    9A 00 00 00 00            call        __wcpp_4_ctor_array_storage_gm__ 
0044    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0047    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
004A    89 07                     mov         word ptr [bx],ax 
004C    89 57 02                  mov         word ptr 0x2[bx],dx 
004F    31 D2                     xor         dx,dx 
0051    31 C0                     xor         ax,ax 
0053                          L$632:
0053    8E 5E F8                  mov         ds,word ptr -0x8[bp] 
0056    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0059    8B 5F 06                  mov         bx,word ptr 0x6[bx] 
005C    39 DA                     cmp         dx,bx 
005E    7D 29                     jge         L$633 
0060    8B 76 FA                  mov         si,word ptr -0x6[bp] 
0063    8B 5E FA                  mov         bx,word ptr -0x6[bp] 
0066    8B 7E FE                  mov         di,word ptr -0x2[bp] 
0069    8B 34                     mov         si,word ptr [si] 
006B    8B 5F 02                  mov         bx,word ptr 0x2[bx] 
006E    8E 5E FC                  mov         ds,word ptr -0x4[bp] 
0071    42                        inc         dx 
0072    8B 0D                     mov         cx,word ptr [di] 
0074    01 C6                     add         si,ax 
0076    8E 45 02                  mov         es,word ptr 0x2[di] 
0079    89 CF                     mov         di,cx 
007B    8E DB                     mov         ds,bx 
007D    01 C7                     add         di,ax 
007F    05 0A 00                  add         ax,0x000a 
0082    A5                        movsw       
0083    A5                        movsw       
0084    A5                        movsw       
0085    A5                        movsw       
0086    A5                        movsw       
0087    EB CA                     jmp         L$632 
0089                          L$633:
0089    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
008C    8B 56 FC                  mov         dx,word ptr -0x4[bp] 
008F    89 EC                     mov         sp,bp 
0091    5D                        pop         bp 
0092    5F                        pop         di 
0093    5E                        pop         si 
0094    CB                        retf        
0095    FC                        cld         

Routine Size: 150 bytes,    Routine Base: W?$ct:vector$::1f$MessageBox$$:tnd$f(rfx$0::1f$1$:2$)_ + 0000

No disassembly errors

Comdat: far tnd::vector<MessageBox far >::~vector() SEGMENT ANY 'game_TEXT' 00000018 bytes
0000                          far tnd::vector<MessageBox far >::~vector():
0000    51                        push        cx 
0001    89 C3                     mov         bx,ax 
0003    89 D1                     mov         cx,dx 
0005    8E DA                     mov         ds,dx 
0007    8B 07                     mov         ax,word ptr [bx] 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    9A 00 00 00 00            call        void far operator delete []( void far * ) 
0011    89 D8                     mov         ax,bx 
0013    89 CA                     mov         dx,cx 
0015    59                        pop         cx 
0016    CB                        retf        
0017    FC                        cld         

Routine Size: 24 bytes,    Routine Base: W?$dt:vector$::1f$MessageBox$$:tnd$f()_ + 0000

No disassembly errors

Comdat: int far tnd::vector<MessageBox far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<MessageBox far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1f$MessageBox$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<PhysicsCallback far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 00000046 bytes
0000                          far tnd::shared_ptr<PhysicsCallback far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    89 C3                     mov         bx,ax 
0004    89 D1                     mov         cx,dx 
0006    8E DA                     mov         ds,dx 
0008    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000B    8B 07                     mov         ax,word ptr [bx] 
000D    85 D2                     test        dx,dx 
000F    75 04                     jne         L$634 
0011    85 C0                     test        ax,ax 
0013    74 0B                     je          L$635 
0015                          L$634:
0015    89 C6                     mov         si,ax 
0017    8E DA                     mov         ds,dx 
0019    83 3C 01                  cmp         word ptr [si],0x0001 
001C    74 09                     je          L$636 
001E    FF 0C                     dec         word ptr [si] 
0020                          L$635:
0020    89 D8                     mov         ax,bx 
0022    89 CA                     mov         dx,cx 
0024    5E                        pop         si 
0025    59                        pop         cx 
0026    CB                        retf        
0027                          L$636:
0027    8B 44 02                  mov         ax,word ptr 0x2[si] 
002A    8B 54 04                  mov         dx,word ptr 0x4[si] 
002D    9A 00 00 00 00            call        void far operator delete( void far * ) 
0032    8E D9                     mov         ds,cx 
0034    8B 07                     mov         ax,word ptr [bx] 
0036    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0039    9A 00 00 00 00            call        void far operator delete( void far * ) 
003E    89 D8                     mov         ax,bx 
0040    89 CA                     mov         dx,cx 
0042    5E                        pop         si 
0043    59                        pop         cx 
0044    CB                        retf        
0045    FC                        cld         

Routine Size: 70 bytes,    Routine Base: W?$dt:shared_ptr$::1f$PhysicsCallback$$:tnd$f()_ + 0000

No disassembly errors

Comdat: void far tnd::shared_ptr<PhysicsCallback far >::delete_storage() SEGMENT ANY 'game_TEXT' 00000040 bytes
0000                          void far tnd::shared_ptr<PhysicsCallback far >::delete_storage():
0000    53                        push        bx 
0001    51                        push        cx 
0002    56                        push        si 
0003    89 C3                     mov         bx,ax 
0005    89 D1                     mov         cx,dx 
0007    8E DA                     mov         ds,dx 
0009    8B 57 02                  mov         dx,word ptr 0x2[bx] 
000C    8B 07                     mov         ax,word ptr [bx] 
000E    85 D2                     test        dx,dx 
0010    75 04                     jne         L$637 
0012    85 C0                     test        ax,ax 
0014    74 0B                     je          L$638 
0016                          L$637:
0016    89 C6                     mov         si,ax 
0018    8E DA                     mov         ds,dx 
001A    83 3C 01                  cmp         word ptr [si],0x0001 
001D    74 06                     je          L$639 
001F    FF 0C                     dec         word ptr [si] 
0021                          L$638:
0021    5E                        pop         si 
0022    59                        pop         cx 
0023    5B                        pop         bx 
0024    CB                        retf        
0025                          L$639:
0025    8B 44 02                  mov         ax,word ptr 0x2[si] 
0028    8B 54 04                  mov         dx,word ptr 0x4[si] 
002B    9A 00 00 00 00            call        void far operator delete( void far * ) 
0030    8E D9                     mov         ds,cx 
0032    8B 07                     mov         ax,word ptr [bx] 
0034    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0037    9A 00 00 00 00            call        void far operator delete( void far * ) 
003C    5E                        pop         si 
003D    59                        pop         cx 
003E    5B                        pop         bx 
003F    CB                        retf        

Routine Size: 64 bytes,    Routine Base: W?delete_storage$:shared_ptr$::1f$PhysicsCallback$$:tnd$f()v + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<SoundController far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 000000B8 bytes
0000                          far tnd::shared_ptr<SoundController far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 24                  sub         sp,0x0024 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    8D 56 F0                  lea         dx,-0x10[bp] 
0010    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
0015    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
001A    C7 46 F8 82 05            mov         word ptr -0x8[bp],offset L$441 
001F    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
0024    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0029    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
002D    89 F7                     mov         di,si 
002F    89 46 F0                  mov         word ptr -0x10[bp],ax 
0032    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0036    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
003B    89 46 F2                  mov         word ptr -0xe[bp],ax 
003E    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0043    8E D9                     mov         ds,cx 
0045    89 4E FE                  mov         word ptr -0x2[bp],cx 
0048    8B 44 02                  mov         ax,word ptr 0x2[si] 
004B    8B 14                     mov         dx,word ptr [si] 
004D    85 C0                     test        ax,ax 
004F    75 04                     jne         L$640 
0051    85 D2                     test        dx,dx 
0053    74 45                     je          L$643 
0055                          L$640:
0055    89 D3                     mov         bx,dx 
0057    8E D8                     mov         ds,ax 
0059    83 3F 01                  cmp         word ptr [bx],0x0001 
005C    75 55                     jne         L$644 
005E    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0061    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0064    85 D2                     test        dx,dx 
0066    75 04                     jne         L$641 
0068    85 C0                     test        ax,ax 
006A    74 1C                     je          L$642 
006C                          L$641:
006C    C7 46 FC 01 00            mov         word ptr -0x4[bp],0x0001 
0071    89 46 DC                  mov         word ptr -0x24[bp],ax 
0074    31 DB                     xor         bx,bx 
0076    89 56 DE                  mov         word ptr -0x22[bp],dx 
0079    9A 00 00 00 00            call        far SoundController::~SoundController() 
007E    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0083    9A 00 00 00 00            call        void far operator delete( void far * ) 
0088                          L$642:
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    8B 05                     mov         ax,word ptr [di] 
008D    8B 55 02                  mov         dx,word ptr 0x2[di] 
0090    9A 00 00 00 00            call        void far operator delete( void far * ) 
0095    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
009A                          L$643:
009A    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
009D    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00A1    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
00A4    89 CA                     mov         dx,cx 
00A6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00AA    89 F0                     mov         ax,si 
00AC    89 EC                     mov         sp,bp 
00AE    5D                        pop         bp 
00AF    5F                        pop         di 
00B0    5E                        pop         si 
00B1    59                        pop         cx 
00B2    CB                        retf        
00B3                          L$644:
00B3    FF 0F                     dec         word ptr [bx] 
00B5    EB E3                     jmp         L$643 
00B7    FC                        cld         

Routine Size: 184 bytes,    Routine Base: W?$dt:shared_ptr$::1f$SoundController$$:tnd$f()_ + 0000

No disassembly errors

Comdat: void far tnd::shared_ptr<SoundController far >::delete_storage() SEGMENT ANY 'game_TEXT' 000000AE bytes
0000                          void far tnd::shared_ptr<SoundController far >::delete_storage():
0000    53                        push        bx 
0001    51                        push        cx 
0002    56                        push        si 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 22                  sub         sp,0x0022 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    8D 56 F2                  lea         dx,-0xe[bp] 
0010    C7 46 F6 00 00            mov         word ptr -0xa[bp],offset __wcpp_4_fs_handler_rtn__ 
0015    C7 46 F8 00 00            mov         word ptr -0x8[bp],seg __wcpp_4_fs_handler_rtn__ 
001A    C7 46 FA 8C 05            mov         word ptr -0x6[bp],offset L$442 
001F    C7 46 FC 00 00            mov         word ptr -0x4[bp],game_DATA1 
0024    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0028    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
002D    89 46 F2                  mov         word ptr -0xe[bp],ax 
0030    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0035    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0039    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
003E    8E D9                     mov         ds,cx 
0040    89 46 F4                  mov         word ptr -0xc[bp],ax 
0043    8B 54 02                  mov         dx,word ptr 0x2[si] 
0046    8B 04                     mov         ax,word ptr [si] 
0048    85 D2                     test        dx,dx 
004A    75 04                     jne         L$645 
004C    85 C0                     test        ax,ax 
004E    74 44                     je          L$648 
0050                          L$645:
0050    89 C3                     mov         bx,ax 
0052    8E DA                     mov         ds,dx 
0054    83 3F 01                  cmp         word ptr [bx],0x0001 
0057    75 50                     jne         L$649 
0059    8B 57 04                  mov         dx,word ptr 0x4[bx] 
005C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
005F    85 D2                     test        dx,dx 
0061    75 04                     jne         L$646 
0063    85 C0                     test        ax,ax 
0065    74 1C                     je          L$647 
0067                          L$646:
0067    C7 46 FE 01 00            mov         word ptr -0x2[bp],0x0001 
006C    89 46 DE                  mov         word ptr -0x22[bp],ax 
006F    31 DB                     xor         bx,bx 
0071    89 56 E0                  mov         word ptr -0x20[bp],dx 
0074    9A 00 00 00 00            call        far SoundController::~SoundController() 
0079    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
007E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0083                          L$647:
0083    8E D9                     mov         ds,cx 
0085    8B 04                     mov         ax,word ptr [si] 
0087    8B 54 02                  mov         dx,word ptr 0x2[si] 
008A    9A 00 00 00 00            call        void far operator delete( void far * ) 
008F    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0094                          L$648:
0094    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0097    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
009B    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
009E    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00A2    89 EC                     mov         sp,bp 
00A4    5D                        pop         bp 
00A5    5E                        pop         si 
00A6    59                        pop         cx 
00A7    5B                        pop         bx 
00A8    CB                        retf        
00A9                          L$649:
00A9    FF 0F                     dec         word ptr [bx] 
00AB    EB E7                     jmp         L$648 
00AD    FC                        cld         

Routine Size: 174 bytes,    Routine Base: W?delete_storage$:shared_ptr$::1f$SoundController$$:tnd$f()v + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<Animation far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 00000072 bytes
0000                          far tnd::shared_ptr<Animation far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 06                  sub         sp,0x0006 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    89 46 FC                  mov         word ptr -0x4[bp],ax 
0010    8E DA                     mov         ds,dx 
0012    89 56 FE                  mov         word ptr -0x2[bp],dx 
0015    8B 44 02                  mov         ax,word ptr 0x2[si] 
0018    8B 14                     mov         dx,word ptr [si] 
001A    85 C0                     test        ax,ax 
001C    75 04                     jne         L$650 
001E    85 D2                     test        dx,dx 
0020    74 38                     je          L$653 
0022                          L$650:
0022    89 D3                     mov         bx,dx 
0024    8E D8                     mov         ds,ax 
0026    83 3F 01                  cmp         word ptr [bx],0x0001 
0029    75 3A                     jne         L$654 
002B    8B 57 04                  mov         dx,word ptr 0x4[bx] 
002E    8B 7F 02                  mov         di,word ptr 0x2[bx] 
0031    85 D2                     test        dx,dx 
0033    75 04                     jne         L$651 
0035    85 FF                     test        di,di 
0037    74 14                     je          L$652 
0039                          L$651:
0039    8E DA                     mov         ds,dx 
003B    8B 1D                     mov         bx,word ptr [di] 
003D    89 F8                     mov         ax,di 
003F    89 5E FA                  mov         word ptr -0x6[bp],bx 
0042    8E 5D 02                  mov         ds,word ptr 0x2[di] 
0045    8B 7E FA                  mov         di,word ptr -0x6[bp] 
0048    BB 02 00                  mov         bx,0x0002 
004B    FF 1D                     call        dword ptr [di] 
004D                          L$652:
004D    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
0050    8B 07                     mov         ax,word ptr [bx] 
0052    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0055    9A 00 00 00 00            call        void far operator delete( void far * ) 
005A                          L$653:
005A    89 F0                     mov         ax,si 
005C    89 CA                     mov         dx,cx 
005E    89 EC                     mov         sp,bp 
0060    5D                        pop         bp 
0061    5F                        pop         di 
0062    5E                        pop         si 
0063    59                        pop         cx 
0064    CB                        retf        
0065                          L$654:
0065    FF 0F                     dec         word ptr [bx] 
0067    89 F0                     mov         ax,si 
0069    89 CA                     mov         dx,cx 
006B    89 EC                     mov         sp,bp 
006D    5D                        pop         bp 
006E    5F                        pop         di 
006F    5E                        pop         si 
0070    59                        pop         cx 
0071    CB                        retf        

Routine Size: 114 bytes,    Routine Base: W?$dt:shared_ptr$::1f$Animation$$:tnd$f()_ + 0000

No disassembly errors

Comdat: void far tnd::shared_ptr<Animation far >::delete_storage() SEGMENT ANY 'game_TEXT' 00000066 bytes
0000                          void far tnd::shared_ptr<Animation far >::delete_storage():
0000    53                        push        bx 
0001    51                        push        cx 
0002    56                        push        si 
0003    57                        push        di 
0004    55                        push        bp 
0005    89 E5                     mov         bp,sp 
0007    83 EC 02                  sub         sp,0x0002 
000A    89 C6                     mov         si,ax 
000C    89 D1                     mov         cx,dx 
000E    8E DA                     mov         ds,dx 
0010    8B 44 02                  mov         ax,word ptr 0x2[si] 
0013    8B 14                     mov         dx,word ptr [si] 
0015    85 C0                     test        ax,ax 
0017    75 04                     jne         L$655 
0019    85 D2                     test        dx,dx 
001B    74 37                     je          L$658 
001D                          L$655:
001D    89 D3                     mov         bx,dx 
001F    8E D8                     mov         ds,ax 
0021    83 3F 01                  cmp         word ptr [bx],0x0001 
0024    75 36                     jne         L$659 
0026    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0029    8B 7F 02                  mov         di,word ptr 0x2[bx] 
002C    85 D2                     test        dx,dx 
002E    75 04                     jne         L$656 
0030    85 FF                     test        di,di 
0032    74 14                     je          L$657 
0034                          L$656:
0034    8E DA                     mov         ds,dx 
0036    8B 1D                     mov         bx,word ptr [di] 
0038    89 F8                     mov         ax,di 
003A    89 5E FE                  mov         word ptr -0x2[bp],bx 
003D    8E 5D 02                  mov         ds,word ptr 0x2[di] 
0040    8B 7E FE                  mov         di,word ptr -0x2[bp] 
0043    BB 02 00                  mov         bx,0x0002 
0046    FF 1D                     call        dword ptr [di] 
0048                          L$657:
0048    8E D9                     mov         ds,cx 
004A    8B 04                     mov         ax,word ptr [si] 
004C    8B 54 02                  mov         dx,word ptr 0x2[si] 
004F    9A 00 00 00 00            call        void far operator delete( void far * ) 
0054                          L$658:
0054    89 EC                     mov         sp,bp 
0056    5D                        pop         bp 
0057    5F                        pop         di 
0058    5E                        pop         si 
0059    59                        pop         cx 
005A    5B                        pop         bx 
005B    CB                        retf        
005C                          L$659:
005C    FF 0F                     dec         word ptr [bx] 
005E    89 EC                     mov         sp,bp 
0060    5D                        pop         bp 
0061    5F                        pop         di 
0062    5E                        pop         si 
0063    59                        pop         cx 
0064    5B                        pop         bx 
0065    CB                        retf        

Routine Size: 102 bytes,    Routine Base: W?delete_storage$:shared_ptr$::1f$Animation$$:tnd$f()v + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<VgaGfx far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 00000074 bytes
0000                          L$660:
0000                          far tnd::shared_ptr<VgaGfx far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 06                  sub         sp,0x0006 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    89 46 FC                  mov         word ptr -0x4[bp],ax 
0010    8E DA                     mov         ds,dx 
0012    89 56 FE                  mov         word ptr -0x2[bp],dx 
0015    8B 44 02                  mov         ax,word ptr 0x2[si] 
0018    8B 14                     mov         dx,word ptr [si] 
001A    85 C0                     test        ax,ax 
001C    75 04                     jne         L$661 
001E    85 D2                     test        dx,dx 
0020    74 39                     je          L$664 
0022                          L$661:
0022    89 D3                     mov         bx,dx 
0024    8E D8                     mov         ds,ax 
0026    83 3F 01                  cmp         word ptr [bx],0x0001 
0029    75 3B                     jne         L$665 
002B    8B 57 04                  mov         dx,word ptr 0x4[bx] 
002E    8B 7F 02                  mov         di,word ptr 0x2[bx] 
0031    85 D2                     test        dx,dx 
0033    75 04                     jne         L$662 
0035    85 FF                     test        di,di 
0037    74 15                     je          L$663 
0039                          L$662:
0039    8E DA                     mov         ds,dx 
003B    8B 5D 1E                  mov         bx,word ptr 0x1e[di] 
003E    89 F8                     mov         ax,di 
0040    89 5E FA                  mov         word ptr -0x6[bp],bx 
0043    8E 5D 20                  mov         ds,word ptr 0x20[di] 
0046    8B 7E FA                  mov         di,word ptr -0x6[bp] 
0049    BB 02 00                  mov         bx,0x0002 
004C    FF 1D                     call        dword ptr [di] 
004E                          L$663:
004E    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
0051    8B 07                     mov         ax,word ptr [bx] 
0053    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0056    9A 00 00 00 00            call        void far operator delete( void far * ) 
005B                          L$664:
005B    89 F0                     mov         ax,si 
005D    89 CA                     mov         dx,cx 
005F    89 EC                     mov         sp,bp 
0061    5D                        pop         bp 
0062    5F                        pop         di 
0063    5E                        pop         si 
0064    59                        pop         cx 
0065    CB                        retf        
0066                          L$665:
0066    FF 0F                     dec         word ptr [bx] 
0068    89 F0                     mov         ax,si 
006A    89 CA                     mov         dx,cx 
006C    89 EC                     mov         sp,bp 
006E    5D                        pop         bp 
006F    5F                        pop         di 
0070    5E                        pop         si 
0071    59                        pop         cx 
0072    CB                        retf        
0073    FC                        cld         

Routine Size: 116 bytes,    Routine Base: W?$dt:shared_ptr$::1f$VgaGfx$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<MusicController far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 000000B8 bytes
0000                          L$666:
0000                          far tnd::shared_ptr<MusicController far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 24                  sub         sp,0x0024 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    8D 56 F0                  lea         dx,-0x10[bp] 
0010    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
0015    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
001A    C7 46 F8 96 05            mov         word ptr -0x8[bp],offset L$443 
001F    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
0024    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0029    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
002D    89 F7                     mov         di,si 
002F    89 46 F0                  mov         word ptr -0x10[bp],ax 
0032    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0036    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
003B    89 46 F2                  mov         word ptr -0xe[bp],ax 
003E    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0043    8E D9                     mov         ds,cx 
0045    89 4E FE                  mov         word ptr -0x2[bp],cx 
0048    8B 44 02                  mov         ax,word ptr 0x2[si] 
004B    8B 14                     mov         dx,word ptr [si] 
004D    85 C0                     test        ax,ax 
004F    75 04                     jne         L$667 
0051    85 D2                     test        dx,dx 
0053    74 45                     je          L$670 
0055                          L$667:
0055    89 D3                     mov         bx,dx 
0057    8E D8                     mov         ds,ax 
0059    83 3F 01                  cmp         word ptr [bx],0x0001 
005C    75 55                     jne         L$671 
005E    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0061    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0064    85 D2                     test        dx,dx 
0066    75 04                     jne         L$668 
0068    85 C0                     test        ax,ax 
006A    74 1C                     je          L$669 
006C                          L$668:
006C    C7 46 FC 01 00            mov         word ptr -0x4[bp],0x0001 
0071    89 46 DC                  mov         word ptr -0x24[bp],ax 
0074    31 DB                     xor         bx,bx 
0076    89 56 DE                  mov         word ptr -0x22[bp],dx 
0079    9A 00 00 00 00            call        far MusicController::~MusicController() 
007E    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0083    9A 00 00 00 00            call        void far operator delete( void far * ) 
0088                          L$669:
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    8B 05                     mov         ax,word ptr [di] 
008D    8B 55 02                  mov         dx,word ptr 0x2[di] 
0090    9A 00 00 00 00            call        void far operator delete( void far * ) 
0095    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
009A                          L$670:
009A    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
009D    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00A1    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
00A4    89 CA                     mov         dx,cx 
00A6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00AA    89 F0                     mov         ax,si 
00AC    89 EC                     mov         sp,bp 
00AE    5D                        pop         bp 
00AF    5F                        pop         di 
00B0    5E                        pop         si 
00B1    59                        pop         cx 
00B2    CB                        retf        
00B3                          L$671:
00B3    FF 0F                     dec         word ptr [bx] 
00B5    EB E3                     jmp         L$670 
00B7    FC                        cld         

Routine Size: 184 bytes,    Routine Base: W?$dt:shared_ptr$::1f$MusicController$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<ImageBase far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 00000072 bytes
0000                          far tnd::shared_ptr<ImageBase far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 06                  sub         sp,0x0006 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    89 46 FC                  mov         word ptr -0x4[bp],ax 
0010    8E DA                     mov         ds,dx 
0012    89 56 FE                  mov         word ptr -0x2[bp],dx 
0015    8B 44 02                  mov         ax,word ptr 0x2[si] 
0018    8B 14                     mov         dx,word ptr [si] 
001A    85 C0                     test        ax,ax 
001C    75 04                     jne         L$672 
001E    85 D2                     test        dx,dx 
0020    74 38                     je          L$675 
0022                          L$672:
0022    89 D3                     mov         bx,dx 
0024    8E D8                     mov         ds,ax 
0026    83 3F 01                  cmp         word ptr [bx],0x0001 
0029    75 3A                     jne         L$676 
002B    8B 57 04                  mov         dx,word ptr 0x4[bx] 
002E    8B 7F 02                  mov         di,word ptr 0x2[bx] 
0031    85 D2                     test        dx,dx 
0033    75 04                     jne         L$673 
0035    85 FF                     test        di,di 
0037    74 14                     je          L$674 
0039                          L$673:
0039    8E DA                     mov         ds,dx 
003B    8B 1D                     mov         bx,word ptr [di] 
003D    89 F8                     mov         ax,di 
003F    89 5E FA                  mov         word ptr -0x6[bp],bx 
0042    8E 5D 02                  mov         ds,word ptr 0x2[di] 
0045    8B 7E FA                  mov         di,word ptr -0x6[bp] 
0048    BB 02 00                  mov         bx,0x0002 
004B    FF 1D                     call        dword ptr [di] 
004D                          L$674:
004D    C5 5E FC                  lds         bx,dword ptr -0x4[bp] 
0050    8B 07                     mov         ax,word ptr [bx] 
0052    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0055    9A 00 00 00 00            call        void far operator delete( void far * ) 
005A                          L$675:
005A    89 F0                     mov         ax,si 
005C    89 CA                     mov         dx,cx 
005E    89 EC                     mov         sp,bp 
0060    5D                        pop         bp 
0061    5F                        pop         di 
0062    5E                        pop         si 
0063    59                        pop         cx 
0064    CB                        retf        
0065                          L$676:
0065    FF 0F                     dec         word ptr [bx] 
0067    89 F0                     mov         ax,si 
0069    89 CA                     mov         dx,cx 
006B    89 EC                     mov         sp,bp 
006D    5D                        pop         bp 
006E    5F                        pop         di 
006F    5E                        pop         si 
0070    59                        pop         cx 
0071    CB                        retf        

Routine Size: 114 bytes,    Routine Base: W?$dt:shared_ptr$::1f$ImageBase$$:tnd$f()_ + 0000

No disassembly errors

Comdat: void far tnd::shared_ptr<ImageBase far >::delete_storage() SEGMENT ANY 'game_TEXT' 00000066 bytes
0000                          void far tnd::shared_ptr<ImageBase far >::delete_storage():
0000    53                        push        bx 
0001    51                        push        cx 
0002    56                        push        si 
0003    57                        push        di 
0004    55                        push        bp 
0005    89 E5                     mov         bp,sp 
0007    83 EC 02                  sub         sp,0x0002 
000A    89 C6                     mov         si,ax 
000C    89 D1                     mov         cx,dx 
000E    8E DA                     mov         ds,dx 
0010    8B 44 02                  mov         ax,word ptr 0x2[si] 
0013    8B 14                     mov         dx,word ptr [si] 
0015    85 C0                     test        ax,ax 
0017    75 04                     jne         L$677 
0019    85 D2                     test        dx,dx 
001B    74 37                     je          L$680 
001D                          L$677:
001D    89 D3                     mov         bx,dx 
001F    8E D8                     mov         ds,ax 
0021    83 3F 01                  cmp         word ptr [bx],0x0001 
0024    75 36                     jne         L$681 
0026    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0029    8B 7F 02                  mov         di,word ptr 0x2[bx] 
002C    85 D2                     test        dx,dx 
002E    75 04                     jne         L$678 
0030    85 FF                     test        di,di 
0032    74 14                     je          L$679 
0034                          L$678:
0034    8E DA                     mov         ds,dx 
0036    8B 1D                     mov         bx,word ptr [di] 
0038    89 F8                     mov         ax,di 
003A    89 5E FE                  mov         word ptr -0x2[bp],bx 
003D    8E 5D 02                  mov         ds,word ptr 0x2[di] 
0040    8B 7E FE                  mov         di,word ptr -0x2[bp] 
0043    BB 02 00                  mov         bx,0x0002 
0046    FF 1D                     call        dword ptr [di] 
0048                          L$679:
0048    8E D9                     mov         ds,cx 
004A    8B 04                     mov         ax,word ptr [si] 
004C    8B 54 02                  mov         dx,word ptr 0x2[si] 
004F    9A 00 00 00 00            call        void far operator delete( void far * ) 
0054                          L$680:
0054    89 EC                     mov         sp,bp 
0056    5D                        pop         bp 
0057    5F                        pop         di 
0058    5E                        pop         si 
0059    59                        pop         cx 
005A    5B                        pop         bx 
005B    CB                        retf        
005C                          L$681:
005C    FF 0F                     dec         word ptr [bx] 
005E    89 EC                     mov         sp,bp 
0060    5D                        pop         bp 
0061    5F                        pop         di 
0062    5E                        pop         si 
0063    59                        pop         cx 
0064    5B                        pop         bx 
0065    CB                        retf        

Routine Size: 102 bytes,    Routine Base: W?delete_storage$:shared_ptr$::1f$ImageBase$$:tnd$f()v + 0000

No disassembly errors

Comdat: far tnd::shared_ptr<Physics far >::~shared_ptr() SEGMENT ANY 'game_TEXT' 000000B8 bytes
0000                          far tnd::shared_ptr<Physics far >::~shared_ptr():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 24                  sub         sp,0x0024 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    8D 56 F0                  lea         dx,-0x10[bp] 
0010    C7 46 F4 00 00            mov         word ptr -0xc[bp],offset __wcpp_4_fs_handler_rtn__ 
0015    C7 46 F6 00 00            mov         word ptr -0xa[bp],seg __wcpp_4_fs_handler_rtn__ 
001A    C7 46 F8 A0 05            mov         word ptr -0x8[bp],offset L$444 
001F    C7 46 FA 00 00            mov         word ptr -0x6[bp],game_DATA1 
0024    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0029    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
002D    89 F7                     mov         di,si 
002F    89 46 F0                  mov         word ptr -0x10[bp],ax 
0032    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0036    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
003B    89 46 F2                  mov         word ptr -0xe[bp],ax 
003E    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0043    8E D9                     mov         ds,cx 
0045    89 4E FE                  mov         word ptr -0x2[bp],cx 
0048    8B 44 02                  mov         ax,word ptr 0x2[si] 
004B    8B 14                     mov         dx,word ptr [si] 
004D    85 C0                     test        ax,ax 
004F    75 04                     jne         L$682 
0051    85 D2                     test        dx,dx 
0053    74 45                     je          L$685 
0055                          L$682:
0055    89 D3                     mov         bx,dx 
0057    8E D8                     mov         ds,ax 
0059    83 3F 01                  cmp         word ptr [bx],0x0001 
005C    75 55                     jne         L$686 
005E    8B 57 04                  mov         dx,word ptr 0x4[bx] 
0061    8B 47 02                  mov         ax,word ptr 0x2[bx] 
0064    85 D2                     test        dx,dx 
0066    75 04                     jne         L$683 
0068    85 C0                     test        ax,ax 
006A    74 1C                     je          L$684 
006C                          L$683:
006C    C7 46 FC 01 00            mov         word ptr -0x4[bp],0x0001 
0071    89 46 DC                  mov         word ptr -0x24[bp],ax 
0074    31 DB                     xor         bx,bx 
0076    89 56 DE                  mov         word ptr -0x22[bp],dx 
0079    9A 00 00 00 00            call        far Physics::~Physics() 
007E    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0083    9A 00 00 00 00            call        void far operator delete( void far * ) 
0088                          L$684:
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    8B 05                     mov         ax,word ptr [di] 
008D    8B 55 02                  mov         dx,word ptr 0x2[di] 
0090    9A 00 00 00 00            call        void far operator delete( void far * ) 
0095    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
009A                          L$685:
009A    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
009D    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00A1    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
00A4    89 CA                     mov         dx,cx 
00A6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00AA    89 F0                     mov         ax,si 
00AC    89 EC                     mov         sp,bp 
00AE    5D                        pop         bp 
00AF    5F                        pop         di 
00B0    5E                        pop         si 
00B1    59                        pop         cx 
00B2    CB                        retf        
00B3                          L$686:
00B3    FF 0F                     dec         word ptr [bx] 
00B5    EB E3                     jmp         L$685 
00B7    FC                        cld         

Routine Size: 184 bytes,    Routine Base: W?$dt:shared_ptr$::1f$Physics$$:tnd$f()_ + 0000

No disassembly errors

Comdat: void far tnd::shared_ptr<Physics far >::delete_storage() SEGMENT ANY 'game_TEXT' 000000AE bytes
0000                          void far tnd::shared_ptr<Physics far >::delete_storage():
0000    53                        push        bx 
0001    51                        push        cx 
0002    56                        push        si 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 22                  sub         sp,0x0022 
0009    89 C6                     mov         si,ax 
000B    89 D1                     mov         cx,dx 
000D    8D 56 F2                  lea         dx,-0xe[bp] 
0010    C7 46 F6 00 00            mov         word ptr -0xa[bp],offset __wcpp_4_fs_handler_rtn__ 
0015    C7 46 F8 00 00            mov         word ptr -0x8[bp],seg __wcpp_4_fs_handler_rtn__ 
001A    C7 46 FA AA 05            mov         word ptr -0x6[bp],offset L$445 
001F    C7 46 FC 00 00            mov         word ptr -0x4[bp],game_DATA1 
0024    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0028    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
002D    89 46 F2                  mov         word ptr -0xe[bp],ax 
0030    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0035    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0039    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
003E    8E D9                     mov         ds,cx 
0040    89 46 F4                  mov         word ptr -0xc[bp],ax 
0043    8B 54 02                  mov         dx,word ptr 0x2[si] 
0046    8B 04                     mov         ax,word ptr [si] 
0048    85 D2                     test        dx,dx 
004A    75 04                     jne         L$687 
004C    85 C0                     test        ax,ax 
004E    74 44                     je          L$690 
0050                          L$687:
0050    89 C3                     mov         bx,ax 
0052    8E DA                     mov         ds,dx 
0054    83 3F 01                  cmp         word ptr [bx],0x0001 
0057    75 50                     jne         L$691 
0059    8B 57 04                  mov         dx,word ptr 0x4[bx] 
005C    8B 47 02                  mov         ax,word ptr 0x2[bx] 
005F    85 D2                     test        dx,dx 
0061    75 04                     jne         L$688 
0063    85 C0                     test        ax,ax 
0065    74 1C                     je          L$689 
0067                          L$688:
0067    C7 46 FE 01 00            mov         word ptr -0x2[bp],0x0001 
006C    89 46 DE                  mov         word ptr -0x22[bp],ax 
006F    31 DB                     xor         bx,bx 
0071    89 56 E0                  mov         word ptr -0x20[bp],dx 
0074    9A 00 00 00 00            call        far Physics::~Physics() 
0079    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
007E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0083                          L$689:
0083    8E D9                     mov         ds,cx 
0085    8B 04                     mov         ax,word ptr [si] 
0087    8B 54 02                  mov         dx,word ptr 0x2[si] 
008A    9A 00 00 00 00            call        void far operator delete( void far * ) 
008F    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0094                          L$690:
0094    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0097    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
009B    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
009E    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00A2    89 EC                     mov         sp,bp 
00A4    5D                        pop         bp 
00A5    5E                        pop         si 
00A6    59                        pop         cx 
00A7    5B                        pop         bx 
00A8    CB                        retf        
00A9                          L$691:
00A9    FF 0F                     dec         word ptr [bx] 
00AB    EB E7                     jmp         L$690 
00AD    FC                        cld         

Routine Size: 174 bytes,    Routine Base: W?delete_storage$:shared_ptr$::1f$Physics$$:tnd$f()v + 0000

No disassembly errors

Comdat: far tnd::ptr_vector<Enemy far >::~ptr_vector() SEGMENT ANY 'game_TEXT' 000000C4 bytes
0000                          L$692:
0000                          far tnd::ptr_vector<Enemy far >::~ptr_vector():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 30                  sub         sp,0x0030 
0009    89 C6                     mov         si,ax 
000B    89 56 FE                  mov         word ptr -0x2[bp],dx 
000E    C7 46 E8 00 00            mov         word ptr -0x18[bp],offset __wcpp_4_fs_handler_rtn__ 
0013    C7 46 EA 00 00            mov         word ptr -0x16[bp],seg __wcpp_4_fs_handler_rtn__ 
0018    C7 46 EC B4 05            mov         word ptr -0x14[bp],offset L$446 
001D    C7 46 EE 00 00            mov         word ptr -0x12[bp],game_DATA1 
0022    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
0027    89 46 F2                  mov         word ptr -0xe[bp],ax 
002A    89 56 F4                  mov         word ptr -0xc[bp],dx 
002D    88 5E F6                  mov         byte ptr -0xa[bp],bl 
0030    31 C9                     xor         cx,cx 
0032    31 FF                     xor         di,di 
0034    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0038    8D 56 E4                  lea         dx,-0x1c[bp] 
003B    89 46 E4                  mov         word ptr -0x1c[bp],ax 
003E    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0042    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0047    89 46 E6                  mov         word ptr -0x1a[bp],ax 
004A    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
004F                          L$693:
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    8B 44 06                  mov         ax,word ptr 0x6[si] 
0055    39 C1                     cmp         cx,ax 
0057    7D 3C                     jge         L$696 
0059    C5 1C                     lds         bx,dword ptr [si] 
005B    01 FB                     add         bx,di 
005D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0060    8B 07                     mov         ax,word ptr [bx] 
0062    85 D2                     test        dx,dx 
0064    75 11                     jne         L$695 
0066    85 C0                     test        ax,ax 
0068    75 0D                     jne         L$695 
006A                          L$694:
006A    B8 01 00                  mov         ax,0x0001 
006D    83 C7 04                  add         di,0x0004 
0070    89 46 F0                  mov         word ptr -0x10[bp],ax 
0073    01 C1                     add         cx,ax 
0075    EB D8                     jmp         L$693 
0077                          L$695:
0077    C7 46 F0 02 00            mov         word ptr -0x10[bp],0x0002 
007C    89 46 D0                  mov         word ptr -0x30[bp],ax 
007F    31 DB                     xor         bx,bx 
0081    89 56 D2                  mov         word ptr -0x2e[bp],dx 
0084    9A 00 00 00 00            call        far Enemy::~Enemy() 
0089    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
008E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0093    EB D5                     jmp         L$694 
0095                          L$696:
0095    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
009A    8B 04                     mov         ax,word ptr [si] 
009C    8B 54 02                  mov         dx,word ptr 0x2[si] 
009F    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A4    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
00A7    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
00AC    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00B0    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
00B3    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
00B6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00BA    89 F0                     mov         ax,si 
00BC    89 EC                     mov         sp,bp 
00BE    5D                        pop         bp 
00BF    5F                        pop         di 
00C0    5E                        pop         si 
00C1    59                        pop         cx 
00C2    CB                        retf        
00C3    FC                        cld         

Routine Size: 196 bytes,    Routine Base: W?$dt:ptr_vector$::1f$Enemy$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::ptr_vector<SeekerEnemy far >::~ptr_vector() SEGMENT ANY 'game_TEXT' 000000C4 bytes
0000                          L$697:
0000                          far tnd::ptr_vector<SeekerEnemy far >::~ptr_vector():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 30                  sub         sp,0x0030 
0009    89 C6                     mov         si,ax 
000B    89 56 FE                  mov         word ptr -0x2[bp],dx 
000E    C7 46 E8 00 00            mov         word ptr -0x18[bp],offset __wcpp_4_fs_handler_rtn__ 
0013    C7 46 EA 00 00            mov         word ptr -0x16[bp],seg __wcpp_4_fs_handler_rtn__ 
0018    C7 46 EC C6 05            mov         word ptr -0x14[bp],offset L$447 
001D    C7 46 EE 00 00            mov         word ptr -0x12[bp],game_DATA1 
0022    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
0027    89 46 F2                  mov         word ptr -0xe[bp],ax 
002A    89 56 F4                  mov         word ptr -0xc[bp],dx 
002D    88 5E F6                  mov         byte ptr -0xa[bp],bl 
0030    31 C9                     xor         cx,cx 
0032    31 FF                     xor         di,di 
0034    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0038    8D 56 E4                  lea         dx,-0x1c[bp] 
003B    89 46 E4                  mov         word ptr -0x1c[bp],ax 
003E    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0042    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0047    89 46 E6                  mov         word ptr -0x1a[bp],ax 
004A    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
004F                          L$698:
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    8B 44 06                  mov         ax,word ptr 0x6[si] 
0055    39 C1                     cmp         cx,ax 
0057    7D 3C                     jge         L$701 
0059    C5 1C                     lds         bx,dword ptr [si] 
005B    01 FB                     add         bx,di 
005D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0060    8B 07                     mov         ax,word ptr [bx] 
0062    85 D2                     test        dx,dx 
0064    75 11                     jne         L$700 
0066    85 C0                     test        ax,ax 
0068    75 0D                     jne         L$700 
006A                          L$699:
006A    B8 01 00                  mov         ax,0x0001 
006D    83 C7 04                  add         di,0x0004 
0070    89 46 F0                  mov         word ptr -0x10[bp],ax 
0073    01 C1                     add         cx,ax 
0075    EB D8                     jmp         L$698 
0077                          L$700:
0077    C7 46 F0 02 00            mov         word ptr -0x10[bp],0x0002 
007C    89 46 D0                  mov         word ptr -0x30[bp],ax 
007F    31 DB                     xor         bx,bx 
0081    89 56 D2                  mov         word ptr -0x2e[bp],dx 
0084    9A 00 00 00 00            call        far SeekerEnemy::~SeekerEnemy() 
0089    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
008E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0093    EB D5                     jmp         L$699 
0095                          L$701:
0095    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
009A    8B 04                     mov         ax,word ptr [si] 
009C    8B 54 02                  mov         dx,word ptr 0x2[si] 
009F    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A4    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
00A7    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
00AC    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00B0    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
00B3    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
00B6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00BA    89 F0                     mov         ax,si 
00BC    89 EC                     mov         sp,bp 
00BE    5D                        pop         bp 
00BF    5F                        pop         di 
00C0    5E                        pop         si 
00C1    59                        pop         cx 
00C2    CB                        retf        
00C3    FC                        cld         

Routine Size: 196 bytes,    Routine Base: W?$dt:ptr_vector$::1f$SeekerEnemy$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::ptr_vector<FireBall far >::~ptr_vector() SEGMENT ANY 'game_TEXT' 000000C4 bytes
0000                          L$702:
0000                          far tnd::ptr_vector<FireBall far >::~ptr_vector():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 30                  sub         sp,0x0030 
0009    89 C6                     mov         si,ax 
000B    89 56 FE                  mov         word ptr -0x2[bp],dx 
000E    C7 46 E8 00 00            mov         word ptr -0x18[bp],offset __wcpp_4_fs_handler_rtn__ 
0013    C7 46 EA 00 00            mov         word ptr -0x16[bp],seg __wcpp_4_fs_handler_rtn__ 
0018    C7 46 EC D8 05            mov         word ptr -0x14[bp],offset L$448 
001D    C7 46 EE 00 00            mov         word ptr -0x12[bp],game_DATA1 
0022    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
0027    89 46 F2                  mov         word ptr -0xe[bp],ax 
002A    89 56 F4                  mov         word ptr -0xc[bp],dx 
002D    88 5E F6                  mov         byte ptr -0xa[bp],bl 
0030    31 C9                     xor         cx,cx 
0032    31 FF                     xor         di,di 
0034    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
0038    8D 56 E4                  lea         dx,-0x1c[bp] 
003B    89 46 E4                  mov         word ptr -0x1c[bp],ax 
003E    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0042    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
0047    89 46 E6                  mov         word ptr -0x1a[bp],ax 
004A    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
004F                          L$703:
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    8B 44 06                  mov         ax,word ptr 0x6[si] 
0055    39 C1                     cmp         cx,ax 
0057    7D 3C                     jge         L$706 
0059    C5 1C                     lds         bx,dword ptr [si] 
005B    01 FB                     add         bx,di 
005D    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0060    8B 07                     mov         ax,word ptr [bx] 
0062    85 D2                     test        dx,dx 
0064    75 11                     jne         L$705 
0066    85 C0                     test        ax,ax 
0068    75 0D                     jne         L$705 
006A                          L$704:
006A    B8 01 00                  mov         ax,0x0001 
006D    83 C7 04                  add         di,0x0004 
0070    89 46 F0                  mov         word ptr -0x10[bp],ax 
0073    01 C1                     add         cx,ax 
0075    EB D8                     jmp         L$703 
0077                          L$705:
0077    C7 46 F0 02 00            mov         word ptr -0x10[bp],0x0002 
007C    89 46 D0                  mov         word ptr -0x30[bp],ax 
007F    31 DB                     xor         bx,bx 
0081    89 56 D2                  mov         word ptr -0x2e[bp],dx 
0084    9A 00 00 00 00            call        far FireBall::~FireBall() 
0089    C7 46 F0 01 00            mov         word ptr -0x10[bp],0x0001 
008E    9A 00 00 00 00            call        void far operator delete( void far * ) 
0093    EB D5                     jmp         L$704 
0095                          L$706:
0095    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
009A    8B 04                     mov         ax,word ptr [si] 
009C    8B 54 02                  mov         dx,word ptr 0x2[si] 
009F    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A4    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
00A7    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
00AC    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00B0    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
00B3    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
00B6    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00BA    89 F0                     mov         ax,si 
00BC    89 EC                     mov         sp,bp 
00BE    5D                        pop         bp 
00BF    5F                        pop         di 
00C0    5E                        pop         si 
00C1    59                        pop         cx 
00C2    CB                        retf        
00C3    FC                        cld         

Routine Size: 196 bytes,    Routine Base: W?$dt:ptr_vector$::1f$FireBall$$:tnd$f()_ + 0000

No disassembly errors

Comdat: far tnd::ptr_vector<Boss1 far >::~ptr_vector() SEGMENT ANY 'game_TEXT' 000000BC bytes
0000                          L$707:
0000                          far tnd::ptr_vector<Boss1 far >::~ptr_vector():
0000    51                        push        cx 
0001    56                        push        si 
0002    57                        push        di 
0003    55                        push        bp 
0004    89 E5                     mov         bp,sp 
0006    83 EC 20                  sub         sp,0x0020 
0009    89 C7                     mov         di,ax 
000B    89 56 FE                  mov         word ptr -0x2[bp],dx 
000E    C7 46 E4 00 00            mov         word ptr -0x1c[bp],offset __wcpp_4_fs_handler_rtn__ 
0013    C7 46 E6 00 00            mov         word ptr -0x1a[bp],seg __wcpp_4_fs_handler_rtn__ 
0018    C7 46 E8 EA 05            mov         word ptr -0x18[bp],offset L$449 
001D    C7 46 EA 00 00            mov         word ptr -0x16[bp],game_DATA1 
0022    C7 46 EC 01 00            mov         word ptr -0x14[bp],0x0001 
0027    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
002C    89 46 EE                  mov         word ptr -0x12[bp],ax 
002F    89 56 F0                  mov         word ptr -0x10[bp],dx 
0032    88 5E F2                  mov         byte ptr -0xe[bp],bl 
0035    31 C9                     xor         cx,cx 
0037    36 A1 00 00               mov         ax,word ptr ss:__wint_thread_data 
003B    8D 56 E0                  lea         dx,-0x20[bp] 
003E    89 46 E0                  mov         word ptr -0x20[bp],ax 
0041    36 A1 02 00               mov         ax,word ptr ss:__wint_thread_data+0x2 
0045    36 89 16 00 00            mov         word ptr ss:__wint_thread_data,dx 
004A    89 46 E2                  mov         word ptr -0x1e[bp],ax 
004D    36 8C 16 02 00            mov         word ptr ss:__wint_thread_data+0x2,ss 
0052                          L$708:
0052    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0055    8B 45 06                  mov         ax,word ptr 0x6[di] 
0058    3B 46 FA                  cmp         ax,word ptr -0x6[bp] 
005B    7E 30                     jle         L$711 
005D    C5 1D                     lds         bx,dword ptr [di] 
005F    01 CB                     add         bx,cx 
0061    8B 57 02                  mov         dx,word ptr 0x2[bx] 
0064    8B 37                     mov         si,word ptr [bx] 
0066    85 D2                     test        dx,dx 
0068    75 0C                     jne         L$710 
006A    85 F6                     test        si,si 
006C    75 08                     jne         L$710 
006E                          L$709:
006E    FF 46 FA                  inc         word ptr -0x6[bp] 
0071    83 C1 04                  add         cx,0x0004 
0074    EB DC                     jmp         L$708 
0076                          L$710:
0076    8E DA                     mov         ds,dx 
0078    8B 5C 26                  mov         bx,word ptr 0x26[si] 
007B    89 F0                     mov         ax,si 
007D    89 5E FC                  mov         word ptr -0x4[bp],bx 
0080    8E 5C 28                  mov         ds,word ptr 0x28[si] 
0083    8B 76 FC                  mov         si,word ptr -0x4[bp] 
0086    BB 02 00                  mov         bx,0x0002 
0089    FF 1C                     call        dword ptr [si] 
008B    EB E1                     jmp         L$709 
008D                          L$711:
008D    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0092    8B 05                     mov         ax,word ptr [di] 
0094    8B 55 02                  mov         dx,word ptr 0x2[di] 
0097    9A 00 00 00 00            call        void far operator delete []( void far * ) 
009C    8B 46 E0                  mov         ax,word ptr -0x20[bp] 
009F    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
00A4    36 A3 00 00               mov         word ptr ss:__wint_thread_data,ax 
00A8    8B 46 E2                  mov         ax,word ptr -0x1e[bp] 
00AB    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
00AE    36 A3 02 00               mov         word ptr ss:__wint_thread_data+0x2,ax 
00B2    89 F8                     mov         ax,di 
00B4    89 EC                     mov         sp,bp 
00B6    5D                        pop         bp 
00B7    5F                        pop         di 
00B8    5E                        pop         si 
00B9    59                        pop         cx 
00BA    CB                        retf        
00BB    FC                        cld         

Routine Size: 188 bytes,    Routine Base: W?$dt:ptr_vector$::1f$Boss1$$:tnd$f()_ + 0000

No disassembly errors

Comdat: Button far & far Button::operator =( Button const far & ) SEGMENT ANY 'game_TEXT' 00000014 bytes
0000                          Button far & far Button::operator =( Button const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    8E C2                     mov         es,dx 
0004    89 C7                     mov         di,ax 
0006    8E D9                     mov         ds,cx 
0008    89 DE                     mov         si,bx 
000A    A5                        movsw       
000B    A5                        movsw       
000C    A5                        movsw       
000D    A5                        movsw       
000E    A5                        movsw       
000F    A5                        movsw       
0010    5F                        pop         di 
0011    5E                        pop         si 
0012    CB                        retf        
0013    FC                        cld         

Routine Size: 20 bytes,    Routine Base: W?$aa:Button$f(rfx$0$)rf$0$ + 0000

No disassembly errors

Comdat: void far tnd::vector<Enemy far * far >::push_back( Enemy far * const far & ) SEGMENT ANY 'game_TEXT' 000000B2 bytes
0000                          void far tnd::vector<Enemy far * far >::push_back( Enemy far * const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    83 EC 08                  sub         sp,0x0008 
0008    89 C6                     mov         si,ax 
000A    89 56 FE                  mov         word ptr -0x2[bp],dx 
000D    89 5E FC                  mov         word ptr -0x4[bp],bx 
0010    8E DA                     mov         ds,dx 
0012    8B 44 06                  mov         ax,word ptr 0x6[si] 
0015    40                        inc         ax 
0016    3B 44 04                  cmp         ax,word ptr 0x4[si] 
0019    7F 2B                     jg          L$713 
001B                          L$712:
001B    C5 7E FC                  lds         di,dword ptr -0x4[bp] 
001E    8B 5C 06                  mov         bx,word ptr 0x6[si] 
0021    8B 04                     mov         ax,word ptr [si] 
0023    D1 E3                     shl         bx,0x01 
0025    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0028    D1 E3                     shl         bx,0x01 
002A    8E C1                     mov         es,cx 
002C    01 C3                     add         bx,ax 
002E    26 8B 05                  mov         ax,word ptr es:[di] 
0031    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
0035    89 07                     mov         word ptr [bx],ax 
0037    89 57 02                  mov         word ptr 0x2[bx],dx 
003A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
003D    FF 44 06                  inc         word ptr 0x6[si] 
0040    89 EC                     mov         sp,bp 
0042    5D                        pop         bp 
0043    5F                        pop         di 
0044    5E                        pop         si 
0045    CB                        retf        
0046                          L$713:
0046    D1 E0                     shl         ax,0x01 
0048    D1 E0                     shl         ax,0x01 
004A    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    89 C3                     mov         bx,ax 
0054    89 46 F8                  mov         word ptr -0x8[bp],ax 
0057    8B 44 06                  mov         ax,word ptr 0x6[si] 
005A    40                        inc         ax 
005B    89 56 FA                  mov         word ptr -0x6[bp],dx 
005E    89 44 04                  mov         word ptr 0x4[si],ax 
0061    31 C0                     xor         ax,ax 
0063    83 7C 06 00               cmp         word ptr 0x6[si],0x0000 
0067    7E 2A                     jle         L$715 
0069    8E C2                     mov         es,dx 
006B                          L$714:
006B    89 C7                     mov         di,ax 
006D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0070    D1 E7                     shl         di,0x01 
0072    8B 14                     mov         dx,word ptr [si] 
0074    D1 E7                     shl         di,0x01 
0076    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0079    01 D7                     add         di,dx 
007B    8B 15                     mov         dx,word ptr [di] 
007D    8B 7D 02                  mov         di,word ptr 0x2[di] 
0080    26 89 17                  mov         word ptr es:[bx],dx 
0083    40                        inc         ax 
0084    26 89 7F 02               mov         word ptr es:0x2[bx],di 
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    83 C3 04                  add         bx,0x0004 
008E    3B 44 06                  cmp         ax,word ptr 0x6[si] 
0091    7C D8                     jl          L$714 
0093                          L$715:
0093    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0096    8B 04                     mov         ax,word ptr [si] 
0098    8B 54 02                  mov         dx,word ptr 0x2[si] 
009B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00A3    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
00A6    89 04                     mov         word ptr [si],ax 
00A8    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
00AB    89 44 02                  mov         word ptr 0x2[si],ax 
00AE    E9 6A FF                  jmp         L$712 
00B1    FC                        cld         

Routine Size: 178 bytes,    Routine Base: W?push_back$:vector$::1fpf$Enemy$$:tnd$f(rfxpf$2$)v + 0000

No disassembly errors

Comdat: void far tnd::vector<Enemy far * far >::clear() SEGMENT ANY 'game_TEXT' 0000000C bytes
0000                          void far tnd::vector<Enemy far * far >::clear():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000A    5B                        pop         bx 
000B    CB                        retf        

Routine Size: 12 bytes,    Routine Base: W?clear$:vector$::1fpf$Enemy$$:tnd$f()v + 0000

No disassembly errors

Comdat: Enemy far * far & far tnd::vector<Enemy far * far >::operator []( int ) SEGMENT ANY 'game_TEXT' 00000012 bytes
0000                          Enemy far * far & far tnd::vector<Enemy far * far >::operator []( int ):
0000    56                        push        si 
0001    89 C6                     mov         si,ax 
0003    8E DA                     mov         ds,dx 
0005    D1 E3                     shl         bx,0x01 
0007    8B 04                     mov         ax,word ptr [si] 
0009    D1 E3                     shl         bx,0x01 
000B    8B 54 02                  mov         dx,word ptr 0x2[si] 
000E    01 D8                     add         ax,bx 
0010    5E                        pop         si 
0011    CB                        retf        

Routine Size: 18 bytes,    Routine Base: W?$od:vector$::1fpf$Enemy$$:tnd$f(i)rfpf$1$ + 0000

No disassembly errors

Comdat: int far tnd::vector<Enemy far * far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<Enemy far * far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1fpf$Enemy$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: void far tnd::vector<SeekerEnemy far * far >::push_back( SeekerEnemy far * const far & ) SEGMENT ANY 'game_TEXT' 000000B2 bytes
0000                          void far tnd::vector<SeekerEnemy far * far >::push_back( SeekerEnemy far * const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    83 EC 08                  sub         sp,0x0008 
0008    89 C6                     mov         si,ax 
000A    89 56 FE                  mov         word ptr -0x2[bp],dx 
000D    89 5E FC                  mov         word ptr -0x4[bp],bx 
0010    8E DA                     mov         ds,dx 
0012    8B 44 06                  mov         ax,word ptr 0x6[si] 
0015    40                        inc         ax 
0016    3B 44 04                  cmp         ax,word ptr 0x4[si] 
0019    7F 2B                     jg          L$717 
001B                          L$716:
001B    C5 7E FC                  lds         di,dword ptr -0x4[bp] 
001E    8B 5C 06                  mov         bx,word ptr 0x6[si] 
0021    8B 04                     mov         ax,word ptr [si] 
0023    D1 E3                     shl         bx,0x01 
0025    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0028    D1 E3                     shl         bx,0x01 
002A    8E C1                     mov         es,cx 
002C    01 C3                     add         bx,ax 
002E    26 8B 05                  mov         ax,word ptr es:[di] 
0031    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
0035    89 07                     mov         word ptr [bx],ax 
0037    89 57 02                  mov         word ptr 0x2[bx],dx 
003A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
003D    FF 44 06                  inc         word ptr 0x6[si] 
0040    89 EC                     mov         sp,bp 
0042    5D                        pop         bp 
0043    5F                        pop         di 
0044    5E                        pop         si 
0045    CB                        retf        
0046                          L$717:
0046    D1 E0                     shl         ax,0x01 
0048    D1 E0                     shl         ax,0x01 
004A    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    89 C3                     mov         bx,ax 
0054    89 46 F8                  mov         word ptr -0x8[bp],ax 
0057    8B 44 06                  mov         ax,word ptr 0x6[si] 
005A    40                        inc         ax 
005B    89 56 FA                  mov         word ptr -0x6[bp],dx 
005E    89 44 04                  mov         word ptr 0x4[si],ax 
0061    31 C0                     xor         ax,ax 
0063    83 7C 06 00               cmp         word ptr 0x6[si],0x0000 
0067    7E 2A                     jle         L$719 
0069    8E C2                     mov         es,dx 
006B                          L$718:
006B    89 C7                     mov         di,ax 
006D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0070    D1 E7                     shl         di,0x01 
0072    8B 14                     mov         dx,word ptr [si] 
0074    D1 E7                     shl         di,0x01 
0076    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0079    01 D7                     add         di,dx 
007B    8B 15                     mov         dx,word ptr [di] 
007D    8B 7D 02                  mov         di,word ptr 0x2[di] 
0080    26 89 17                  mov         word ptr es:[bx],dx 
0083    40                        inc         ax 
0084    26 89 7F 02               mov         word ptr es:0x2[bx],di 
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    83 C3 04                  add         bx,0x0004 
008E    3B 44 06                  cmp         ax,word ptr 0x6[si] 
0091    7C D8                     jl          L$718 
0093                          L$719:
0093    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0096    8B 04                     mov         ax,word ptr [si] 
0098    8B 54 02                  mov         dx,word ptr 0x2[si] 
009B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00A3    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
00A6    89 04                     mov         word ptr [si],ax 
00A8    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
00AB    89 44 02                  mov         word ptr 0x2[si],ax 
00AE    E9 6A FF                  jmp         L$716 
00B1    FC                        cld         

Routine Size: 178 bytes,    Routine Base: W?push_back$:vector$::1fpf$SeekerEnemy$$:tnd$f(rfxpf$2$)v + 0000

No disassembly errors

Comdat: void far tnd::vector<SeekerEnemy far * far >::clear() SEGMENT ANY 'game_TEXT' 0000000C bytes
0000                          void far tnd::vector<SeekerEnemy far * far >::clear():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000A    5B                        pop         bx 
000B    CB                        retf        

Routine Size: 12 bytes,    Routine Base: W?clear$:vector$::1fpf$SeekerEnemy$$:tnd$f()v + 0000

No disassembly errors

Comdat: SeekerEnemy far * far & far tnd::vector<SeekerEnemy far * far >::operator []( int ) SEGMENT ANY 'game_TEXT' 00000012 bytes
0000                          SeekerEnemy far * far & far tnd::vector<SeekerEnemy far * far >::operator []( int ):
0000    56                        push        si 
0001    89 C6                     mov         si,ax 
0003    8E DA                     mov         ds,dx 
0005    D1 E3                     shl         bx,0x01 
0007    8B 04                     mov         ax,word ptr [si] 
0009    D1 E3                     shl         bx,0x01 
000B    8B 54 02                  mov         dx,word ptr 0x2[si] 
000E    01 D8                     add         ax,bx 
0010    5E                        pop         si 
0011    CB                        retf        

Routine Size: 18 bytes,    Routine Base: W?$od:vector$::1fpf$SeekerEnemy$$:tnd$f(i)rfpf$1$ + 0000

No disassembly errors

Comdat: int far tnd::vector<SeekerEnemy far * far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<SeekerEnemy far * far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1fpf$SeekerEnemy$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: void far tnd::vector<FireBall far * far >::push_back( FireBall far * const far & ) SEGMENT ANY 'game_TEXT' 000000B2 bytes
0000                          void far tnd::vector<FireBall far * far >::push_back( FireBall far * const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    83 EC 08                  sub         sp,0x0008 
0008    89 C6                     mov         si,ax 
000A    89 56 FE                  mov         word ptr -0x2[bp],dx 
000D    89 5E FC                  mov         word ptr -0x4[bp],bx 
0010    8E DA                     mov         ds,dx 
0012    8B 44 06                  mov         ax,word ptr 0x6[si] 
0015    40                        inc         ax 
0016    3B 44 04                  cmp         ax,word ptr 0x4[si] 
0019    7F 2B                     jg          L$721 
001B                          L$720:
001B    C5 7E FC                  lds         di,dword ptr -0x4[bp] 
001E    8B 5C 06                  mov         bx,word ptr 0x6[si] 
0021    8B 04                     mov         ax,word ptr [si] 
0023    D1 E3                     shl         bx,0x01 
0025    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0028    D1 E3                     shl         bx,0x01 
002A    8E C1                     mov         es,cx 
002C    01 C3                     add         bx,ax 
002E    26 8B 05                  mov         ax,word ptr es:[di] 
0031    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
0035    89 07                     mov         word ptr [bx],ax 
0037    89 57 02                  mov         word ptr 0x2[bx],dx 
003A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
003D    FF 44 06                  inc         word ptr 0x6[si] 
0040    89 EC                     mov         sp,bp 
0042    5D                        pop         bp 
0043    5F                        pop         di 
0044    5E                        pop         si 
0045    CB                        retf        
0046                          L$721:
0046    D1 E0                     shl         ax,0x01 
0048    D1 E0                     shl         ax,0x01 
004A    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    89 C3                     mov         bx,ax 
0054    89 46 F8                  mov         word ptr -0x8[bp],ax 
0057    8B 44 06                  mov         ax,word ptr 0x6[si] 
005A    40                        inc         ax 
005B    89 56 FA                  mov         word ptr -0x6[bp],dx 
005E    89 44 04                  mov         word ptr 0x4[si],ax 
0061    31 C0                     xor         ax,ax 
0063    83 7C 06 00               cmp         word ptr 0x6[si],0x0000 
0067    7E 2A                     jle         L$723 
0069    8E C2                     mov         es,dx 
006B                          L$722:
006B    89 C7                     mov         di,ax 
006D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0070    D1 E7                     shl         di,0x01 
0072    8B 14                     mov         dx,word ptr [si] 
0074    D1 E7                     shl         di,0x01 
0076    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0079    01 D7                     add         di,dx 
007B    8B 15                     mov         dx,word ptr [di] 
007D    8B 7D 02                  mov         di,word ptr 0x2[di] 
0080    26 89 17                  mov         word ptr es:[bx],dx 
0083    40                        inc         ax 
0084    26 89 7F 02               mov         word ptr es:0x2[bx],di 
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    83 C3 04                  add         bx,0x0004 
008E    3B 44 06                  cmp         ax,word ptr 0x6[si] 
0091    7C D8                     jl          L$722 
0093                          L$723:
0093    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0096    8B 04                     mov         ax,word ptr [si] 
0098    8B 54 02                  mov         dx,word ptr 0x2[si] 
009B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00A3    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
00A6    89 04                     mov         word ptr [si],ax 
00A8    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
00AB    89 44 02                  mov         word ptr 0x2[si],ax 
00AE    E9 6A FF                  jmp         L$720 
00B1    FC                        cld         

Routine Size: 178 bytes,    Routine Base: W?push_back$:vector$::1fpf$FireBall$$:tnd$f(rfxpf$2$)v + 0000

No disassembly errors

Comdat: void far tnd::vector<FireBall far * far >::clear() SEGMENT ANY 'game_TEXT' 0000000C bytes
0000                          void far tnd::vector<FireBall far * far >::clear():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000A    5B                        pop         bx 
000B    CB                        retf        

Routine Size: 12 bytes,    Routine Base: W?clear$:vector$::1fpf$FireBall$$:tnd$f()v + 0000

No disassembly errors

Comdat: FireBall far * far & far tnd::vector<FireBall far * far >::operator []( int ) SEGMENT ANY 'game_TEXT' 00000012 bytes
0000                          FireBall far * far & far tnd::vector<FireBall far * far >::operator []( int ):
0000    56                        push        si 
0001    89 C6                     mov         si,ax 
0003    8E DA                     mov         ds,dx 
0005    D1 E3                     shl         bx,0x01 
0007    8B 04                     mov         ax,word ptr [si] 
0009    D1 E3                     shl         bx,0x01 
000B    8B 54 02                  mov         dx,word ptr 0x2[si] 
000E    01 D8                     add         ax,bx 
0010    5E                        pop         si 
0011    CB                        retf        

Routine Size: 18 bytes,    Routine Base: W?$od:vector$::1fpf$FireBall$$:tnd$f(i)rfpf$1$ + 0000

No disassembly errors

Comdat: int far tnd::vector<FireBall far * far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<FireBall far * far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1fpf$FireBall$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: void far tnd::vector<Boss1 far * far >::push_back( Boss1 far * const far & ) SEGMENT ANY 'game_TEXT' 000000B2 bytes
0000                          void far tnd::vector<Boss1 far * far >::push_back( Boss1 far * const far & ):
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    83 EC 08                  sub         sp,0x0008 
0008    89 C6                     mov         si,ax 
000A    89 56 FE                  mov         word ptr -0x2[bp],dx 
000D    89 5E FC                  mov         word ptr -0x4[bp],bx 
0010    8E DA                     mov         ds,dx 
0012    8B 44 06                  mov         ax,word ptr 0x6[si] 
0015    40                        inc         ax 
0016    3B 44 04                  cmp         ax,word ptr 0x4[si] 
0019    7F 2B                     jg          L$725 
001B                          L$724:
001B    C5 7E FC                  lds         di,dword ptr -0x4[bp] 
001E    8B 5C 06                  mov         bx,word ptr 0x6[si] 
0021    8B 04                     mov         ax,word ptr [si] 
0023    D1 E3                     shl         bx,0x01 
0025    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0028    D1 E3                     shl         bx,0x01 
002A    8E C1                     mov         es,cx 
002C    01 C3                     add         bx,ax 
002E    26 8B 05                  mov         ax,word ptr es:[di] 
0031    26 8B 55 02               mov         dx,word ptr es:0x2[di] 
0035    89 07                     mov         word ptr [bx],ax 
0037    89 57 02                  mov         word ptr 0x2[bx],dx 
003A    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
003D    FF 44 06                  inc         word ptr 0x6[si] 
0040    89 EC                     mov         sp,bp 
0042    5D                        pop         bp 
0043    5F                        pop         di 
0044    5E                        pop         si 
0045    CB                        retf        
0046                          L$725:
0046    D1 E0                     shl         ax,0x01 
0048    D1 E0                     shl         ax,0x01 
004A    9A 00 00 00 00            call        void far * far operator new []( int unsigned ) 
004F    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0052    89 C3                     mov         bx,ax 
0054    89 46 F8                  mov         word ptr -0x8[bp],ax 
0057    8B 44 06                  mov         ax,word ptr 0x6[si] 
005A    40                        inc         ax 
005B    89 56 FA                  mov         word ptr -0x6[bp],dx 
005E    89 44 04                  mov         word ptr 0x4[si],ax 
0061    31 C0                     xor         ax,ax 
0063    83 7C 06 00               cmp         word ptr 0x6[si],0x0000 
0067    7E 2A                     jle         L$727 
0069    8E C2                     mov         es,dx 
006B                          L$726:
006B    89 C7                     mov         di,ax 
006D    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0070    D1 E7                     shl         di,0x01 
0072    8B 14                     mov         dx,word ptr [si] 
0074    D1 E7                     shl         di,0x01 
0076    8E 5C 02                  mov         ds,word ptr 0x2[si] 
0079    01 D7                     add         di,dx 
007B    8B 15                     mov         dx,word ptr [di] 
007D    8B 7D 02                  mov         di,word ptr 0x2[di] 
0080    26 89 17                  mov         word ptr es:[bx],dx 
0083    40                        inc         ax 
0084    26 89 7F 02               mov         word ptr es:0x2[bx],di 
0088    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
008B    83 C3 04                  add         bx,0x0004 
008E    3B 44 06                  cmp         ax,word ptr 0x6[si] 
0091    7C D8                     jl          L$726 
0093                          L$727:
0093    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
0096    8B 04                     mov         ax,word ptr [si] 
0098    8B 54 02                  mov         dx,word ptr 0x2[si] 
009B    9A 00 00 00 00            call        void far operator delete []( void far * ) 
00A0    8E 5E FE                  mov         ds,word ptr -0x2[bp] 
00A3    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
00A6    89 04                     mov         word ptr [si],ax 
00A8    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
00AB    89 44 02                  mov         word ptr 0x2[si],ax 
00AE    E9 6A FF                  jmp         L$724 
00B1    FC                        cld         

Routine Size: 178 bytes,    Routine Base: W?push_back$:vector$::1fpf$Boss1$$:tnd$f(rfxpf$2$)v + 0000

No disassembly errors

Comdat: void far tnd::vector<Boss1 far * far >::clear() SEGMENT ANY 'game_TEXT' 0000000C bytes
0000                          void far tnd::vector<Boss1 far * far >::clear():
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    C7 47 06 00 00            mov         word ptr 0x6[bx],0x0000 
000A    5B                        pop         bx 
000B    CB                        retf        

Routine Size: 12 bytes,    Routine Base: W?clear$:vector$::1fpf$Boss1$$:tnd$f()v + 0000

No disassembly errors

Comdat: void (far * const far __vftbl[])() SEGMENT ANY 'game_DATA1' 00000024 bytes
0000                          void (far * const far __vftbl[])():
0000    00 00 00 00                                     DD	char unsigned const far __rtti[]
0004    00 00 00 00                                     DD	void far Game::levelTransition( LevelTransition )
0008    00 00 00 00                                     DD	void far Game::collectApple( Point )
000C    00 00 00 00                                     DD	void far Game::collectJetPack( Point )
0010    00 00 00 00                                     DD	void far Game::collectSunItem( Point )
0014    00 00 00 00                                     DD	void far Game::touchButton( short unsigned, ButtonType )
0018    00 00 00 00                                     DD	void far Game::onDeath()
001C    00 00 00 00                                     DD	void far Game::drawAppleCount()
0020    00 00 00 00                                     DD	void far Game::drawDeathCount()

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 03 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 15 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 20 00                                     .. .

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 25 00                                     ..%.

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 17 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 16 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 12 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 0F 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 0B 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 0A 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 09 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 08 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 00 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 0E 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 1C 00                                     ....

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 3D 00                                     ..=.

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 44 00                                     ..D.

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 48 00                                     ..H.

Comdat: char unsigned const far __stattabcmd[] SEGMENT ANY 'game_DATA1' 00000004 bytes
0000                          char unsigned const far __stattabcmd[]:
0000    01 00 01 00                                     ....

Segment: game_DATA3 BYTE USE16 00000000 bytes

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$556
0008    00 00 00 00                                     DD	far GameState::GameState( GameState const far & )
000C    00 00 00 00                                     DD	far GameState::~GameState()
0010    1C 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	far TinyString::TinyString()
0008    00 00 00 00                                     DD	far TinyString::TinyString( TinyString const far & )
000C    00 00 00 00                                     DD	far TinyString::~TinyString()
0010    04 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00 00 00 00 00                         ........
0008    00 00 00 00                                     DD	far Level::Level( Level const far & )
000C    00 00 00 00                                     DD	far Level::~Level()
0010    A0 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$623
0008    00 00 00 00                                     DD	L$620
000C    00 00 00 00                                     DD	far tnd::vector<Rectangle far >::~vector()
0010    08 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	far tnd::vector<MessageBox far >::vector()
0008    00 00 00 00                                     DD	L$631
000C    00 00 00 00                                     DD	far tnd::vector<MessageBox far >::~vector()
0010    08 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00 00 00 00 00                         ........
0008    00 00 00 00                                     DD	far Text::Text( Text const far & )
000C    00 00 00 00                                     DD	far Text::~Text()
0010    12 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$552
0008    00 00 00 00                                     DD	L$553
000C    00 00 00 00                                     DD	far Rectangle::~Rectangle()
0010    08 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$554
0008    00 00 00 00                                     DD	far Button::Button( Button const far & )
000C    00 00 00 00                                     DD	far Button::~Button()
0010    0C 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$571
0008    00 00 00 00                                     DD	far CollectedGuffin::CollectedGuffin( CollectedGuffin const far & )
000C    00 00 00 00                                     DD	far CollectedGuffin::~CollectedGuffin()
0010    06 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned const far __typesig[] SEGMENT ANY 'game_DATA1' 00000016 bytes
0000                          char unsigned const far __typesig[]:
0000    00 01 02 00                                     ....
0004    00 00 00 00                                     DD	L$555
0008    00 00 00 00                                     DD	far MessageBox::MessageBox( MessageBox const far & )
000C    00 00 00 00                                     DD	far MessageBox::~MessageBox()
0010    0A 00                                           ..
0012    04 00 00 00                                     DD	char unsigned far __typeid[]+0x4

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000017 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 50 68 79 73 69 63 73 43 61 6C 6C ....$PhysicsCall
0010    62 61 63 6B 24 24 00                            back$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 0000000C bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 47 61 6D 65 24 24 00             ....$Game$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000012 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 4D 65 73 73 61 67 65 42 6F 78 24 ....$MessageBox$
0010    24 00                                           $.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000017 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 43 6F 6C 6C 65 63 74 65 64 47 75 ....$CollectedGu
0010    66 66 69 6E 24 24 00                            ffin$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 0000000E bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 42 75 74 74 6F 6E 24 24 00       ....$Button$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000011 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 52 65 63 74 61 6E 67 6C 65 24 24 ....$Rectangle$$
0010    00                                              .

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 0000000C bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 54 65 78 74 24 24 00             ....$Text$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000024 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 76 65 63 74 6F 72 24 3A 3A 31 66 ....$vector$::1f
0010    24 4D 65 73 73 61 67 65 42 6F 78 24 24 3A 74 6E $MessageBox$$:tn
0020    64 24 24 00                                     d$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000023 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 76 65 63 74 6F 72 24 3A 3A 31 66 ....$vector$::1f
0010    24 52 65 63 74 61 6E 67 6C 65 24 24 3A 74 6E 64 $Rectangle$$:tnd
0020    24 24 00                                        $$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 0000000D bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 4C 65 76 65 6C 24 24 00          ....$Level$$.

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000012 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 54 69 6E 79 53 74 72 69 6E 67 24 ....$TinyString$
0010    24 00                                           $.

Comdat: Boss1 far * far & far tnd::vector<Boss1 far * far >::operator []( int ) SEGMENT ANY 'game_TEXT' 00000012 bytes
0000                          Boss1 far * far & far tnd::vector<Boss1 far * far >::operator []( int ):
0000    56                        push        si 
0001    89 C6                     mov         si,ax 
0003    8E DA                     mov         ds,dx 
0005    D1 E3                     shl         bx,0x01 
0007    8B 04                     mov         ax,word ptr [si] 
0009    D1 E3                     shl         bx,0x01 
000B    8B 54 02                  mov         dx,word ptr 0x2[si] 
000E    01 D8                     add         ax,bx 
0010    5E                        pop         si 
0011    CB                        retf        

Routine Size: 18 bytes,    Routine Base: W?$od:vector$::1fpf$Boss1$$:tnd$f(i)rfpf$1$ + 0000

No disassembly errors

Comdat: int far tnd::vector<Boss1 far * far >::size() const SEGMENT ANY 'game_TEXT' 0000000A bytes
0000                          int far tnd::vector<Boss1 far * far >::size() const:
0000    53                        push        bx 
0001    89 C3                     mov         bx,ax 
0003    8E DA                     mov         ds,dx 
0005    8B 47 06                  mov         ax,word ptr 0x6[bx] 
0008    5B                        pop         bx 
0009    CB                        retf        

Routine Size: 10 bytes,    Routine Base: W?size$:vector$::1fpf$Boss1$$:tnd$f.x()i + 0000

No disassembly errors

Comdat: char unsigned const far __rtti[] SEGMENT ANY 'game_DATA1' 00000014 bytes
0000                          char unsigned const far __rtti[]:
0000    04 00 00 00                                     ....
0004    00 00 00 00                                     DD	char unsigned far __typeid[]
0008    00 00 00 00 04 00 00 00                         ........
0010    00 00 00 00                                     DD	char unsigned far __typeid[]

Comdat: char unsigned far __typeid[] SEGMENT ANY 'game_DATA3' 00000011 bytes
0000                          char unsigned far __typeid[]:
0000    00 00 00 00 24 47 61 6D 65 53 74 61 74 65 24 24 ....$GameState$$
0010    00                                              .

